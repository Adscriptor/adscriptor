{
    "!define": {
        "AdWordsApp.Account": {
            "addCallout": {
                "!type": "fn(calloutExtension: Callout) -> AdWordsApp.CalloutOperation"
            },
            "addMobileApp": {
                "!type": "fn(mobileAppExtension: MobileApp) -> AdWordsApp.MobileAppOperation"
            },
            "addReview": {
                "!type": "fn(reviewExtension: Review) -> AdWordsApp.ReviewOperation"
            },
            "extensions": {
                "!type": "fn() -> AdWordsApp.AccountExtensions"
            },
            "getCurrencyCode": {
                "!type": "fn() -> string"
            },
            "getCustomerId": {
                "!type": "fn() -> string"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getName": {
                "!type": "fn() -> string"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "getTimeZone": {
                "!type": "fn() -> string"
            },
            "removeCallout": {
                "!type": "fn(calloutExtension: Callout)"
            },
            "removeMobileApp": {
                "!type": "fn(mobileAppExtension: MobileApp)"
            },
            "removeReview": {
                "!type": "fn(reviewExtension: Review)"
            }
        },
        "AdWordsApp.AccountCallout": {
            "getEndDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getSchedules": {
                "!type": "fn() -> [AdWordsApp.ExtensionSchedule]"
            },
            "getStartDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "getText": {
                "!type": "fn() -> string"
            },
            "isMobilePreferred": {
                "!type": "fn() -> bool"
            },
            "setEndDate": {
                "!type": "fn(date: object)"
            },
            "setMobilePreferred": {
                "!type": "fn(isMobilePreferred: bool)"
            },
            "setSchedules": {
                "!type": "fn(schedules: [AdWordsApp.ExtensionSchedule])"
            },
            "setStartDate": {
                "!type": "fn(date: object)"
            },
            "setText": {
                "!type": "fn(text: string)"
            }
        },
        "AdWordsApp.AccountCalloutIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.AccountCallout"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.AccountCalloutSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.AccountCalloutSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.AccountCalloutSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.AccountCalloutIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.AccountCalloutSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.AccountCalloutSelector"
            },
            "withIds": {
                "!type": "fn(ids: [number]) -> AdWordsApp.AccountCalloutSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.AccountCalloutSelector"
            }
        },
        "AdWordsApp.AccountExtensions": {
            "callouts": {
                "!type": "fn() -> AdWordsApp.AccountCalloutSelector"
            },
            "mobileApps": {
                "!type": "fn() -> AdWordsApp.AccountMobileAppSelector"
            },
            "reviews": {
                "!type": "fn() -> AdWordsApp.AccountReviewSelector"
            }
        },
        "AdWordsApp.AccountMobileApp": {
            "clearLinkUrl": {
                "!type": "fn()"
            },
            "getAppId": {
                "!type": "fn() -> string"
            },
            "getEndDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getLinkText": {
                "!type": "fn() -> string"
            },
            "getLinkUrl": {
                "!type": "fn() -> string"
            },
            "getSchedules": {
                "!type": "fn() -> [AdWordsApp.ExtensionSchedule]"
            },
            "getStartDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "getStore": {
                "!type": "fn() -> string"
            },
            "isMobilePreferred": {
                "!type": "fn() -> bool"
            },
            "setAppId": {
                "!type": "fn(appId: string)"
            },
            "setEndDate": {
                "!type": "fn(date: object)"
            },
            "setLinkText": {
                "!type": "fn(linkText: string)"
            },
            "setLinkUrl": {
                "!type": "fn(linkUrl: string)"
            },
            "setMobilePreferred": {
                "!type": "fn(isMobilePreferred: bool)"
            },
            "setSchedules": {
                "!type": "fn(schedules: [AdWordsApp.ExtensionSchedule])"
            },
            "setStartDate": {
                "!type": "fn(date: object)"
            },
            "setStore": {
                "!type": "fn(store: string)"
            },
            "urls": {
                "!type": "fn() -> AdWordsApp.MobileAppUrls"
            }
        },
        "AdWordsApp.AccountMobileAppIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.AccountMobileApp"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.AccountMobileAppSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.AccountMobileAppSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.AccountMobileAppSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.AccountMobileAppIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.AccountMobileAppSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.AccountMobileAppSelector"
            },
            "withIds": {
                "!type": "fn(ids: [number]) -> AdWordsApp.AccountMobileAppSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.AccountMobileAppSelector"
            }
        },
        "AdWordsApp.AccountReview": {
            "getEndDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getSchedules": {
                "!type": "fn() -> [AdWordsApp.ExtensionSchedule]"
            },
            "getSourceName": {
                "!type": "fn() -> string"
            },
            "getSourceUrl": {
                "!type": "fn() -> string"
            },
            "getStartDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "getText": {
                "!type": "fn() -> string"
            },
            "isExactlyQuoted": {
                "!type": "fn() -> bool"
            },
            "isMobilePreferred": {
                "!type": "fn() -> bool"
            },
            "setEndDate": {
                "!type": "fn(date: object)"
            },
            "setExactlyQuoted": {
                "!type": "fn(isExactlyQuoted: bool)"
            },
            "setMobilePreferred": {
                "!type": "fn(isMobilePreferred: bool)"
            },
            "setSchedules": {
                "!type": "fn(schedules: [AdWordsApp.ExtensionSchedule])"
            },
            "setSourceName": {
                "!type": "fn(sourceName: string)"
            },
            "setSourceUrl": {
                "!type": "fn(sourceUrl: string)"
            },
            "setStartDate": {
                "!type": "fn(date: object)"
            },
            "setText": {
                "!type": "fn(text: string)"
            }
        },
        "AdWordsApp.AccountReviewIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.AccountReview"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.AccountReviewSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.AccountReviewSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.AccountReviewSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.AccountReviewIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.AccountReviewSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.AccountReviewSelector"
            },
            "withIds": {
                "!type": "fn(ids: [number]) -> AdWordsApp.AccountReviewSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.AccountReviewSelector"
            }
        },
        "AdWordsApp.Ad": {
            "applyLabel": {
                "!type": "fn(name: string)"
            },
            "enable": {
                "!type": "fn()"
            },
            "getAdGroup": {
                "!type": "fn() -> AdWordsApp.AdGroup"
            },
            "getApprovalStatus": {
                "!type": "fn() -> string"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.Campaign"
            },
            "getDescription1": {
                "!type": "fn() -> string"
            },
            "getDescription2": {
                "!type": "fn() -> string"
            },
            "getDestinationUrl": {
                "!type": "fn() -> string"
            },
            "getDisapprovalReasons": {
                "!type": "fn() -> [string]"
            },
            "getDisplayUrl": {
                "!type": "fn() -> string"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getHeadline": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "getType": {
                "!type": "fn() -> string"
            },
            "isEnabled": {
                "!type": "fn() -> bool"
            },
            "isMobilePreferred": {
                "!type": "fn() -> bool"
            },
            "isPaused": {
                "!type": "fn() -> bool"
            },
            "labels": {
                "!type": "fn() -> AdWordsApp.LabelSelector"
            },
            "pause": {
                "!type": "fn()"
            },
            "remove": {
                "!type": "fn()"
            },
            "removeLabel": {
                "!type": "fn(name: string)"
            },
            "urls": {
                "!type": "fn() -> AdWordsApp.AdUrls"
            }
        },
        "AdWordsApp.AdBuilder": {
            "build": {
                "!type": "fn() -> AdWordsApp.AdOperation"
            },
            "withCustomParameters": {
                "!type": "fn(customParameters: object) -> AdWordsApp.AdBuilder"
            },
            "withDescription1": {
                "!type": "fn(description1: string) -> AdWordsApp.AdBuilder"
            },
            "withDescription2": {
                "!type": "fn(description2: string) -> AdWordsApp.AdBuilder"
            },
            "withDestinationUrl": {
                "!type": "fn(destinationUrl: string) -> AdWordsApp.AdBuilder"
            },
            "withDisplayUrl": {
                "!type": "fn(displayUrl: string) -> AdWordsApp.AdBuilder"
            },
            "withFinalUrl": {
                "!type": "fn(finalUrl: string) -> AdWordsApp.AdBuilder"
            },
            "withHeadline": {
                "!type": "fn(headline: string) -> AdWordsApp.AdBuilder"
            },
            "withMobileFinalUrl": {
                "!type": "fn(mobileFinalUrl: string) -> AdWordsApp.AdBuilder"
            },
            "withMobilePreferred": {
                "!type": "fn(isMobilePreferred: bool) -> AdWordsApp.AdBuilder"
            },
            "withTrackingTemplate": {
                "!type": "fn(trackingTemplate: string) -> AdWordsApp.AdBuilder"
            }
        },
        "AdWordsApp.AdCustomizerItem": {
            "clearTargetAdGroup": {
                "!type": "fn()"
            },
            "clearTargetCampaign": {
                "!type": "fn()"
            },
            "clearTargetKeyword": {
                "!type": "fn()"
            },
            "getAttributeValue": {
                "!type": "fn(name: string) -> object"
            },
            "getAttributeValues": {
                "!type": "fn() -> object"
            },
            "getEndDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getSchedules": {
                "!type": "fn() -> [AdWordsApp.ExtensionSchedule]"
            },
            "getStartDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getTargetAdGroupName": {
                "!type": "fn() -> string"
            },
            "getTargetCampaignName": {
                "!type": "fn() -> string"
            },
            "getTargetKeywordText": {
                "!type": "fn() -> string"
            },
            "isMobilePreferred": {
                "!type": "fn() -> bool"
            },
            "remove": {
                "!type": "fn()"
            },
            "setAttributeValue": {
                "!type": "fn(name: string, value: object)"
            },
            "setAttributeValues": {
                "!type": "fn(attributeValues: object)"
            },
            "setEndDate": {
                "!type": "fn(date: object)"
            },
            "setMobilePreferred": {
                "!type": "fn(isMobilePreferred: bool)"
            },
            "setSchedules": {
                "!type": "fn(schedules: [AdWordsApp.ExtensionSchedule])"
            },
            "setStartDate": {
                "!type": "fn(date: object)"
            },
            "setTargetAdGroup": {
                "!type": "fn(campaignName: string, adGroupName: string)"
            },
            "setTargetCampaign": {
                "!type": "fn(campaignName: string)"
            },
            "setTargetKeyword": {
                "!type": "fn(keyword: string)"
            }
        },
        "AdWordsApp.AdCustomizerItemBuilder": {
            "build": {
                "!type": "fn() -> AdWordsApp.AdCustomizerItemOperation"
            },
            "withAttributeValue": {
                "!type": "fn(name: string, value: object) -> AdWordsApp.AdCustomizerItemBuilder"
            },
            "withAttributeValues": {
                "!type": "fn(attributeValues: object) -> AdWordsApp.AdCustomizerItemBuilder"
            },
            "withEndDate": {
                "!type": "fn(date: object) -> AdWordsApp.AdCustomizerItemBuilder"
            },
            "withMobilePreferred": {
                "!type": "fn(isMobilePreferred: bool) -> AdWordsApp.AdCustomizerItemBuilder"
            },
            "withSchedules": {
                "!type": "fn(schedules: [AdWordsApp.ExtensionSchedule]) -> AdWordsApp.AdCustomizerItemBuilder"
            },
            "withStartDate": {
                "!type": "fn(date: object) -> AdWordsApp.AdCustomizerItemBuilder"
            },
            "withTargetAdGroup": {
                "!type": "fn(campaignName: string, adGroupName: string) -> AdWordsApp.AdCustomizerItemBuilder"
            },
            "withTargetCampaign": {
                "!type": "fn(campaignName: string) -> AdWordsApp.AdCustomizerItemBuilder"
            },
            "withTargetKeyword": {
                "!type": "fn(keyword: string) -> AdWordsApp.AdCustomizerItemBuilder"
            }
        },
        "AdWordsApp.AdCustomizerItemIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.AdCustomizerItem"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.AdCustomizerItemOperation": {
            "getErrors": {
                "!type": "fn() -> [string]"
            },
            "getResult": {
                "!type": "fn() -> AdWordsApp.AdCustomizerItem"
            },
            "isSuccessful": {
                "!type": "fn() -> bool"
            }
        },
        "AdWordsApp.AdCustomizerItemSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.AdCustomizerItemSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.AdCustomizerItemSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.AdCustomizerItemIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.AdCustomizerItemSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.AdCustomizerItemSelector"
            },
            "withIds": {
                "!type": "fn(ids: [number]) -> AdWordsApp.AdCustomizerItemSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.AdCustomizerItemSelector"
            }
        },
        "AdWordsApp.AdCustomizerSource": {
            "adCustomizerItemBuilder": {
                "!type": "fn() -> AdWordsApp.AdCustomizerItemBuilder"
            },
            "getAttributes": {
                "!type": "fn() -> object"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getName": {
                "!type": "fn() -> string"
            },
            "items": {
                "!type": "fn() -> AdWordsApp.AdCustomizerItemSelector"
            }
        },
        "AdWordsApp.AdCustomizerSourceBuilder": {
            "addAttribute": {
                "!type": "fn(name: string, type: string) -> AdWordsApp.AdCustomizerSourceBuilder"
            },
            "addAttributes": {
                "!type": "fn(attributes: object) -> AdWordsApp.AdCustomizerSourceBuilder"
            },
            "build": {
                "!type": "fn() -> AdWordsApp.AdCustomizerSourceOperation"
            },
            "withName": {
                "!type": "fn(name: string) -> AdWordsApp.AdCustomizerSourceBuilder"
            }
        },
        "AdWordsApp.AdCustomizerSourceIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.AdCustomizerSource"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.AdCustomizerSourceOperation": {
            "getErrors": {
                "!type": "fn() -> [string]"
            },
            "getResult": {
                "!type": "fn() -> AdWordsApp.AdCustomizerSource"
            },
            "isSuccessful": {
                "!type": "fn() -> bool"
            }
        },
        "AdWordsApp.AdCustomizerSourceSelector": {
            "get": {
                "!type": "fn() -> AdWordsApp.AdCustomizerSourceIterator"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.AdCustomizerSourceSelector"
            }
        },
        "AdWordsApp.AdGroup": {
            "adParams": {
                "!type": "fn() -> AdWordsApp.AdParamSelector"
            },
            "addCallout": {
                "!type": "fn(calloutExtension: Callout) -> AdWordsApp.CalloutOperation"
            },
            "addMobileApp": {
                "!type": "fn(mobileAppExtension: MobileApp) -> AdWordsApp.MobileAppOperation"
            },
            "addPhoneNumber": {
                "!type": "fn(phoneNumberExtension: PhoneNumber) -> AdWordsApp.PhoneNumberOperation"
            },
            "addReview": {
                "!type": "fn(reviewExtension: Review) -> AdWordsApp.ReviewOperation"
            },
            "addSitelink": {
                "!type": "fn(sitelinkExtension: Sitelink) -> AdWordsApp.SitelinkOperation"
            },
            "ads": {
                "!type": "fn() -> AdWordsApp.AdSelector"
            },
            "applyLabel": {
                "!type": "fn(name: string)"
            },
            "bidding": {
                "!type": "fn() -> AdWordsApp.AdGroupBidding"
            },
            "clearMobileBidModifier": {
                "!type": "fn()"
            },
            "createNegativeKeyword": {
                "!type": "fn(keywordText: string)"
            },
            "display": {
                "!type": "fn() -> AdWordsApp.AdGroupDisplay"
            },
            "enable": {
                "!type": "fn()"
            },
            "extensions": {
                "!type": "fn() -> AdWordsApp.AdGroupExtensions"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.Campaign"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getMobileBidModifier": {
                "!type": "fn() -> number"
            },
            "getName": {
                "!type": "fn() -> string"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "isEnabled": {
                "!type": "fn() -> bool"
            },
            "isPaused": {
                "!type": "fn() -> bool"
            },
            "isRemoved": {
                "!type": "fn() -> bool"
            },
            "keywords": {
                "!type": "fn() -> AdWordsApp.KeywordSelector"
            },
            "labels": {
                "!type": "fn() -> AdWordsApp.LabelSelector"
            },
            "negativeKeywords": {
                "!type": "fn() -> AdWordsApp.NegativeKeywordSelector"
            },
            "newKeywordBuilder": {
                "!type": "fn() -> AdWordsApp.KeywordBuilder"
            },
            "newTextAdBuilder": {
                "!type": "fn() -> AdWordsApp.AdBuilder"
            },
            "pause": {
                "!type": "fn()"
            },
            "removeCallout": {
                "!type": "fn(calloutExtension: Callout)"
            },
            "removeLabel": {
                "!type": "fn(name: string)"
            },
            "removeMobileApp": {
                "!type": "fn(mobileAppExtension: MobileApp)"
            },
            "removePhoneNumber": {
                "!type": "fn(phoneNumberExtension: PhoneNumber)"
            },
            "removeReview": {
                "!type": "fn(reviewExtension: Review)"
            },
            "removeSitelink": {
                "!type": "fn(sitelinkExtension: Sitelink)"
            },
            "setMobileBidModifier": {
                "!type": "fn(modifier: number)"
            },
            "setName": {
                "!type": "fn(name: string)"
            },
            "urls": {
                "!type": "fn() -> AdWordsApp.AdGroupUrls"
            }
        },
        "AdWordsApp.AdGroupBidding": {
            "clearStrategy": {
                "!type": "fn()"
            },
            "getCpa": {
                "!type": "fn() -> number"
            },
            "getCpc": {
                "!type": "fn() -> number"
            },
            "getCpm": {
                "!type": "fn() -> number"
            },
            "getStrategy": {
                "!type": "fn() -> AdWordsApp.BiddingStrategy"
            },
            "getStrategySource": {
                "!type": "fn() -> string"
            },
            "getStrategyType": {
                "!type": "fn() -> string"
            },
            "setCpa": {
                "!type": "fn(cpa: number)"
            },
            "setCpc": {
                "!type": "fn(cpc: number)"
            },
            "setCpm": {
                "!type": "fn(cpm: number)"
            },
            "setStrategy": {
                "!type": "fn(biddingStrategy: BiddingStrategy)"
            },
            "setStrategy ": {
                "!type": "fn(biddingStrategy: string)"
            }
        },
        "AdWordsApp.AdGroupBuilder": {
            "build": {
                "!type": "fn() -> AdWordsApp.AdGroupOperation"
            },
            "withBiddingStrategy": {
                "!type": "fn(biddingStrategy: BiddingStrategy) -> AdWordsApp.AdGroupBuilder"
            },
            "withBiddingStrategy ": {
                "!type": "fn(biddingStrategy: string) -> AdWordsApp.AdGroupBuilder"
            },
            "withCpa": {
                "!type": "fn(cpa: number) -> AdWordsApp.AdGroupBuilder"
            },
            "withCpc": {
                "!type": "fn(cpc: number) -> AdWordsApp.AdGroupBuilder"
            },
            "withCpm": {
                "!type": "fn(cpm: number) -> AdWordsApp.AdGroupBuilder"
            },
            "withCustomParameters": {
                "!type": "fn(customParameters: object) -> AdWordsApp.AdGroupBuilder"
            },
            "withName": {
                "!type": "fn(name: string) -> AdWordsApp.AdGroupBuilder"
            },
            "withStatus": {
                "!type": "fn(status: string) -> AdWordsApp.AdGroupBuilder"
            },
            "withTrackingTemplate": {
                "!type": "fn(trackingTemplate: string) -> AdWordsApp.AdGroupBuilder"
            }
        },
        "AdWordsApp.AdGroupCallout": {
            "getAdGroup": {
                "!type": "fn() -> AdWordsApp.AdGroup"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.Campaign"
            },
            "getEndDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getSchedules": {
                "!type": "fn() -> [AdWordsApp.ExtensionSchedule]"
            },
            "getStartDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "getText": {
                "!type": "fn() -> string"
            },
            "isMobilePreferred": {
                "!type": "fn() -> bool"
            },
            "setEndDate": {
                "!type": "fn(date: object)"
            },
            "setMobilePreferred": {
                "!type": "fn(isMobilePreferred: bool)"
            },
            "setSchedules": {
                "!type": "fn(schedules: [AdWordsApp.ExtensionSchedule])"
            },
            "setStartDate": {
                "!type": "fn(date: object)"
            },
            "setText": {
                "!type": "fn(text: string)"
            }
        },
        "AdWordsApp.AdGroupCalloutIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.AdGroupCallout"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.AdGroupCalloutSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.AdGroupCalloutSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.AdGroupCalloutSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.AdGroupCalloutIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.AdGroupCalloutSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.AdGroupCalloutSelector"
            },
            "withIds": {
                "!type": "fn(ids: [number]) -> AdWordsApp.AdGroupCalloutSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.AdGroupCalloutSelector"
            }
        },
        "AdWordsApp.AdGroupDisplay": {
            "audiences": {
                "!type": "fn() -> AdWordsApp.AudienceSelector"
            },
            "excludedAudiences": {
                "!type": "fn() -> AdWordsApp.ExcludedAudienceSelector"
            },
            "excludedKeywords": {
                "!type": "fn() -> AdWordsApp.ExcludedDisplayKeywordSelector"
            },
            "excludedPlacements": {
                "!type": "fn() -> AdWordsApp.ExcludedPlacementSelector"
            },
            "excludedTopics": {
                "!type": "fn() -> AdWordsApp.ExcludedTopicSelector"
            },
            "keywords": {
                "!type": "fn() -> AdWordsApp.DisplayKeywordSelector"
            },
            "newAudienceBuilder": {
                "!type": "fn() -> AdWordsApp.AudienceBuilder"
            },
            "newKeywordBuilder": {
                "!type": "fn() -> AdWordsApp.DisplayKeywordBuilder"
            },
            "newPlacementBuilder": {
                "!type": "fn() -> AdWordsApp.PlacementBuilder"
            },
            "newTopicBuilder": {
                "!type": "fn() -> AdWordsApp.TopicBuilder"
            },
            "placements": {
                "!type": "fn() -> AdWordsApp.PlacementSelector"
            },
            "topics": {
                "!type": "fn() -> AdWordsApp.TopicSelector"
            }
        },
        "AdWordsApp.AdGroupExtensions": {
            "callouts": {
                "!type": "fn() -> AdWordsApp.AdGroupCalloutSelector"
            },
            "mobileApps": {
                "!type": "fn() -> AdWordsApp.AdGroupMobileAppSelector"
            },
            "phoneNumbers": {
                "!type": "fn() -> AdWordsApp.AdGroupPhoneNumberSelector"
            },
            "reviews": {
                "!type": "fn() -> AdWordsApp.AdGroupReviewSelector"
            },
            "sitelinks": {
                "!type": "fn() -> AdWordsApp.AdGroupSitelinkSelector"
            }
        },
        "AdWordsApp.AdGroupIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.AdGroup"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.AdGroupMobileApp": {
            "clearLinkUrl": {
                "!type": "fn()"
            },
            "getAdGroup": {
                "!type": "fn() -> AdWordsApp.AdGroup"
            },
            "getAppId": {
                "!type": "fn() -> string"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.Campaign"
            },
            "getEndDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getLinkText": {
                "!type": "fn() -> string"
            },
            "getLinkUrl": {
                "!type": "fn() -> string"
            },
            "getSchedules": {
                "!type": "fn() -> [AdWordsApp.ExtensionSchedule]"
            },
            "getStartDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "getStore": {
                "!type": "fn() -> string"
            },
            "isMobilePreferred": {
                "!type": "fn() -> bool"
            },
            "setAppId": {
                "!type": "fn(appId: string)"
            },
            "setEndDate": {
                "!type": "fn(date: object)"
            },
            "setLinkText": {
                "!type": "fn(linkText: string)"
            },
            "setLinkUrl": {
                "!type": "fn(linkUrl: string)"
            },
            "setMobilePreferred": {
                "!type": "fn(isMobilePreferred: bool)"
            },
            "setSchedules": {
                "!type": "fn(schedules: [AdWordsApp.ExtensionSchedule])"
            },
            "setStartDate": {
                "!type": "fn(date: object)"
            },
            "setStore": {
                "!type": "fn(store: string)"
            },
            "urls": {
                "!type": "fn() -> AdWordsApp.MobileAppUrls"
            }
        },
        "AdWordsApp.AdGroupMobileAppIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.AdGroupMobileApp"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.AdGroupMobileAppSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.AdGroupMobileAppSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.AdGroupMobileAppSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.AdGroupMobileAppIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.AdGroupMobileAppSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.AdGroupMobileAppSelector"
            },
            "withIds": {
                "!type": "fn(ids: [number]) -> AdWordsApp.AdGroupMobileAppSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.AdGroupMobileAppSelector"
            }
        },
        "AdWordsApp.AdGroupOperation": {
            "getErrors": {
                "!type": "fn() -> [string]"
            },
            "getResult": {
                "!type": "fn() -> AdWordsApp.AdGroup"
            },
            "isSuccessful": {
                "!type": "fn() -> bool"
            }
        },
        "AdWordsApp.AdGroupPhoneNumber": {
            "getAdGroup": {
                "!type": "fn() -> AdWordsApp.AdGroup"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.Campaign"
            },
            "getCountry": {
                "!type": "fn() -> string"
            },
            "getEndDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getPhoneNumber": {
                "!type": "fn() -> string"
            },
            "getSchedules": {
                "!type": "fn() -> [AdWordsApp.ExtensionSchedule]"
            },
            "getStartDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "isCallOnly": {
                "!type": "fn() -> bool"
            },
            "isMobilePreferred": {
                "!type": "fn() -> bool"
            },
            "setCallOnly": {
                "!type": "fn(callOnly: bool)"
            },
            "setCountry": {
                "!type": "fn(country: string)"
            },
            "setEndDate": {
                "!type": "fn(date: object)"
            },
            "setMobilePreferred": {
                "!type": "fn(isMobilePreferred: bool)"
            },
            "setPhoneNumber": {
                "!type": "fn(phoneNumber: string)"
            },
            "setSchedules": {
                "!type": "fn(schedules: [AdWordsApp.ExtensionSchedule])"
            },
            "setStartDate": {
                "!type": "fn(date: object)"
            }
        },
        "AdWordsApp.AdGroupPhoneNumberIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.AdGroupPhoneNumber"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.AdGroupPhoneNumberSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.AdGroupPhoneNumberSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.AdGroupPhoneNumberSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.AdGroupPhoneNumberIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.AdGroupPhoneNumberSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.AdGroupPhoneNumberSelector"
            },
            "withIds": {
                "!type": "fn(ids: [number]) -> AdWordsApp.AdGroupPhoneNumberSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.AdGroupPhoneNumberSelector"
            }
        },
        "AdWordsApp.AdGroupReview": {
            "getAdGroup": {
                "!type": "fn() -> AdWordsApp.AdGroup"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.Campaign"
            },
            "getEndDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getSchedules": {
                "!type": "fn() -> [AdWordsApp.ExtensionSchedule]"
            },
            "getSourceName": {
                "!type": "fn() -> string"
            },
            "getSourceUrl": {
                "!type": "fn() -> string"
            },
            "getStartDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "getText": {
                "!type": "fn() -> string"
            },
            "isExactlyQuoted": {
                "!type": "fn() -> bool"
            },
            "isMobilePreferred": {
                "!type": "fn() -> bool"
            },
            "setEndDate": {
                "!type": "fn(date: object)"
            },
            "setExactlyQuoted": {
                "!type": "fn(isExactlyQuoted: bool)"
            },
            "setMobilePreferred": {
                "!type": "fn(isMobilePreferred: bool)"
            },
            "setSchedules": {
                "!type": "fn(schedules: [AdWordsApp.ExtensionSchedule])"
            },
            "setSourceName": {
                "!type": "fn(sourceName: string)"
            },
            "setSourceUrl": {
                "!type": "fn(sourceUrl: string)"
            },
            "setStartDate": {
                "!type": "fn(date: object)"
            },
            "setText": {
                "!type": "fn(text: string)"
            }
        },
        "AdWordsApp.AdGroupReviewIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.AdGroupReview"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.AdGroupReviewSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.AdGroupReviewSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.AdGroupReviewSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.AdGroupReviewIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.AdGroupReviewSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.AdGroupReviewSelector"
            },
            "withIds": {
                "!type": "fn(ids: [number]) -> AdWordsApp.AdGroupReviewSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.AdGroupReviewSelector"
            }
        },
        "AdWordsApp.AdGroupSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.AdGroupSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.AdGroupSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.AdGroupIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.AdGroupSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.AdGroupSelector"
            },
            "withIds": {
                "!type": "fn(ids: [number]) -> AdWordsApp.AdGroupSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.AdGroupSelector"
            }
        },
        "AdWordsApp.AdGroupSitelink": {
            "clearDescription1": {
                "!type": "fn()"
            },
            "clearDescription2": {
                "!type": "fn()"
            },
            "clearLinkUrl": {
                "!type": "fn()"
            },
            "getAdGroup": {
                "!type": "fn() -> AdWordsApp.AdGroup"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.Campaign"
            },
            "getDescription1": {
                "!type": "fn() -> string"
            },
            "getDescription2": {
                "!type": "fn() -> string"
            },
            "getEndDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getLinkText": {
                "!type": "fn() -> string"
            },
            "getLinkUrl": {
                "!type": "fn() -> string"
            },
            "getSchedules": {
                "!type": "fn() -> [AdWordsApp.ExtensionSchedule]"
            },
            "getStartDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "isMobilePreferred": {
                "!type": "fn() -> bool"
            },
            "setDescription1": {
                "!type": "fn(description1: string)"
            },
            "setDescription2": {
                "!type": "fn(description2: string)"
            },
            "setEndDate": {
                "!type": "fn(date: object)"
            },
            "setLinkText": {
                "!type": "fn(linkText: string)"
            },
            "setLinkUrl": {
                "!type": "fn(linkUrl: string)"
            },
            "setMobilePreferred": {
                "!type": "fn(isMobilePreferred: bool)"
            },
            "setSchedules": {
                "!type": "fn(schedules: [AdWordsApp.ExtensionSchedule])"
            },
            "setStartDate": {
                "!type": "fn(date: object)"
            },
            "urls": {
                "!type": "fn() -> AdWordsApp.SitelinkUrls"
            }
        },
        "AdWordsApp.AdGroupSitelinkIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.AdGroupSitelink"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.AdGroupSitelinkSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.AdGroupSitelinkSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.AdGroupSitelinkSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.AdGroupSitelinkIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.AdGroupSitelinkSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.AdGroupSitelinkSelector"
            },
            "withIds": {
                "!type": "fn(ids: [number]) -> AdWordsApp.AdGroupSitelinkSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.AdGroupSitelinkSelector"
            }
        },
        "AdWordsApp.AdGroupUrls": {
            "clearTrackingTemplate": {
                "!type": "fn()"
            },
            "getCustomParameters": {
                "!type": "fn() -> object"
            },
            "getTrackingTemplate": {
                "!type": "fn() -> string"
            },
            "setCustomParameters": {
                "!type": "fn(customParameters: object)"
            },
            "setTrackingTemplate": {
                "!type": "fn(trackingTemplate: string)"
            }
        },
        "AdWordsApp.AdIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.Ad"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.AdOperation": {
            "getErrors": {
                "!type": "fn() -> [string]"
            },
            "getResult": {
                "!type": "fn() -> AdWordsApp.Ad"
            },
            "isSuccessful": {
                "!type": "fn() -> bool"
            }
        },
        "AdWordsApp.AdParam": {
            "getAdGroup": {
                "!type": "fn() -> AdWordsApp.AdGroup"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getIndex": {
                "!type": "fn() -> number"
            },
            "getInsertionText": {
                "!type": "fn() -> string"
            },
            "getKeyword": {
                "!type": "fn() -> AdWordsApp.Keyword"
            },
            "remove": {
                "!type": "fn()"
            },
            "setInsertionText": {
                "!type": "fn(insertionText: string)"
            }
        },
        "AdWordsApp.AdParamIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.AdParam"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.AdParamSelector": {
            "get": {
                "!type": "fn() -> AdWordsApp.AdParamIterator"
            }
        },
        "AdWordsApp.AdSchedule": {
            "getBidModifier": {
                "!type": "fn() -> number"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.Campaign"
            },
            "getDayOfWeek": {
                "!type": "fn() -> string"
            },
            "getEndHour": {
                "!type": "fn() -> number"
            },
            "getEndMinute": {
                "!type": "fn() -> number"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getStartHour": {
                "!type": "fn() -> number"
            },
            "getStartMinute": {
                "!type": "fn() -> number"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "remove": {
                "!type": "fn()"
            },
            "setBidModifier": {
                "!type": "fn(modifier: number)"
            }
        },
        "AdWordsApp.AdScheduleIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.AdSchedule"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.AdScheduleSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.AdScheduleSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.AdScheduleSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.AdScheduleIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.AdScheduleSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.AdScheduleSelector"
            },
            "withIds": {
                "!type": "fn(ids: [[number]]) -> AdWordsApp.AdScheduleSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.AdScheduleSelector"
            }
        },
        "AdWordsApp.AdSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.AdSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.AdSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.AdIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.AdSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.AdSelector"
            },
            "withIds": {
                "!type": "fn(ids: [[number]]) -> AdWordsApp.AdSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.AdSelector"
            }
        },
        "AdWordsApp.AdUrls": {
            "getCustomParameters": {
                "!type": "fn() -> object"
            },
            "getFinalUrl": {
                "!type": "fn() -> string"
            },
            "getMobileFinalUrl": {
                "!type": "fn() -> string"
            },
            "getTrackingTemplate": {
                "!type": "fn() -> string"
            }
        },
        "AdWordsApp.AdWordsDate": {
            "day": {
                "!type": "number"
            },
            "month": {
                "!type": "number"
            },
            "year": {
                "!type": "number"
            }
        },
        "AdWordsApp.Address": {
            "getCityName": {
                "!type": "fn() -> string"
            },
            "getCountryCode": {
                "!type": "fn() -> string"
            },
            "getPostalCode": {
                "!type": "fn() -> string"
            },
            "getProvinceCode": {
                "!type": "fn() -> string"
            },
            "getProvinceName": {
                "!type": "fn() -> string"
            },
            "getStreetAddress": {
                "!type": "fn() -> string"
            },
            "getStreetAddress2": {
                "!type": "fn() -> string"
            }
        },
        "AdWordsApp.Audience": {
            "bidding": {
                "!type": "fn() -> AdWordsApp.AudienceBidding"
            },
            "getAdGroup": {
                "!type": "fn() -> AdWordsApp.AdGroup"
            },
            "getAudienceId": {
                "!type": "fn() -> number"
            },
            "getAudienceType": {
                "!type": "fn() -> string"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.Campaign"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "isEnabled": {
                "!type": "fn() -> bool"
            },
            "isPaused": {
                "!type": "fn() -> bool"
            },
            "remove": {
                "!type": "fn()"
            }
        },
        "AdWordsApp.AudienceBidding": {
            "clearCpc": {
                "!type": "fn()"
            },
            "clearCpm": {
                "!type": "fn()"
            },
            "getCpc": {
                "!type": "fn() -> number"
            },
            "getCpm": {
                "!type": "fn() -> number"
            },
            "getStrategy": {
                "!type": "fn() -> AdWordsApp.BiddingStrategy"
            },
            "getStrategySource": {
                "!type": "fn() -> string"
            },
            "getStrategyType": {
                "!type": "fn() -> string"
            },
            "setCpc": {
                "!type": "fn(cpc: number)"
            },
            "setCpm": {
                "!type": "fn(cpm: number)"
            }
        },
        "AdWordsApp.AudienceBuilder": {
            "build": {
                "!type": "fn() -> AdWordsApp.AudienceOperation"
            },
            "exclude": {
                "!type": "fn() -> AdWordsApp.ExcludedAudienceOperation"
            },
            "withAudienceId": {
                "!type": "fn(audienceId: number) -> AdWordsApp.AudienceBuilder"
            },
            "withAudienceType": {
                "!type": "fn(audienceType: string) -> AdWordsApp.AudienceBuilder"
            },
            "withCpc": {
                "!type": "fn(cpc: number) -> AdWordsApp.AudienceBuilder"
            },
            "withCpm": {
                "!type": "fn(cpm: number) -> AdWordsApp.AudienceBuilder"
            }
        },
        "AdWordsApp.AudienceIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.Audience"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.AudienceOperation": {
            "getErrors": {
                "!type": "fn() -> [string]"
            },
            "getResult": {
                "!type": "fn() -> AdWordsApp.Audience"
            },
            "isSuccessful": {
                "!type": "fn() -> bool"
            }
        },
        "AdWordsApp.AudienceSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.AudienceSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.AudienceSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.AudienceIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.AudienceSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.AudienceSelector"
            },
            "withIds": {
                "!type": "fn(ids: [[number]]) -> AdWordsApp.AudienceSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.AudienceSelector"
            }
        },
        "AdWordsApp.BiddingStrategy": {
            "adGroups": {
                "!type": "fn() -> AdWordsApp.AdGroupSelector"
            },
            "campaigns": {
                "!type": "fn() -> AdWordsApp.CampaignSelector"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getName": {
                "!type": "fn() -> string"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "getType": {
                "!type": "fn() -> string"
            },
            "keywords": {
                "!type": "fn() -> AdWordsApp.KeywordSelector"
            },
            "shoppingAdGroups": {
                "!type": "fn() -> AdWordsApp.ShoppingAdGroupSelector"
            },
            "shoppingCampaigns": {
                "!type": "fn() -> AdWordsApp.ShoppingCampaignSelector"
            }
        },
        "AdWordsApp.BiddingStrategyIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.BiddingStrategy"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.BiddingStrategySelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.BiddingStrategySelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.BiddingStrategySelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.BiddingStrategyIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.BiddingStrategySelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.BiddingStrategySelector"
            },
            "withIds": {
                "!type": "fn(ids: [number]) -> AdWordsApp.BiddingStrategySelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.BiddingStrategySelector"
            }
        },
        "AdWordsApp.Budget": {
            "campaigns": {
                "!type": "fn() -> AdWordsApp.CampaignSelector"
            },
            "getAmount": {
                "!type": "fn() -> number"
            },
            "getDeliveryMethod": {
                "!type": "fn() -> string"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getName": {
                "!type": "fn() -> string"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "isExplicitlyShared": {
                "!type": "fn() -> bool"
            },
            "setAmount": {
                "!type": "fn(amount: number)"
            }
        },
        "AdWordsApp.BudgetIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.Budget"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.BudgetSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.BudgetSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.BudgetSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.BudgetIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.BudgetSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.BudgetSelector"
            },
            "withIds": {
                "!type": "fn(ids: [number]) -> AdWordsApp.BudgetSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.BudgetSelector"
            }
        },
        "AdWordsApp.BulkUploads": {
            "newCsvUpload": {
                "!type": "fn(columnNames: [string], optArgs: object) -> AdWordsApp.CsvUpload"
            },
            "newFileUpload": {
                "!type": "fn(blob: Blob, optArgs: object) -> AdWordsApp.FileUpload"
            },
            "newFileUpload ": {
                "!type": "fn(file: File, optArgs: object) -> AdWordsApp.FileUpload"
            },
            "newFileUpload  ": {
                "!type": "fn(sheet: Sheet, optArgs: object) -> AdWordsApp.FileUpload"
            }
        },
        "AdWordsApp.Callout": {
            "getEndDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getSchedules": {
                "!type": "fn() -> [AdWordsApp.ExtensionSchedule]"
            },
            "getStartDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "getText": {
                "!type": "fn() -> string"
            },
            "isMobilePreferred": {
                "!type": "fn() -> bool"
            },
            "setEndDate": {
                "!type": "fn(date: object)"
            },
            "setMobilePreferred": {
                "!type": "fn(isMobilePreferred: bool)"
            },
            "setSchedules": {
                "!type": "fn(schedules: [AdWordsApp.ExtensionSchedule])"
            },
            "setStartDate": {
                "!type": "fn(date: object)"
            },
            "setText": {
                "!type": "fn(text: string)"
            }
        },
        "AdWordsApp.CalloutBuilder": {
            "build": {
                "!type": "fn() -> AdWordsApp.CalloutOperation"
            },
            "withEndDate": {
                "!type": "fn(date: object) -> AdWordsApp.CalloutBuilder"
            },
            "withMobilePreferred": {
                "!type": "fn(isMobilePreferred: bool) -> AdWordsApp.CalloutBuilder"
            },
            "withSchedules": {
                "!type": "fn(schedules: [AdWordsApp.ExtensionSchedule]) -> AdWordsApp.CalloutBuilder"
            },
            "withStartDate": {
                "!type": "fn(date: object) -> AdWordsApp.CalloutBuilder"
            },
            "withText": {
                "!type": "fn(text: string) -> AdWordsApp.CalloutBuilder"
            }
        },
        "AdWordsApp.CalloutIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.Callout"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.CalloutOperation": {
            "getErrors": {
                "!type": "fn() -> [string]"
            },
            "getResult": {
                "!type": "fn() -> AdWordsApp.Callout"
            },
            "isSuccessful": {
                "!type": "fn() -> bool"
            }
        },
        "AdWordsApp.CalloutSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.CalloutSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.CalloutSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.CalloutIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.CalloutSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.CalloutSelector"
            },
            "withIds": {
                "!type": "fn(ids: [number]) -> AdWordsApp.CalloutSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.CalloutSelector"
            }
        },
        "AdWordsApp.Campaign": {
            "adGroups": {
                "!type": "fn() -> AdWordsApp.AdGroupSelector"
            },
            "addAdSchedule": {
                "!type": "fn(adSchedule: object)"
            },
            "addAdSchedule ": {
                "!type": "fn(dayOfWeek: string, startHour: number, startMinute: number, endHour: number, endMinute: number, bidModifier: number)"
            },
            "addCallout": {
                "!type": "fn(calloutExtension: Callout) -> AdWordsApp.CalloutOperation"
            },
            "addExcludedPlacementList": {
                "!type": "fn(excludedPlacementList: ExcludedPlacementList)"
            },
            "addLocation": {
                "!type": "fn(locationId: number, bidModifier: number)"
            },
            "addLocation ": {
                "!type": "fn(location: object)"
            },
            "addMobileApp": {
                "!type": "fn(mobileAppExtension: MobileApp) -> AdWordsApp.MobileAppOperation"
            },
            "addNegativeKeywordList": {
                "!type": "fn(negativeKeywordList: NegativeKeywordList)"
            },
            "addPhoneNumber": {
                "!type": "fn(phoneNumberExtension: PhoneNumber) -> AdWordsApp.PhoneNumberOperation"
            },
            "addProximity": {
                "!type": "fn(latitude: number, longitude: number, radius: number, radiusUnits: string, optArgs: object)"
            },
            "addProximity ": {
                "!type": "fn(proximity: object)"
            },
            "addReview": {
                "!type": "fn(reviewExtension: Review) -> AdWordsApp.ReviewOperation"
            },
            "addSitelink": {
                "!type": "fn(sitelinkExtension: Sitelink) -> AdWordsApp.SitelinkOperation"
            },
            "ads": {
                "!type": "fn() -> AdWordsApp.AdSelector"
            },
            "applyLabel": {
                "!type": "fn(name: string)"
            },
            "bidding": {
                "!type": "fn() -> AdWordsApp.CampaignBidding"
            },
            "createNegativeKeyword": {
                "!type": "fn(keywordText: string)"
            },
            "display": {
                "!type": "fn() -> AdWordsApp.CampaignDisplay"
            },
            "enable": {
                "!type": "fn()"
            },
            "excludeLocation": {
                "!type": "fn(locationOrId: object)"
            },
            "excludedPlacementLists": {
                "!type": "fn() -> AdWordsApp.ExcludedPlacementListSelector"
            },
            "extensions": {
                "!type": "fn() -> AdWordsApp.CampaignExtensions"
            },
            "getAdRotationType": {
                "!type": "fn() -> string"
            },
            "getBiddingStrategyType": {
                "!type": "fn() -> string"
            },
            "getBudget": {
                "!type": "fn() -> AdWordsApp.Budget"
            },
            "getEndDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getName": {
                "!type": "fn() -> string"
            },
            "getStartDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "isEnabled": {
                "!type": "fn() -> bool"
            },
            "isPaused": {
                "!type": "fn() -> bool"
            },
            "isRemoved": {
                "!type": "fn() -> bool"
            },
            "keywords": {
                "!type": "fn() -> AdWordsApp.KeywordSelector"
            },
            "labels": {
                "!type": "fn() -> AdWordsApp.LabelSelector"
            },
            "negativeKeywordLists": {
                "!type": "fn() -> AdWordsApp.NegativeKeywordListSelector"
            },
            "negativeKeywords": {
                "!type": "fn() -> AdWordsApp.NegativeKeywordSelector"
            },
            "newAdGroupBuilder": {
                "!type": "fn() -> AdWordsApp.AdGroupBuilder"
            },
            "pause": {
                "!type": "fn()"
            },
            "removeCallout": {
                "!type": "fn(calloutExtension: Callout)"
            },
            "removeExcludedPlacementList": {
                "!type": "fn(excludedPlacementList: ExcludedPlacementList)"
            },
            "removeLabel": {
                "!type": "fn(name: string)"
            },
            "removeMobileApp": {
                "!type": "fn(mobileAppExtension: MobileApp)"
            },
            "removeNegativeKeywordList": {
                "!type": "fn(negativeKeywordList: NegativeKeywordList)"
            },
            "removePhoneNumber": {
                "!type": "fn(phoneNumberExtension: PhoneNumber)"
            },
            "removeReview": {
                "!type": "fn(reviewExtension: Review)"
            },
            "removeSitelink": {
                "!type": "fn(sitelinkExtension: Sitelink)"
            },
            "setAdRotationType": {
                "!type": "fn(adRotationType: string)"
            },
            "setEndDate": {
                "!type": "fn(date: object)"
            },
            "setName": {
                "!type": "fn(name: string)"
            },
            "setStartDate": {
                "!type": "fn(date: object)"
            },
            "targeting": {
                "!type": "fn() -> AdWordsApp.Targeting"
            },
            "urls": {
                "!type": "fn() -> AdWordsApp.CampaignUrls"
            }
        },
        "AdWordsApp.CampaignBidding": {
            "getStrategy": {
                "!type": "fn() -> AdWordsApp.BiddingStrategy"
            },
            "getStrategySource": {
                "!type": "fn() -> string"
            },
            "getStrategyType": {
                "!type": "fn() -> string"
            },
            "setStrategy": {
                "!type": "fn(biddingStrategy: BiddingStrategy)"
            },
            "setStrategy ": {
                "!type": "fn(biddingStrategy: string)"
            }
        },
        "AdWordsApp.CampaignCallout": {
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.Campaign"
            },
            "getEndDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getSchedules": {
                "!type": "fn() -> [AdWordsApp.ExtensionSchedule]"
            },
            "getStartDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "getText": {
                "!type": "fn() -> string"
            },
            "isMobilePreferred": {
                "!type": "fn() -> bool"
            },
            "setEndDate": {
                "!type": "fn(date: object)"
            },
            "setMobilePreferred": {
                "!type": "fn(isMobilePreferred: bool)"
            },
            "setSchedules": {
                "!type": "fn(schedules: [AdWordsApp.ExtensionSchedule])"
            },
            "setStartDate": {
                "!type": "fn(date: object)"
            },
            "setText": {
                "!type": "fn(text: string)"
            }
        },
        "AdWordsApp.CampaignCalloutIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.CampaignCallout"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.CampaignCalloutSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.CampaignCalloutSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.CampaignCalloutSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.CampaignCalloutIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.CampaignCalloutSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.CampaignCalloutSelector"
            },
            "withIds": {
                "!type": "fn(ids: [number]) -> AdWordsApp.CampaignCalloutSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.CampaignCalloutSelector"
            }
        },
        "AdWordsApp.CampaignDisplay": {
            "audiences": {
                "!type": "fn() -> AdWordsApp.AudienceSelector"
            },
            "excludedAudiences": {
                "!type": "fn() -> AdWordsApp.ExcludedAudienceSelector"
            },
            "excludedKeywords": {
                "!type": "fn() -> AdWordsApp.ExcludedDisplayKeywordSelector"
            },
            "excludedPlacements": {
                "!type": "fn() -> AdWordsApp.ExcludedPlacementSelector"
            },
            "excludedTopics": {
                "!type": "fn() -> AdWordsApp.ExcludedTopicSelector"
            },
            "keywords": {
                "!type": "fn() -> AdWordsApp.DisplayKeywordSelector"
            },
            "newAudienceBuilder": {
                "!type": "fn() -> AdWordsApp.AudienceBuilder"
            },
            "newKeywordBuilder": {
                "!type": "fn() -> AdWordsApp.DisplayKeywordBuilder"
            },
            "newPlacementBuilder": {
                "!type": "fn() -> AdWordsApp.PlacementBuilder"
            },
            "newTopicBuilder": {
                "!type": "fn() -> AdWordsApp.TopicBuilder"
            },
            "placements": {
                "!type": "fn() -> AdWordsApp.PlacementSelector"
            },
            "topics": {
                "!type": "fn() -> AdWordsApp.TopicSelector"
            }
        },
        "AdWordsApp.CampaignExtensions": {
            "callouts": {
                "!type": "fn() -> AdWordsApp.CampaignCalloutSelector"
            },
            "mobileApps": {
                "!type": "fn() -> AdWordsApp.CampaignMobileAppSelector"
            },
            "phoneNumbers": {
                "!type": "fn() -> AdWordsApp.CampaignPhoneNumberSelector"
            },
            "reviews": {
                "!type": "fn() -> AdWordsApp.CampaignReviewSelector"
            },
            "sitelinks": {
                "!type": "fn() -> AdWordsApp.CampaignSitelinkSelector"
            }
        },
        "AdWordsApp.CampaignIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.Campaign"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.CampaignMobileApp": {
            "clearLinkUrl": {
                "!type": "fn()"
            },
            "getAppId": {
                "!type": "fn() -> string"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.Campaign"
            },
            "getEndDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getLinkText": {
                "!type": "fn() -> string"
            },
            "getLinkUrl": {
                "!type": "fn() -> string"
            },
            "getSchedules": {
                "!type": "fn() -> [AdWordsApp.ExtensionSchedule]"
            },
            "getStartDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "getStore": {
                "!type": "fn() -> string"
            },
            "isMobilePreferred": {
                "!type": "fn() -> bool"
            },
            "setAppId": {
                "!type": "fn(appId: string)"
            },
            "setEndDate": {
                "!type": "fn(date: object)"
            },
            "setLinkText": {
                "!type": "fn(linkText: string)"
            },
            "setLinkUrl": {
                "!type": "fn(linkUrl: string)"
            },
            "setMobilePreferred": {
                "!type": "fn(isMobilePreferred: bool)"
            },
            "setSchedules": {
                "!type": "fn(schedules: [AdWordsApp.ExtensionSchedule])"
            },
            "setStartDate": {
                "!type": "fn(date: object)"
            },
            "setStore": {
                "!type": "fn(store: string)"
            },
            "urls": {
                "!type": "fn() -> AdWordsApp.MobileAppUrls"
            }
        },
        "AdWordsApp.CampaignMobileAppIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.CampaignMobileApp"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.CampaignMobileAppSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.CampaignMobileAppSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.CampaignMobileAppSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.CampaignMobileAppIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.CampaignMobileAppSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.CampaignMobileAppSelector"
            },
            "withIds": {
                "!type": "fn(ids: [number]) -> AdWordsApp.CampaignMobileAppSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.CampaignMobileAppSelector"
            }
        },
        "AdWordsApp.CampaignPhoneNumber": {
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.Campaign"
            },
            "getCountry": {
                "!type": "fn() -> string"
            },
            "getEndDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getPhoneNumber": {
                "!type": "fn() -> string"
            },
            "getSchedules": {
                "!type": "fn() -> [AdWordsApp.ExtensionSchedule]"
            },
            "getStartDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "isCallOnly": {
                "!type": "fn() -> bool"
            },
            "isMobilePreferred": {
                "!type": "fn() -> bool"
            },
            "setCallOnly": {
                "!type": "fn(callOnly: bool)"
            },
            "setCountry": {
                "!type": "fn(country: string)"
            },
            "setEndDate": {
                "!type": "fn(date: object)"
            },
            "setMobilePreferred": {
                "!type": "fn(isMobilePreferred: bool)"
            },
            "setPhoneNumber": {
                "!type": "fn(phoneNumber: string)"
            },
            "setSchedules": {
                "!type": "fn(schedules: [AdWordsApp.ExtensionSchedule])"
            },
            "setStartDate": {
                "!type": "fn(date: object)"
            }
        },
        "AdWordsApp.CampaignPhoneNumberIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.CampaignPhoneNumber"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.CampaignPhoneNumberSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.CampaignPhoneNumberSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.CampaignPhoneNumberSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.CampaignPhoneNumberIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.CampaignPhoneNumberSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.CampaignPhoneNumberSelector"
            },
            "withIds": {
                "!type": "fn(ids: [number]) -> AdWordsApp.CampaignPhoneNumberSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.CampaignPhoneNumberSelector"
            }
        },
        "AdWordsApp.CampaignReview": {
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.Campaign"
            },
            "getEndDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getSchedules": {
                "!type": "fn() -> [AdWordsApp.ExtensionSchedule]"
            },
            "getSourceName": {
                "!type": "fn() -> string"
            },
            "getSourceUrl": {
                "!type": "fn() -> string"
            },
            "getStartDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "getText": {
                "!type": "fn() -> string"
            },
            "isExactlyQuoted": {
                "!type": "fn() -> bool"
            },
            "isMobilePreferred": {
                "!type": "fn() -> bool"
            },
            "setEndDate": {
                "!type": "fn(date: object)"
            },
            "setExactlyQuoted": {
                "!type": "fn(isExactlyQuoted: bool)"
            },
            "setMobilePreferred": {
                "!type": "fn(isMobilePreferred: bool)"
            },
            "setSchedules": {
                "!type": "fn(schedules: [AdWordsApp.ExtensionSchedule])"
            },
            "setSourceName": {
                "!type": "fn(sourceName: string)"
            },
            "setSourceUrl": {
                "!type": "fn(sourceUrl: string)"
            },
            "setStartDate": {
                "!type": "fn(date: object)"
            },
            "setText": {
                "!type": "fn(text: string)"
            }
        },
        "AdWordsApp.CampaignReviewIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.CampaignReview"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.CampaignReviewSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.CampaignReviewSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.CampaignReviewSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.CampaignReviewIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.CampaignReviewSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.CampaignReviewSelector"
            },
            "withIds": {
                "!type": "fn(ids: [number]) -> AdWordsApp.CampaignReviewSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.CampaignReviewSelector"
            }
        },
        "AdWordsApp.CampaignSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.CampaignSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.CampaignSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.CampaignIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.CampaignSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.CampaignSelector"
            },
            "withIds": {
                "!type": "fn(ids: [number]) -> AdWordsApp.CampaignSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.CampaignSelector"
            }
        },
        "AdWordsApp.CampaignSitelink": {
            "clearDescription1": {
                "!type": "fn()"
            },
            "clearDescription2": {
                "!type": "fn()"
            },
            "clearLinkUrl": {
                "!type": "fn()"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.Campaign"
            },
            "getDescription1": {
                "!type": "fn() -> string"
            },
            "getDescription2": {
                "!type": "fn() -> string"
            },
            "getEndDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getLinkText": {
                "!type": "fn() -> string"
            },
            "getLinkUrl": {
                "!type": "fn() -> string"
            },
            "getSchedules": {
                "!type": "fn() -> [AdWordsApp.ExtensionSchedule]"
            },
            "getStartDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "isMobilePreferred": {
                "!type": "fn() -> bool"
            },
            "setDescription1": {
                "!type": "fn(description1: string)"
            },
            "setDescription2": {
                "!type": "fn(description2: string)"
            },
            "setEndDate": {
                "!type": "fn(date: object)"
            },
            "setLinkText": {
                "!type": "fn(linkText: string)"
            },
            "setLinkUrl": {
                "!type": "fn(linkUrl: string)"
            },
            "setMobilePreferred": {
                "!type": "fn(isMobilePreferred: bool)"
            },
            "setSchedules": {
                "!type": "fn(schedules: [AdWordsApp.ExtensionSchedule])"
            },
            "setStartDate": {
                "!type": "fn(date: object)"
            },
            "urls": {
                "!type": "fn() -> AdWordsApp.SitelinkUrls"
            }
        },
        "AdWordsApp.CampaignSitelinkIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.CampaignSitelink"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.CampaignSitelinkSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.CampaignSitelinkSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.CampaignSitelinkSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.CampaignSitelinkIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.CampaignSitelinkSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.CampaignSitelinkSelector"
            },
            "withIds": {
                "!type": "fn(ids: [number]) -> AdWordsApp.CampaignSitelinkSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.CampaignSitelinkSelector"
            }
        },
        "AdWordsApp.CampaignUrls": {
            "clearTrackingTemplate": {
                "!type": "fn()"
            },
            "getCustomParameters": {
                "!type": "fn() -> object"
            },
            "getTrackingTemplate": {
                "!type": "fn() -> string"
            },
            "setCustomParameters": {
                "!type": "fn(customParameters: object)"
            },
            "setTrackingTemplate": {
                "!type": "fn(trackingTemplate: string)"
            }
        },
        "AdWordsApp.CsvUpload": {
            "append": {
                "!type": "fn(row: object) -> AdWordsApp.CsvUpload"
            },
            "apply": {
                "!type": "fn()"
            },
            "forCampaignManagement": {
                "!type": "fn() -> AdWordsApp.CsvUpload"
            },
            "forOfflineConversions": {
                "!type": "fn() -> AdWordsApp.CsvUpload"
            },
            "preview": {
                "!type": "fn()"
            },
            "setFileName": {
                "!type": "fn(fileName: string) -> AdWordsApp.CsvUpload"
            }
        },
        "AdWordsApp.Display": {
            "audiences": {
                "!type": "fn() -> AdWordsApp.AudienceSelector"
            },
            "keywords": {
                "!type": "fn() -> AdWordsApp.DisplayKeywordSelector"
            },
            "placements": {
                "!type": "fn() -> AdWordsApp.PlacementSelector"
            },
            "topics": {
                "!type": "fn() -> AdWordsApp.TopicSelector"
            }
        },
        "AdWordsApp.DisplayKeyword": {
            "bidding": {
                "!type": "fn() -> AdWordsApp.DisplayKeywordBidding"
            },
            "getAdGroup": {
                "!type": "fn() -> AdWordsApp.AdGroup"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.Campaign"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "getText": {
                "!type": "fn() -> string"
            },
            "isEnabled": {
                "!type": "fn() -> bool"
            },
            "isPaused": {
                "!type": "fn() -> bool"
            },
            "remove": {
                "!type": "fn()"
            }
        },
        "AdWordsApp.DisplayKeywordBidding": {
            "clearCpc": {
                "!type": "fn()"
            },
            "clearCpm": {
                "!type": "fn()"
            },
            "clearStrategy": {
                "!type": "fn()"
            },
            "getCpc": {
                "!type": "fn() -> number"
            },
            "getCpm": {
                "!type": "fn() -> number"
            },
            "getStrategy": {
                "!type": "fn() -> AdWordsApp.BiddingStrategy"
            },
            "getStrategySource": {
                "!type": "fn() -> string"
            },
            "getStrategyType": {
                "!type": "fn() -> string"
            },
            "setCpc": {
                "!type": "fn(cpc: number)"
            },
            "setCpm": {
                "!type": "fn(cpm: number)"
            },
            "setStrategy": {
                "!type": "fn(biddingStrategy: BiddingStrategy)"
            },
            "setStrategy ": {
                "!type": "fn(biddingStrategy: string)"
            }
        },
        "AdWordsApp.DisplayKeywordBuilder": {
            "build": {
                "!type": "fn() -> AdWordsApp.DisplayKeywordOperation"
            },
            "exclude": {
                "!type": "fn() -> AdWordsApp.ExcludedDisplayKeywordOperation"
            },
            "withCpc": {
                "!type": "fn(cpc: number) -> AdWordsApp.DisplayKeywordBuilder"
            },
            "withCpm": {
                "!type": "fn(cpm: number) -> AdWordsApp.DisplayKeywordBuilder"
            },
            "withText": {
                "!type": "fn(text: string) -> AdWordsApp.DisplayKeywordBuilder"
            }
        },
        "AdWordsApp.DisplayKeywordIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.DisplayKeyword"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.DisplayKeywordOperation": {
            "getErrors": {
                "!type": "fn() -> [string]"
            },
            "getResult": {
                "!type": "fn() -> AdWordsApp.DisplayKeyword"
            },
            "isSuccessful": {
                "!type": "fn() -> bool"
            }
        },
        "AdWordsApp.DisplayKeywordSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.DisplayKeywordSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.DisplayKeywordSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.DisplayKeywordIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.DisplayKeywordSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.DisplayKeywordSelector"
            },
            "withIds": {
                "!type": "fn(ids: [[number]]) -> AdWordsApp.DisplayKeywordSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.DisplayKeywordSelector"
            }
        },
        "AdWordsApp.ExcludedAudience": {
            "getAdGroup": {
                "!type": "fn() -> AdWordsApp.AdGroup"
            },
            "getAudienceId": {
                "!type": "fn() -> number"
            },
            "getAudienceType": {
                "!type": "fn() -> string"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.Campaign"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "remove": {
                "!type": "fn()"
            }
        },
        "AdWordsApp.ExcludedAudienceIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.ExcludedAudience"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.ExcludedAudienceOperation": {
            "getErrors": {
                "!type": "fn() -> [string]"
            },
            "getResult": {
                "!type": "fn() -> AdWordsApp.ExcludedAudience"
            },
            "isSuccessful": {
                "!type": "fn() -> bool"
            }
        },
        "AdWordsApp.ExcludedAudienceSelector": {
            "get": {
                "!type": "fn() -> AdWordsApp.ExcludedAudienceIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.ExcludedAudienceSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.ExcludedAudienceSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.ExcludedAudienceSelector"
            }
        },
        "AdWordsApp.ExcludedDisplayKeyword": {
            "getAdGroup": {
                "!type": "fn() -> AdWordsApp.AdGroup"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.Campaign"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getText": {
                "!type": "fn() -> string"
            },
            "remove": {
                "!type": "fn()"
            }
        },
        "AdWordsApp.ExcludedDisplayKeywordIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.ExcludedDisplayKeyword"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.ExcludedDisplayKeywordOperation": {
            "getErrors": {
                "!type": "fn() -> [string]"
            },
            "getResult": {
                "!type": "fn() -> AdWordsApp.ExcludedDisplayKeyword"
            },
            "isSuccessful": {
                "!type": "fn() -> bool"
            }
        },
        "AdWordsApp.ExcludedDisplayKeywordSelector": {
            "get": {
                "!type": "fn() -> AdWordsApp.ExcludedDisplayKeywordIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.ExcludedDisplayKeywordSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.ExcludedDisplayKeywordSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.ExcludedDisplayKeywordSelector"
            }
        },
        "AdWordsApp.ExcludedLocation": {
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.Campaign"
            },
            "getCountryCode": {
                "!type": "fn() -> string"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getName": {
                "!type": "fn() -> string"
            },
            "getTargetType": {
                "!type": "fn() -> string"
            },
            "getTargetingStatus": {
                "!type": "fn() -> string"
            },
            "remove": {
                "!type": "fn()"
            }
        },
        "AdWordsApp.ExcludedLocationIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.ExcludedLocation"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.ExcludedLocationSelector": {
            "get": {
                "!type": "fn() -> AdWordsApp.ExcludedLocationIterator"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.ExcludedLocationSelector"
            }
        },
        "AdWordsApp.ExcludedPlacement": {
            "getAdGroup": {
                "!type": "fn() -> AdWordsApp.AdGroup"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.Campaign"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getUrl": {
                "!type": "fn() -> string"
            },
            "remove": {
                "!type": "fn()"
            }
        },
        "AdWordsApp.ExcludedPlacementIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.ExcludedPlacement"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.ExcludedPlacementList": {
            "addExcludedPlacement": {
                "!type": "fn(url: string)"
            },
            "addExcludedPlacements": {
                "!type": "fn(urls: [string])"
            },
            "campaigns": {
                "!type": "fn() -> AdWordsApp.CampaignSelector"
            },
            "excludedPlacements": {
                "!type": "fn() -> AdWordsApp.SharedExcludedPlacementSelector"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getName": {
                "!type": "fn() -> string"
            },
            "setName": {
                "!type": "fn(name: string)"
            }
        },
        "AdWordsApp.ExcludedPlacementListBuilder": {
            "build": {
                "!type": "fn() -> AdWordsApp.ExcludedPlacementListOperation"
            },
            "withName": {
                "!type": "fn(name: string) -> AdWordsApp.ExcludedPlacementListBuilder"
            }
        },
        "AdWordsApp.ExcludedPlacementListIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.ExcludedPlacementList"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.ExcludedPlacementListOperation": {
            "getErrors": {
                "!type": "fn() -> [string]"
            },
            "getResult": {
                "!type": "fn() -> AdWordsApp.ExcludedPlacementList"
            },
            "isSuccessful": {
                "!type": "fn() -> bool"
            }
        },
        "AdWordsApp.ExcludedPlacementListSelector": {
            "get": {
                "!type": "fn() -> AdWordsApp.ExcludedPlacementListIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.ExcludedPlacementListSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.ExcludedPlacementListSelector"
            },
            "withIds": {
                "!type": "fn(ids: [number]) -> AdWordsApp.ExcludedPlacementListSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.ExcludedPlacementListSelector"
            }
        },
        "AdWordsApp.ExcludedPlacementOperation": {
            "getErrors": {
                "!type": "fn() -> [string]"
            },
            "getResult": {
                "!type": "fn() -> AdWordsApp.ExcludedPlacement"
            },
            "isSuccessful": {
                "!type": "fn() -> bool"
            }
        },
        "AdWordsApp.ExcludedPlacementSelector": {
            "get": {
                "!type": "fn() -> AdWordsApp.ExcludedPlacementIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.ExcludedPlacementSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.ExcludedPlacementSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.ExcludedPlacementSelector"
            }
        },
        "AdWordsApp.ExcludedTopic": {
            "getAdGroup": {
                "!type": "fn() -> AdWordsApp.AdGroup"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.Campaign"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getTopicId": {
                "!type": "fn() -> number"
            },
            "remove": {
                "!type": "fn()"
            }
        },
        "AdWordsApp.ExcludedTopicIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.ExcludedTopic"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.ExcludedTopicOperation": {
            "getErrors": {
                "!type": "fn() -> [string]"
            },
            "getResult": {
                "!type": "fn() -> AdWordsApp.ExcludedTopic"
            },
            "isSuccessful": {
                "!type": "fn() -> bool"
            }
        },
        "AdWordsApp.ExcludedTopicSelector": {
            "get": {
                "!type": "fn() -> AdWordsApp.ExcludedTopicIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.ExcludedTopicSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.ExcludedTopicSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.ExcludedTopicSelector"
            }
        },
        "AdWordsApp.ExecutionInfo": {
            "getRemainingCreateQuota": {
                "!type": "fn() -> number"
            },
            "getRemainingGetQuota": {
                "!type": "fn() -> number"
            },
            "getRemainingTime": {
                "!type": "fn() -> number"
            },
            "isPreview": {
                "!type": "fn() -> bool"
            }
        },
        "AdWordsApp.ExtensionSchedule": {
            "getDayOfWeek": {
                "!type": "fn() -> string"
            },
            "getEndHour": {
                "!type": "fn() -> number"
            },
            "getEndMinute": {
                "!type": "fn() -> number"
            },
            "getStartHour": {
                "!type": "fn() -> number"
            },
            "getStartMinute": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.Extensions": {
            "callouts": {
                "!type": "fn() -> AdWordsApp.CalloutSelector"
            },
            "mobileApps": {
                "!type": "fn() -> AdWordsApp.MobileAppSelector"
            },
            "newCalloutBuilder": {
                "!type": "fn() -> AdWordsApp.CalloutBuilder"
            },
            "newMobileAppBuilder": {
                "!type": "fn() -> AdWordsApp.MobileAppBuilder"
            },
            "newPhoneNumberBuilder": {
                "!type": "fn() -> AdWordsApp.PhoneNumberBuilder"
            },
            "newReviewBuilder": {
                "!type": "fn() -> AdWordsApp.ReviewBuilder"
            },
            "newSitelinkBuilder": {
                "!type": "fn() -> AdWordsApp.SitelinkBuilder"
            },
            "phoneNumbers": {
                "!type": "fn() -> AdWordsApp.PhoneNumberSelector"
            },
            "reviews": {
                "!type": "fn() -> AdWordsApp.ReviewSelector"
            },
            "sitelinks": {
                "!type": "fn() -> AdWordsApp.SitelinkSelector"
            }
        },
        "AdWordsApp.FileUpload": {
            "apply": {
                "!type": "fn()"
            },
            "forCampaignManagement": {
                "!type": "fn() -> AdWordsApp.FileUpload"
            },
            "forOfflineConversions": {
                "!type": "fn() -> AdWordsApp.FileUpload"
            },
            "preview": {
                "!type": "fn()"
            },
            "setFileName": {
                "!type": "fn(fileName: string) -> AdWordsApp.FileUpload"
            }
        },
        "AdWordsApp.Keyword": {
            "adParams": {
                "!type": "fn() -> AdWordsApp.AdParamSelector"
            },
            "applyLabel": {
                "!type": "fn(name: string)"
            },
            "bidding": {
                "!type": "fn() -> AdWordsApp.KeywordBidding"
            },
            "clearDestinationUrl": {
                "!type": "fn()"
            },
            "enable": {
                "!type": "fn()"
            },
            "getAdGroup": {
                "!type": "fn() -> AdWordsApp.AdGroup"
            },
            "getApprovalStatus": {
                "!type": "fn() -> string"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.Campaign"
            },
            "getDestinationUrl": {
                "!type": "fn() -> string"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getFirstPageCpc": {
                "!type": "fn() -> number"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getMatchType": {
                "!type": "fn() -> string"
            },
            "getQualityScore": {
                "!type": "fn() -> number"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "getText": {
                "!type": "fn() -> string"
            },
            "getTopOfPageCpc": {
                "!type": "fn() -> number"
            },
            "isEnabled": {
                "!type": "fn() -> bool"
            },
            "isPaused": {
                "!type": "fn() -> bool"
            },
            "labels": {
                "!type": "fn() -> AdWordsApp.LabelSelector"
            },
            "pause": {
                "!type": "fn()"
            },
            "remove": {
                "!type": "fn()"
            },
            "removeLabel": {
                "!type": "fn(name: string)"
            },
            "setAdParam": {
                "!type": "fn(index: number, insertionText: string)"
            },
            "setDestinationUrl": {
                "!type": "fn(destinationUrl: string)"
            },
            "urls": {
                "!type": "fn() -> AdWordsApp.KeywordUrls"
            }
        },
        "AdWordsApp.KeywordBidding": {
            "clearCpc": {
                "!type": "fn()"
            },
            "clearCpm": {
                "!type": "fn()"
            },
            "clearStrategy": {
                "!type": "fn()"
            },
            "getCpc": {
                "!type": "fn() -> number"
            },
            "getCpm": {
                "!type": "fn() -> number"
            },
            "getStrategy": {
                "!type": "fn() -> AdWordsApp.BiddingStrategy"
            },
            "getStrategySource": {
                "!type": "fn() -> string"
            },
            "getStrategyType": {
                "!type": "fn() -> string"
            },
            "setCpc": {
                "!type": "fn(cpc: number)"
            },
            "setCpm": {
                "!type": "fn(cpm: number)"
            },
            "setStrategy": {
                "!type": "fn(biddingStrategy: BiddingStrategy)"
            },
            "setStrategy ": {
                "!type": "fn(biddingStrategy: string)"
            }
        },
        "AdWordsApp.KeywordBuilder": {
            "build": {
                "!type": "fn() -> AdWordsApp.KeywordOperation"
            },
            "withBiddingStrategy": {
                "!type": "fn(biddingStrategy: BiddingStrategy) -> AdWordsApp.KeywordBuilder"
            },
            "withBiddingStrategy ": {
                "!type": "fn(biddingStrategy: string) -> AdWordsApp.KeywordBuilder"
            },
            "withCpc": {
                "!type": "fn(cpc: number) -> AdWordsApp.KeywordBuilder"
            },
            "withCpm": {
                "!type": "fn(cpm: number) -> AdWordsApp.KeywordBuilder"
            },
            "withCustomParameters": {
                "!type": "fn(customParameters: object) -> AdWordsApp.KeywordBuilder"
            },
            "withDestinationUrl": {
                "!type": "fn(destinationUrl: string) -> AdWordsApp.KeywordBuilder"
            },
            "withFinalUrl": {
                "!type": "fn(finalUrl: string) -> AdWordsApp.KeywordBuilder"
            },
            "withMobileFinalUrl": {
                "!type": "fn(mobileFinalUrl: string) -> AdWordsApp.KeywordBuilder"
            },
            "withText": {
                "!type": "fn(text: string) -> AdWordsApp.KeywordBuilder"
            },
            "withTrackingTemplate": {
                "!type": "fn(trackingTemplate: string) -> AdWordsApp.KeywordBuilder"
            }
        },
        "AdWordsApp.KeywordIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.Keyword"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.KeywordOperation": {
            "getErrors": {
                "!type": "fn() -> [string]"
            },
            "getResult": {
                "!type": "fn() -> AdWordsApp.Keyword"
            },
            "isSuccessful": {
                "!type": "fn() -> bool"
            }
        },
        "AdWordsApp.KeywordSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.KeywordSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.KeywordSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.KeywordIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.KeywordSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.KeywordSelector"
            },
            "withIds": {
                "!type": "fn(ids: [[number]]) -> AdWordsApp.KeywordSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.KeywordSelector"
            }
        },
        "AdWordsApp.KeywordUrls": {
            "clearFinalUrl": {
                "!type": "fn()"
            },
            "clearMobileFinalUrl": {
                "!type": "fn()"
            },
            "clearTrackingTemplate": {
                "!type": "fn()"
            },
            "getCustomParameters": {
                "!type": "fn() -> object"
            },
            "getFinalUrl": {
                "!type": "fn() -> string"
            },
            "getMobileFinalUrl": {
                "!type": "fn() -> string"
            },
            "getTrackingTemplate": {
                "!type": "fn() -> string"
            },
            "setCustomParameters": {
                "!type": "fn(customParameters: object)"
            },
            "setFinalUrl": {
                "!type": "fn(finalUrl: string)"
            },
            "setMobileFinalUrl": {
                "!type": "fn(mobileFinalUrl: string)"
            },
            "setTrackingTemplate": {
                "!type": "fn(trackingTemplate: string)"
            }
        },
        "AdWordsApp.Label": {
            "adGroups": {
                "!type": "fn() -> AdWordsApp.AdGroupSelector"
            },
            "ads": {
                "!type": "fn() -> AdWordsApp.AdSelector"
            },
            "campaigns": {
                "!type": "fn() -> AdWordsApp.CampaignSelector"
            },
            "getColor": {
                "!type": "fn() -> string"
            },
            "getDescription": {
                "!type": "fn() -> string"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> string"
            },
            "getName": {
                "!type": "fn() -> string"
            },
            "keywords": {
                "!type": "fn() -> AdWordsApp.KeywordSelector"
            },
            "remove": {
                "!type": "fn()"
            },
            "setColor": {
                "!type": "fn(color: string)"
            },
            "setDescription": {
                "!type": "fn(description: string)"
            },
            "setName": {
                "!type": "fn(name: string)"
            }
        },
        "AdWordsApp.LabelIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.Label"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.LabelSelector": {
            "get": {
                "!type": "fn() -> AdWordsApp.LabelIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.LabelSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.LabelSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.LabelSelector"
            }
        },
        "AdWordsApp.MobileApp": {
            "clearLinkUrl": {
                "!type": "fn()"
            },
            "getAppId": {
                "!type": "fn() -> string"
            },
            "getEndDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getLinkText": {
                "!type": "fn() -> string"
            },
            "getLinkUrl": {
                "!type": "fn() -> string"
            },
            "getSchedules": {
                "!type": "fn() -> [AdWordsApp.ExtensionSchedule]"
            },
            "getStartDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "getStore": {
                "!type": "fn() -> string"
            },
            "isMobilePreferred": {
                "!type": "fn() -> bool"
            },
            "setAppId": {
                "!type": "fn(appId: string)"
            },
            "setEndDate": {
                "!type": "fn(date: object)"
            },
            "setLinkText": {
                "!type": "fn(linkText: string)"
            },
            "setLinkUrl": {
                "!type": "fn(linkUrl: string)"
            },
            "setMobilePreferred": {
                "!type": "fn(isMobilePreferred: bool)"
            },
            "setSchedules": {
                "!type": "fn(schedules: [AdWordsApp.ExtensionSchedule])"
            },
            "setStartDate": {
                "!type": "fn(date: object)"
            },
            "setStore": {
                "!type": "fn(store: string)"
            },
            "urls": {
                "!type": "fn() -> AdWordsApp.MobileAppUrls"
            }
        },
        "AdWordsApp.MobileAppBuilder": {
            "build": {
                "!type": "fn() -> AdWordsApp.MobileAppOperation"
            },
            "withAppId": {
                "!type": "fn(appId: string) -> AdWordsApp.MobileAppBuilder"
            },
            "withCustomParameters": {
                "!type": "fn(customParameters: object) -> AdWordsApp.MobileAppBuilder"
            },
            "withEndDate": {
                "!type": "fn(date: object) -> AdWordsApp.MobileAppBuilder"
            },
            "withFinalUrl": {
                "!type": "fn(finalUrl: string) -> AdWordsApp.MobileAppBuilder"
            },
            "withLinkText": {
                "!type": "fn(linkText: string) -> AdWordsApp.MobileAppBuilder"
            },
            "withLinkUrl": {
                "!type": "fn(linkUrl: string) -> AdWordsApp.MobileAppBuilder"
            },
            "withMobileFinalUrl": {
                "!type": "fn(mobileFinalUrl: string) -> AdWordsApp.MobileAppBuilder"
            },
            "withMobilePreferred": {
                "!type": "fn(isMobilePreferred: bool) -> AdWordsApp.MobileAppBuilder"
            },
            "withSchedules": {
                "!type": "fn(schedules: [AdWordsApp.ExtensionSchedule]) -> AdWordsApp.MobileAppBuilder"
            },
            "withStartDate": {
                "!type": "fn(date: object) -> AdWordsApp.MobileAppBuilder"
            },
            "withStore": {
                "!type": "fn(store: string) -> AdWordsApp.MobileAppBuilder"
            },
            "withTrackingTemplate": {
                "!type": "fn(trackingTemplate: string) -> AdWordsApp.MobileAppBuilder"
            }
        },
        "AdWordsApp.MobileAppIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.MobileApp"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.MobileAppOperation": {
            "getErrors": {
                "!type": "fn() -> [string]"
            },
            "getResult": {
                "!type": "fn() -> AdWordsApp.MobileApp"
            },
            "isSuccessful": {
                "!type": "fn() -> bool"
            }
        },
        "AdWordsApp.MobileAppSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.MobileAppSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.MobileAppSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.MobileAppIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.MobileAppSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.MobileAppSelector"
            },
            "withIds": {
                "!type": "fn(ids: [number]) -> AdWordsApp.MobileAppSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.MobileAppSelector"
            }
        },
        "AdWordsApp.MobileAppUrls": {
            "clearMobileFinalUrl": {
                "!type": "fn()"
            },
            "getCustomParameters": {
                "!type": "fn() -> object"
            },
            "getFinalUrl": {
                "!type": "fn() -> string"
            },
            "getMobileFinalUrl": {
                "!type": "fn() -> string"
            },
            "getTrackingTemplate": {
                "!type": "fn() -> string"
            },
            "setCustomParameters": {
                "!type": "fn(customParameters: object)"
            },
            "setFinalUrl": {
                "!type": "fn(finalUrl: string)"
            },
            "setMobileFinalUrl": {
                "!type": "fn(mobileFinalUrl: string)"
            },
            "setTrackingTemplate": {
                "!type": "fn(trackingTemplate: string)"
            }
        },
        "AdWordsApp.NegativeKeyword": {
            "getAdGroup": {
                "!type": "fn() -> AdWordsApp.AdGroup"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.Campaign"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getMatchType": {
                "!type": "fn() -> string"
            },
            "getText": {
                "!type": "fn() -> string"
            },
            "remove": {
                "!type": "fn()"
            }
        },
        "AdWordsApp.NegativeKeywordIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.NegativeKeyword"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.NegativeKeywordList": {
            "addNegativeKeyword": {
                "!type": "fn(keywordText: string)"
            },
            "addNegativeKeywords": {
                "!type": "fn(keywordTexts: [string])"
            },
            "campaigns": {
                "!type": "fn() -> AdWordsApp.CampaignSelector"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getName": {
                "!type": "fn() -> string"
            },
            "negativeKeywords": {
                "!type": "fn() -> AdWordsApp.SharedNegativeKeywordSelector"
            },
            "setName": {
                "!type": "fn(name: string)"
            }
        },
        "AdWordsApp.NegativeKeywordListBuilder": {
            "build": {
                "!type": "fn() -> AdWordsApp.NegativeKeywordListOperation"
            },
            "withName": {
                "!type": "fn(name: string) -> AdWordsApp.NegativeKeywordListBuilder"
            }
        },
        "AdWordsApp.NegativeKeywordListIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.NegativeKeywordList"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.NegativeKeywordListOperation": {
            "getErrors": {
                "!type": "fn() -> [string]"
            },
            "getResult": {
                "!type": "fn() -> AdWordsApp.NegativeKeywordList"
            },
            "isSuccessful": {
                "!type": "fn() -> bool"
            }
        },
        "AdWordsApp.NegativeKeywordListSelector": {
            "get": {
                "!type": "fn() -> AdWordsApp.NegativeKeywordListIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.NegativeKeywordListSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.NegativeKeywordListSelector"
            },
            "withIds": {
                "!type": "fn(ids: [number]) -> AdWordsApp.NegativeKeywordListSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.NegativeKeywordListSelector"
            }
        },
        "AdWordsApp.NegativeKeywordSelector": {
            "get": {
                "!type": "fn() -> AdWordsApp.NegativeKeywordIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.NegativeKeywordSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.NegativeKeywordSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.NegativeKeywordSelector"
            }
        },
        "AdWordsApp.PhoneNumber": {
            "getCountry": {
                "!type": "fn() -> string"
            },
            "getEndDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getPhoneNumber": {
                "!type": "fn() -> string"
            },
            "getSchedules": {
                "!type": "fn() -> [AdWordsApp.ExtensionSchedule]"
            },
            "getStartDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "isCallOnly": {
                "!type": "fn() -> bool"
            },
            "isMobilePreferred": {
                "!type": "fn() -> bool"
            },
            "setCallOnly": {
                "!type": "fn(callOnly: bool)"
            },
            "setCountry": {
                "!type": "fn(country: string)"
            },
            "setEndDate": {
                "!type": "fn(date: object)"
            },
            "setMobilePreferred": {
                "!type": "fn(isMobilePreferred: bool)"
            },
            "setPhoneNumber": {
                "!type": "fn(phoneNumber: string)"
            },
            "setSchedules": {
                "!type": "fn(schedules: [AdWordsApp.ExtensionSchedule])"
            },
            "setStartDate": {
                "!type": "fn(date: object)"
            }
        },
        "AdWordsApp.PhoneNumberBuilder": {
            "build": {
                "!type": "fn() -> AdWordsApp.PhoneNumberOperation"
            },
            "withCallOnly": {
                "!type": "fn(callOnly: bool) -> AdWordsApp.PhoneNumberBuilder"
            },
            "withCountry": {
                "!type": "fn(country: string) -> AdWordsApp.PhoneNumberBuilder"
            },
            "withEndDate": {
                "!type": "fn(date: object) -> AdWordsApp.PhoneNumberBuilder"
            },
            "withMobilePreferred": {
                "!type": "fn(isMobilePreferred: bool) -> AdWordsApp.PhoneNumberBuilder"
            },
            "withPhoneNumber": {
                "!type": "fn(phoneNumber: string) -> AdWordsApp.PhoneNumberBuilder"
            },
            "withSchedules": {
                "!type": "fn(schedules: [AdWordsApp.ExtensionSchedule]) -> AdWordsApp.PhoneNumberBuilder"
            },
            "withStartDate": {
                "!type": "fn(date: object) -> AdWordsApp.PhoneNumberBuilder"
            }
        },
        "AdWordsApp.PhoneNumberIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.PhoneNumber"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.PhoneNumberOperation": {
            "getErrors": {
                "!type": "fn() -> [string]"
            },
            "getResult": {
                "!type": "fn() -> AdWordsApp.PhoneNumber"
            },
            "isSuccessful": {
                "!type": "fn() -> bool"
            }
        },
        "AdWordsApp.PhoneNumberSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.PhoneNumberSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.PhoneNumberSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.PhoneNumberIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.PhoneNumberSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.PhoneNumberSelector"
            },
            "withIds": {
                "!type": "fn(ids: [number]) -> AdWordsApp.PhoneNumberSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.PhoneNumberSelector"
            }
        },
        "AdWordsApp.Placement": {
            "bidding": {
                "!type": "fn() -> AdWordsApp.PlacementBidding"
            },
            "getAdGroup": {
                "!type": "fn() -> AdWordsApp.AdGroup"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.Campaign"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "getUrl": {
                "!type": "fn() -> string"
            },
            "isEnabled": {
                "!type": "fn() -> bool"
            },
            "isManaged": {
                "!type": "fn() -> bool"
            },
            "isPaused": {
                "!type": "fn() -> bool"
            },
            "remove": {
                "!type": "fn()"
            }
        },
        "AdWordsApp.PlacementBidding": {
            "clearCpc": {
                "!type": "fn()"
            },
            "clearCpm": {
                "!type": "fn()"
            },
            "clearStrategy": {
                "!type": "fn()"
            },
            "getCpc": {
                "!type": "fn() -> number"
            },
            "getCpm": {
                "!type": "fn() -> number"
            },
            "getStrategy": {
                "!type": "fn() -> AdWordsApp.BiddingStrategy"
            },
            "getStrategySource": {
                "!type": "fn() -> string"
            },
            "getStrategyType": {
                "!type": "fn() -> string"
            },
            "setCpc": {
                "!type": "fn(cpc: number)"
            },
            "setCpm": {
                "!type": "fn(cpm: number)"
            },
            "setStrategy": {
                "!type": "fn(biddingStrategy: BiddingStrategy)"
            },
            "setStrategy ": {
                "!type": "fn(biddingStrategy: string)"
            }
        },
        "AdWordsApp.PlacementBuilder": {
            "build": {
                "!type": "fn() -> AdWordsApp.PlacementOperation"
            },
            "exclude": {
                "!type": "fn() -> AdWordsApp.ExcludedPlacementOperation"
            },
            "withCpc": {
                "!type": "fn(cpc: number) -> AdWordsApp.PlacementBuilder"
            },
            "withCpm": {
                "!type": "fn(cpm: number) -> AdWordsApp.PlacementBuilder"
            },
            "withUrl": {
                "!type": "fn(url: string) -> AdWordsApp.PlacementBuilder"
            }
        },
        "AdWordsApp.PlacementIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.Placement"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.PlacementOperation": {
            "getErrors": {
                "!type": "fn() -> [string]"
            },
            "getResult": {
                "!type": "fn() -> AdWordsApp.Placement"
            },
            "isSuccessful": {
                "!type": "fn() -> bool"
            }
        },
        "AdWordsApp.PlacementSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.PlacementSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.PlacementSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.PlacementIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.PlacementSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.PlacementSelector"
            },
            "withIds": {
                "!type": "fn(ids: [[number]]) -> AdWordsApp.PlacementSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.PlacementSelector"
            }
        },
        "AdWordsApp.Platform": {
            "getBidModifier": {
                "!type": "fn() -> number"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.Campaign"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getName": {
                "!type": "fn() -> string"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "setBidModifier": {
                "!type": "fn(modifier: number)"
            }
        },
        "AdWordsApp.PlatformIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.Platform"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.PlatformSelector": {
            "desktop": {
                "!type": "fn() -> AdWordsApp.PlatformSelector"
            },
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.PlatformSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.PlatformSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.PlatformIterator"
            },
            "mobile": {
                "!type": "fn() -> AdWordsApp.PlatformSelector"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.PlatformSelector"
            },
            "tablet": {
                "!type": "fn() -> AdWordsApp.PlatformSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.PlatformSelector"
            },
            "withIds": {
                "!type": "fn(ids: [[number]]) -> AdWordsApp.PlatformSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.PlatformSelector"
            }
        },
        "AdWordsApp.ProductAd": {
            "applyLabel": {
                "!type": "fn(name: string)"
            },
            "enable": {
                "!type": "fn()"
            },
            "getAdGroup": {
                "!type": "fn() -> AdWordsApp.ShoppingAdGroup"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.ShoppingCampaign"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getPromotionLine": {
                "!type": "fn() -> string"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "getType": {
                "!type": "fn() -> string"
            },
            "isEnabled": {
                "!type": "fn() -> bool"
            },
            "isMobilePreferred": {
                "!type": "fn() -> bool"
            },
            "isPaused": {
                "!type": "fn() -> bool"
            },
            "labels": {
                "!type": "fn() -> AdWordsApp.LabelSelector"
            },
            "pause": {
                "!type": "fn()"
            },
            "remove": {
                "!type": "fn()"
            },
            "removeLabel": {
                "!type": "fn(name: string)"
            }
        },
        "AdWordsApp.ProductAdBuilder": {
            "build": {
                "!type": "fn() -> AdWordsApp.ProductAdOperation"
            },
            "withMobilePreferred": {
                "!type": "fn(isMobilePreferred: bool) -> AdWordsApp.ProductAdBuilder"
            },
            "withPromotionLine": {
                "!type": "fn(promotionLine: string) -> AdWordsApp.ProductAdBuilder"
            }
        },
        "AdWordsApp.ProductAdIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.ProductAd"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.ProductAdOperation": {
            "getErrors": {
                "!type": "fn() -> [string]"
            },
            "getResult": {
                "!type": "fn() -> AdWordsApp.ProductAd"
            },
            "isSuccessful": {
                "!type": "fn() -> bool"
            }
        },
        "AdWordsApp.ProductAdSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.ProductAdSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.ProductAdSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.ProductAdIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.ProductAdSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.ProductAdSelector"
            },
            "withIds": {
                "!type": "fn(ids: [[number]]) -> AdWordsApp.ProductAdSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.ProductAdSelector"
            }
        },
        "AdWordsApp.ProductBrand": {
            "children": {
                "!type": "fn() -> AdWordsApp.ProductGroupSelector"
            },
            "exclude": {
                "!type": "fn()"
            },
            "getAdGroup": {
                "!type": "fn() -> AdWordsApp.ShoppingAdGroup"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.ShoppingCampaign"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getMaxCpc": {
                "!type": "fn() -> number"
            },
            "getName": {
                "!type": "fn() -> string"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "getValue": {
                "!type": "fn() -> string"
            },
            "include": {
                "!type": "fn()"
            },
            "isExcluded": {
                "!type": "fn() -> bool"
            },
            "isOtherCase": {
                "!type": "fn() -> bool"
            },
            "newChild": {
                "!type": "fn() -> AdWordsApp.ProductGroupBuilderSpace"
            },
            "parent": {
                "!type": "fn() -> AdWordsApp.ProductGroup"
            },
            "remove": {
                "!type": "fn()"
            },
            "removeAllChildren": {
                "!type": "fn()"
            },
            "setMaxCpc": {
                "!type": "fn(maxCpc: number)"
            }
        },
        "AdWordsApp.ProductBrandBuilder": {
            "build": {
                "!type": "fn() -> AdWordsApp.ProductBrandOperation"
            },
            "withBid": {
                "!type": "fn(bid: number) -> AdWordsApp.ProductBrandBuilder"
            },
            "withName": {
                "!type": "fn(productBrandName: string) -> AdWordsApp.ProductBrandBuilder"
            },
            "withValue": {
                "!type": "fn(value: string) -> AdWordsApp.ProductBrandBuilder"
            }
        },
        "AdWordsApp.ProductBrandOperation": {
            "getErrors": {
                "!type": "fn() -> [string]"
            },
            "getResult": {
                "!type": "fn() -> AdWordsApp.ProductBrand"
            },
            "isSuccessful": {
                "!type": "fn() -> bool"
            }
        },
        "AdWordsApp.ProductCategory": {
            "children": {
                "!type": "fn() -> AdWordsApp.ProductGroupSelector"
            },
            "exclude": {
                "!type": "fn()"
            },
            "getAdGroup": {
                "!type": "fn() -> AdWordsApp.ShoppingAdGroup"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.ShoppingCampaign"
            },
            "getCountry": {
                "!type": "fn() -> string"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getMaxCpc": {
                "!type": "fn() -> number"
            },
            "getName": {
                "!type": "fn() -> string"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "getValue": {
                "!type": "fn() -> string"
            },
            "hasChildren": {
                "!type": "fn() -> bool"
            },
            "include": {
                "!type": "fn()"
            },
            "isExcluded": {
                "!type": "fn() -> bool"
            },
            "isOtherCase": {
                "!type": "fn() -> bool"
            },
            "newChild": {
                "!type": "fn() -> AdWordsApp.ProductGroupBuilderSpace"
            },
            "parent": {
                "!type": "fn() -> AdWordsApp.ProductGroup"
            },
            "remove": {
                "!type": "fn()"
            },
            "removeAllChildren": {
                "!type": "fn()"
            },
            "setMaxCpc": {
                "!type": "fn(maxCpc: number)"
            }
        },
        "AdWordsApp.ProductCategoryBuilder": {
            "build": {
                "!type": "fn() -> AdWordsApp.ProductCategoryOperation"
            },
            "withBid": {
                "!type": "fn(bid: number) -> AdWordsApp.ProductCategoryBuilder"
            },
            "withName": {
                "!type": "fn(productCategoryName: string) -> AdWordsApp.ProductCategoryBuilder"
            },
            "withValue": {
                "!type": "fn(value: string) -> AdWordsApp.ProductCategoryBuilder"
            }
        },
        "AdWordsApp.ProductCategoryOperation": {
            "getErrors": {
                "!type": "fn() -> [string]"
            },
            "getResult": {
                "!type": "fn() -> AdWordsApp.ProductCategory"
            },
            "isSuccessful": {
                "!type": "fn() -> bool"
            }
        },
        "AdWordsApp.ProductChannel": {
            "children": {
                "!type": "fn() -> AdWordsApp.ProductGroupSelector"
            },
            "exclude": {
                "!type": "fn()"
            },
            "getAdGroup": {
                "!type": "fn() -> AdWordsApp.ShoppingAdGroup"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.ShoppingCampaign"
            },
            "getChannel": {
                "!type": "fn() -> string"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getMaxCpc": {
                "!type": "fn() -> number"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "getValue": {
                "!type": "fn() -> string"
            },
            "hasChildren": {
                "!type": "fn() -> bool"
            },
            "include": {
                "!type": "fn()"
            },
            "isExcluded": {
                "!type": "fn() -> bool"
            },
            "isOtherCase": {
                "!type": "fn() -> bool"
            },
            "newChild": {
                "!type": "fn() -> AdWordsApp.ProductGroupBuilderSpace"
            },
            "parent": {
                "!type": "fn() -> AdWordsApp.ProductGroup"
            },
            "remove": {
                "!type": "fn()"
            },
            "removeAllChildren": {
                "!type": "fn()"
            },
            "setMaxCpc": {
                "!type": "fn(maxCpc: number)"
            }
        },
        "AdWordsApp.ProductChannelBuilder": {
            "build": {
                "!type": "fn() -> AdWordsApp.ProductChannelOperation"
            },
            "withBid": {
                "!type": "fn(bid: number) -> AdWordsApp.ProductChannelBuilder"
            },
            "withChannel": {
                "!type": "fn(channel: string) -> AdWordsApp.ProductChannelBuilder"
            },
            "withValue": {
                "!type": "fn(value: string) -> AdWordsApp.ProductChannelBuilder"
            }
        },
        "AdWordsApp.ProductChannelExclusivity": {
            "children": {
                "!type": "fn() -> AdWordsApp.ProductGroupSelector"
            },
            "exclude": {
                "!type": "fn()"
            },
            "getAdGroup": {
                "!type": "fn() -> AdWordsApp.ShoppingAdGroup"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.ShoppingCampaign"
            },
            "getChannelExclusivity": {
                "!type": "fn() -> string"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getMaxCpc": {
                "!type": "fn() -> number"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "getValue": {
                "!type": "fn() -> string"
            },
            "hasChildren": {
                "!type": "fn() -> bool"
            },
            "include": {
                "!type": "fn()"
            },
            "isExcluded": {
                "!type": "fn() -> bool"
            },
            "isOtherCase": {
                "!type": "fn() -> bool"
            },
            "newChild": {
                "!type": "fn() -> AdWordsApp.ProductGroupBuilderSpace"
            },
            "parent": {
                "!type": "fn() -> AdWordsApp.ProductGroup"
            },
            "remove": {
                "!type": "fn()"
            },
            "removeAllChildren": {
                "!type": "fn()"
            },
            "setMaxCpc": {
                "!type": "fn(maxCpc: number)"
            }
        },
        "AdWordsApp.ProductChannelExclusivityBuilder": {
            "build": {
                "!type": "fn() -> AdWordsApp.ProductChannelExclusivityOperation"
            },
            "withBid": {
                "!type": "fn(bid: number) -> AdWordsApp.ProductChannelExclusivityBuilder"
            },
            "withChannelExclusivity": {
                "!type": "fn(channelExclusivity: string) -> AdWordsApp.ProductChannelExclusivityBuilder"
            },
            "withValue": {
                "!type": "fn(value: string) -> AdWordsApp.ProductChannelExclusivityBuilder"
            }
        },
        "AdWordsApp.ProductChannelExclusivityOperation": {
            "getErrors": {
                "!type": "fn() -> [string]"
            },
            "getResult": {
                "!type": "fn() -> AdWordsApp.ProductChannelExclusivity"
            },
            "isSuccessful": {
                "!type": "fn() -> bool"
            }
        },
        "AdWordsApp.ProductChannelOperation": {
            "getErrors": {
                "!type": "fn() -> [string]"
            },
            "getResult": {
                "!type": "fn() -> AdWordsApp.ProductChannel"
            },
            "isSuccessful": {
                "!type": "fn() -> bool"
            }
        },
        "AdWordsApp.ProductCondition": {
            "children": {
                "!type": "fn() -> AdWordsApp.ProductGroupSelector"
            },
            "exclude": {
                "!type": "fn()"
            },
            "getAdGroup": {
                "!type": "fn() -> AdWordsApp.ShoppingAdGroup"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.ShoppingCampaign"
            },
            "getCondition": {
                "!type": "fn() -> string"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getMaxCpc": {
                "!type": "fn() -> number"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "getValue": {
                "!type": "fn() -> string"
            },
            "hasChildren": {
                "!type": "fn() -> bool"
            },
            "include": {
                "!type": "fn()"
            },
            "isExcluded": {
                "!type": "fn() -> bool"
            },
            "isOtherCase": {
                "!type": "fn() -> bool"
            },
            "newChild": {
                "!type": "fn() -> AdWordsApp.ProductGroupBuilderSpace"
            },
            "parent": {
                "!type": "fn() -> AdWordsApp.ProductGroup"
            },
            "remove": {
                "!type": "fn()"
            },
            "removeAllChildren": {
                "!type": "fn()"
            },
            "setMaxCpc": {
                "!type": "fn(maxCpc: number)"
            }
        },
        "AdWordsApp.ProductConditionBuilder": {
            "build": {
                "!type": "fn() -> AdWordsApp.ProductConditionOperation"
            },
            "withBid": {
                "!type": "fn(bid: number) -> AdWordsApp.ProductConditionBuilder"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.ProductConditionBuilder"
            },
            "withValue": {
                "!type": "fn(value: string) -> AdWordsApp.ProductConditionBuilder"
            }
        },
        "AdWordsApp.ProductConditionOperation": {
            "getErrors": {
                "!type": "fn() -> [string]"
            },
            "getResult": {
                "!type": "fn() -> AdWordsApp.ProductCondition"
            },
            "isSuccessful": {
                "!type": "fn() -> bool"
            }
        },
        "AdWordsApp.ProductCustomLabel": {
            "children": {
                "!type": "fn() -> AdWordsApp.ProductGroupSelector"
            },
            "exclude": {
                "!type": "fn()"
            },
            "getAdGroup": {
                "!type": "fn() -> AdWordsApp.ShoppingAdGroup"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.ShoppingCampaign"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getMaxCpc": {
                "!type": "fn() -> number"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "getType": {
                "!type": "fn() -> string"
            },
            "getValue": {
                "!type": "fn() -> string"
            },
            "hasChildren": {
                "!type": "fn() -> bool"
            },
            "include": {
                "!type": "fn()"
            },
            "isExcluded": {
                "!type": "fn() -> bool"
            },
            "isOtherCase": {
                "!type": "fn() -> bool"
            },
            "newChild": {
                "!type": "fn() -> AdWordsApp.ProductGroupBuilderSpace"
            },
            "parent": {
                "!type": "fn() -> AdWordsApp.ProductGroup"
            },
            "remove": {
                "!type": "fn()"
            },
            "removeAllChildren": {
                "!type": "fn()"
            },
            "setMaxCpc": {
                "!type": "fn(maxCpc: number)"
            }
        },
        "AdWordsApp.ProductCustomLabelBuilder": {
            "build": {
                "!type": "fn() -> AdWordsApp.ProductCustomLabelOperation"
            },
            "withBid": {
                "!type": "fn(bid: number) -> AdWordsApp.ProductCustomLabelBuilder"
            },
            "withType": {
                "!type": "fn(type: string) -> AdWordsApp.ProductCustomLabelBuilder"
            },
            "withValue": {
                "!type": "fn(value: string) -> AdWordsApp.ProductCustomLabelBuilder"
            }
        },
        "AdWordsApp.ProductCustomLabelOperation": {
            "getErrors": {
                "!type": "fn() -> [string]"
            },
            "getResult": {
                "!type": "fn() -> AdWordsApp.ProductCustomLabel"
            },
            "isSuccessful": {
                "!type": "fn() -> bool"
            }
        },
        "AdWordsApp.ProductGroup": {
            "asBrand": {
                "!type": "fn() -> AdWordsApp.ProductBrand"
            },
            "asCategory": {
                "!type": "fn() -> AdWordsApp.ProductCategory"
            },
            "asChannel": {
                "!type": "fn() -> AdWordsApp.ProductChannel"
            },
            "asChannelExclusivity": {
                "!type": "fn() -> AdWordsApp.ProductChannelExclusivity"
            },
            "asCondition": {
                "!type": "fn() -> AdWordsApp.ProductCondition"
            },
            "asCustomLabel": {
                "!type": "fn() -> AdWordsApp.ProductCustomLabel"
            },
            "asItemId": {
                "!type": "fn() -> AdWordsApp.ProductItemId"
            },
            "asProductType": {
                "!type": "fn() -> AdWordsApp.ProductType"
            },
            "children": {
                "!type": "fn() -> AdWordsApp.ProductGroupSelector"
            },
            "exclude": {
                "!type": "fn()"
            },
            "getAdGroup": {
                "!type": "fn() -> AdWordsApp.ShoppingAdGroup"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.ShoppingCampaign"
            },
            "getDimension": {
                "!type": "fn() -> string"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getMaxCpc": {
                "!type": "fn() -> number"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "getValue": {
                "!type": "fn() -> string"
            },
            "hasChildren": {
                "!type": "fn() -> bool"
            },
            "include": {
                "!type": "fn()"
            },
            "isExcluded": {
                "!type": "fn() -> bool"
            },
            "isOtherCase": {
                "!type": "fn() -> bool"
            },
            "newChild": {
                "!type": "fn() -> AdWordsApp.ProductGroupBuilderSpace"
            },
            "parent": {
                "!type": "fn() -> AdWordsApp.ProductGroup"
            },
            "remove": {
                "!type": "fn()"
            },
            "removeAllChildren": {
                "!type": "fn()"
            },
            "setMaxCpc": {
                "!type": "fn(maxCpc: number)"
            }
        },
        "AdWordsApp.ProductGroupBuilderSpace": {
            "brandBuilder": {
                "!type": "fn() -> AdWordsApp.ProductBrandBuilder"
            },
            "categoryBuilder": {
                "!type": "fn() -> AdWordsApp.ProductCategoryBuilder"
            },
            "channelBuilder": {
                "!type": "fn() -> AdWordsApp.ProductChannelBuilder"
            },
            "channelExclusivityBuilder": {
                "!type": "fn() -> AdWordsApp.ProductChannelExclusivityBuilder"
            },
            "conditionBuilder": {
                "!type": "fn() -> AdWordsApp.ProductConditionBuilder"
            },
            "customLabelBuilder": {
                "!type": "fn() -> AdWordsApp.ProductCustomLabelBuilder"
            },
            "itemIdBuilder": {
                "!type": "fn() -> AdWordsApp.ProductItemIdBuilder"
            },
            "productTypeBuilder": {
                "!type": "fn() -> AdWordsApp.ProductTypeBuilder"
            }
        },
        "AdWordsApp.ProductGroupIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.ProductGroup"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.ProductGroupSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.ProductGroupSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.ProductGroupSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.ProductGroupIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.ProductGroupSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.ProductGroupSelector"
            },
            "withIds": {
                "!type": "fn(ids: [number]) -> AdWordsApp.ProductGroupSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.ProductGroupSelector"
            }
        },
        "AdWordsApp.ProductItemId": {
            "children": {
                "!type": "fn() -> AdWordsApp.ProductGroupSelector"
            },
            "exclude": {
                "!type": "fn()"
            },
            "getAdGroup": {
                "!type": "fn() -> AdWordsApp.ShoppingAdGroup"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.ShoppingCampaign"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getMaxCpc": {
                "!type": "fn() -> number"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "getValue": {
                "!type": "fn() -> string"
            },
            "hasChildren": {
                "!type": "fn() -> bool"
            },
            "include": {
                "!type": "fn()"
            },
            "isExcluded": {
                "!type": "fn() -> bool"
            },
            "isOtherCase": {
                "!type": "fn() -> bool"
            },
            "newChild": {
                "!type": "fn() -> AdWordsApp.ProductGroupBuilderSpace"
            },
            "parent": {
                "!type": "fn() -> AdWordsApp.ProductGroup"
            },
            "remove": {
                "!type": "fn()"
            },
            "removeAllChildren": {
                "!type": "fn()"
            },
            "setMaxCpc": {
                "!type": "fn(maxCpc: number)"
            }
        },
        "AdWordsApp.ProductItemIdBuilder": {
            "build": {
                "!type": "fn() -> AdWordsApp.ProductItemIdOperation"
            },
            "withBid": {
                "!type": "fn(bid: number) -> AdWordsApp.ProductItemIdBuilder"
            },
            "withValue": {
                "!type": "fn(value: string) -> AdWordsApp.ProductItemIdBuilder"
            }
        },
        "AdWordsApp.ProductItemIdOperation": {
            "getErrors": {
                "!type": "fn() -> [string]"
            },
            "getResult": {
                "!type": "fn() -> AdWordsApp.ProductItemId"
            },
            "isSuccessful": {
                "!type": "fn() -> bool"
            }
        },
        "AdWordsApp.ProductType": {
            "children": {
                "!type": "fn() -> AdWordsApp.ProductGroupSelector"
            },
            "exclude": {
                "!type": "fn()"
            },
            "getAdGroup": {
                "!type": "fn() -> AdWordsApp.ShoppingAdGroup"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.ShoppingCampaign"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getMaxCpc": {
                "!type": "fn() -> number"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "getType": {
                "!type": "fn() -> string"
            },
            "getValue": {
                "!type": "fn() -> string"
            },
            "hasChildren": {
                "!type": "fn() -> bool"
            },
            "include": {
                "!type": "fn()"
            },
            "isExcluded": {
                "!type": "fn() -> bool"
            },
            "isOtherCase": {
                "!type": "fn() -> bool"
            },
            "newChild": {
                "!type": "fn() -> AdWordsApp.ProductGroupBuilderSpace"
            },
            "parent": {
                "!type": "fn() -> AdWordsApp.ProductGroup"
            },
            "remove": {
                "!type": "fn()"
            },
            "removeAllChildren": {
                "!type": "fn()"
            },
            "setMaxCpc": {
                "!type": "fn(maxCpc: number)"
            }
        },
        "AdWordsApp.ProductTypeBuilder": {
            "build": {
                "!type": "fn() -> AdWordsApp.ProductTypeOperation"
            },
            "withBid": {
                "!type": "fn(bid: number) -> AdWordsApp.ProductTypeBuilder"
            },
            "withValue": {
                "!type": "fn(value: string) -> AdWordsApp.ProductTypeBuilder"
            }
        },
        "AdWordsApp.ProductTypeOperation": {
            "getErrors": {
                "!type": "fn() -> [string]"
            },
            "getResult": {
                "!type": "fn() -> AdWordsApp.ProductType"
            },
            "isSuccessful": {
                "!type": "fn() -> bool"
            }
        },
        "AdWordsApp.Report": {
            "exportToSheet": {
                "!type": "fn(sheet: Sheet)"
            },
            "getColumnHeader": {
                "!type": "fn(awqlColumnName: string) -> AdWordsApp.ReportColumnHeader"
            },
            "rows": {
                "!type": "fn() -> AdWordsApp.ReportRowIterator"
            }
        },
        "AdWordsApp.ReportColumnHeader": {
            "getAwqlColumnName": {
                "!type": "fn() -> string"
            },
            "getDisplayColumnName": {
                "!type": "fn() -> string"
            }
        },
        "AdWordsApp.ReportRow": {
            "formatForUpload": {
                "!type": "fn() -> object"
            }
        },
        "AdWordsApp.ReportRowIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.ReportRow"
            }
        },
        "AdWordsApp.Review": {
            "getEndDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getSchedules": {
                "!type": "fn() -> [AdWordsApp.ExtensionSchedule]"
            },
            "getSourceName": {
                "!type": "fn() -> string"
            },
            "getSourceUrl": {
                "!type": "fn() -> string"
            },
            "getStartDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "getText": {
                "!type": "fn() -> string"
            },
            "isExactlyQuoted": {
                "!type": "fn() -> bool"
            },
            "isMobilePreferred": {
                "!type": "fn() -> bool"
            },
            "setEndDate": {
                "!type": "fn(date: object)"
            },
            "setExactlyQuoted": {
                "!type": "fn(isExactlyQuoted: bool)"
            },
            "setMobilePreferred": {
                "!type": "fn(isMobilePreferred: bool)"
            },
            "setSchedules": {
                "!type": "fn(schedules: [AdWordsApp.ExtensionSchedule])"
            },
            "setSourceName": {
                "!type": "fn(sourceName: string)"
            },
            "setSourceUrl": {
                "!type": "fn(sourceUrl: string)"
            },
            "setStartDate": {
                "!type": "fn(date: object)"
            },
            "setText": {
                "!type": "fn(text: string)"
            }
        },
        "AdWordsApp.ReviewBuilder": {
            "build": {
                "!type": "fn() -> AdWordsApp.ReviewOperation"
            },
            "withEndDate": {
                "!type": "fn(date: object) -> AdWordsApp.ReviewBuilder"
            },
            "withExactlyQuoted": {
                "!type": "fn(isExactlyQuoted: bool) -> AdWordsApp.ReviewBuilder"
            },
            "withMobilePreferred": {
                "!type": "fn(isMobilePreferred: bool) -> AdWordsApp.ReviewBuilder"
            },
            "withSchedules": {
                "!type": "fn(schedules: [AdWordsApp.ExtensionSchedule]) -> AdWordsApp.ReviewBuilder"
            },
            "withSourceName": {
                "!type": "fn(sourceName: string) -> AdWordsApp.ReviewBuilder"
            },
            "withSourceUrl": {
                "!type": "fn(sourceUrl: string) -> AdWordsApp.ReviewBuilder"
            },
            "withStartDate": {
                "!type": "fn(date: object) -> AdWordsApp.ReviewBuilder"
            },
            "withText": {
                "!type": "fn(text: string) -> AdWordsApp.ReviewBuilder"
            }
        },
        "AdWordsApp.ReviewIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.Review"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.ReviewOperation": {
            "getErrors": {
                "!type": "fn() -> [string]"
            },
            "getResult": {
                "!type": "fn() -> AdWordsApp.Review"
            },
            "isSuccessful": {
                "!type": "fn() -> bool"
            }
        },
        "AdWordsApp.ReviewSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.ReviewSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.ReviewSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.ReviewIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.ReviewSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.ReviewSelector"
            },
            "withIds": {
                "!type": "fn(ids: [number]) -> AdWordsApp.ReviewSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.ReviewSelector"
            }
        },
        "AdWordsApp.SharedExcludedPlacement": {
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getExcludedPlacementList": {
                "!type": "fn() -> AdWordsApp.ExcludedPlacementList"
            },
            "getUrl": {
                "!type": "fn() -> string"
            },
            "remove": {
                "!type": "fn()"
            }
        },
        "AdWordsApp.SharedExcludedPlacementIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.SharedExcludedPlacement"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.SharedExcludedPlacementSelector": {
            "get": {
                "!type": "fn() -> AdWordsApp.SharedExcludedPlacementIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.SharedExcludedPlacementSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.SharedExcludedPlacementSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.SharedExcludedPlacementSelector"
            }
        },
        "AdWordsApp.SharedNegativeKeyword": {
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getMatchType": {
                "!type": "fn() -> string"
            },
            "getNegativeKeywordList": {
                "!type": "fn() -> AdWordsApp.NegativeKeywordList"
            },
            "getText": {
                "!type": "fn() -> string"
            },
            "remove": {
                "!type": "fn()"
            }
        },
        "AdWordsApp.SharedNegativeKeywordIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.SharedNegativeKeyword"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.SharedNegativeKeywordSelector": {
            "get": {
                "!type": "fn() -> AdWordsApp.SharedNegativeKeywordIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.SharedNegativeKeywordSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.SharedNegativeKeywordSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.SharedNegativeKeywordSelector"
            }
        },
        "AdWordsApp.ShoppingAdGroup": {
            "ads": {
                "!type": "fn() -> AdWordsApp.ProductAdSelector"
            },
            "applyLabel": {
                "!type": "fn(name: string)"
            },
            "bidding": {
                "!type": "fn() -> AdWordsApp.ShoppingAdGroupBidding"
            },
            "createNegativeKeyword": {
                "!type": "fn(keywordText: string)"
            },
            "createRootProductGroup": {
                "!type": "fn() -> Operation"
            },
            "enable": {
                "!type": "fn()"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.ShoppingCampaign"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getMobileBidModifier": {
                "!type": "fn() -> number"
            },
            "getName": {
                "!type": "fn() -> string"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "isEnabled": {
                "!type": "fn() -> bool"
            },
            "isPaused": {
                "!type": "fn() -> bool"
            },
            "isRemoved": {
                "!type": "fn() -> bool"
            },
            "labels": {
                "!type": "fn() -> AdWordsApp.LabelSelector"
            },
            "newAdBuilder": {
                "!type": "fn() -> AdWordsApp.ProductAdBuilder"
            },
            "pause": {
                "!type": "fn()"
            },
            "productGroups": {
                "!type": "fn() -> AdWordsApp.ProductGroupSelector"
            },
            "removeLabel": {
                "!type": "fn(name: string)"
            },
            "rootProductGroup": {
                "!type": "fn() -> AdWordsApp.ProductGroup"
            },
            "setMobileBidModifier": {
                "!type": "fn(modifier: number)"
            },
            "setName": {
                "!type": "fn(name: string)"
            }
        },
        "AdWordsApp.ShoppingAdGroupBidding": {
            "clearStrategy": {
                "!type": "fn()"
            },
            "getCpc": {
                "!type": "fn() -> number"
            },
            "getStrategy": {
                "!type": "fn() -> AdWordsApp.BiddingStrategy"
            },
            "getStrategySource": {
                "!type": "fn() -> string"
            },
            "getStrategyType": {
                "!type": "fn() -> string"
            },
            "setCpc": {
                "!type": "fn(cpc: number)"
            },
            "setStrategy": {
                "!type": "fn(biddingStrategy: BiddingStrategy)"
            },
            "setStrategy ": {
                "!type": "fn(biddingStrategy: string)"
            }
        },
        "AdWordsApp.ShoppingAdGroupBuilder": {
            "build": {
                "!type": "fn() -> AdWordsApp.ShoppingAdGroupOperation"
            },
            "withBiddingStrategy": {
                "!type": "fn(biddingStrategy: BiddingStrategy) -> AdWordsApp.ShoppingAdGroupBuilder"
            },
            "withBiddingStrategy ": {
                "!type": "fn(biddingStrategy: string) -> AdWordsApp.ShoppingAdGroupBuilder"
            },
            "withCpc": {
                "!type": "fn(cpc: number) -> AdWordsApp.ShoppingAdGroupBuilder"
            },
            "withName": {
                "!type": "fn(name: string) -> AdWordsApp.ShoppingAdGroupBuilder"
            },
            "withStatus": {
                "!type": "fn(status: string) -> AdWordsApp.ShoppingAdGroupBuilder"
            }
        },
        "AdWordsApp.ShoppingAdGroupIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.ShoppingAdGroup"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.ShoppingAdGroupOperation": {
            "getErrors": {
                "!type": "fn() -> [string]"
            },
            "getResult": {
                "!type": "fn() -> AdWordsApp.ShoppingAdGroup"
            },
            "isSuccessful": {
                "!type": "fn() -> bool"
            }
        },
        "AdWordsApp.ShoppingAdGroupSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.ShoppingAdGroupSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.ShoppingAdGroupSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.ShoppingAdGroupIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.ShoppingAdGroupSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.ShoppingAdGroupSelector"
            },
            "withIds": {
                "!type": "fn(ids: [number]) -> AdWordsApp.ShoppingAdGroupSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.ShoppingAdGroupSelector"
            }
        },
        "AdWordsApp.ShoppingCampaign": {
            "adGroups": {
                "!type": "fn() -> AdWordsApp.ShoppingAdGroupSelector"
            },
            "addAdSchedule": {
                "!type": "fn(adSchedule: object)"
            },
            "addAdSchedule ": {
                "!type": "fn(dayOfWeek: string, startHour: number, startMinute: number, endHour: number, endMinute: number, bidModifier: number)"
            },
            "addLocation": {
                "!type": "fn(locationId: number, bidModifier: number)"
            },
            "addLocation ": {
                "!type": "fn(location: object)"
            },
            "addProximity": {
                "!type": "fn(latitude: number, longitude: number, radius: number, radiusUnits: string, optArgs: object)"
            },
            "addProximity ": {
                "!type": "fn(proximity: object)"
            },
            "ads": {
                "!type": "fn() -> AdWordsApp.ProductAdSelector"
            },
            "applyLabel": {
                "!type": "fn(name: string)"
            },
            "bidding": {
                "!type": "fn() -> AdWordsApp.ShoppingCampaignBidding"
            },
            "createNegativeKeyword": {
                "!type": "fn(keywordText: string)"
            },
            "enable": {
                "!type": "fn()"
            },
            "excludeLocation": {
                "!type": "fn(locationOrId: object)"
            },
            "getAdRotationType": {
                "!type": "fn() -> string"
            },
            "getBiddingStrategyType": {
                "!type": "fn() -> string"
            },
            "getBudget": {
                "!type": "fn() -> AdWordsApp.Budget"
            },
            "getEndDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getName": {
                "!type": "fn() -> string"
            },
            "getStartDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "isDeleted": {
                "!type": "fn() -> bool"
            },
            "isEnabled": {
                "!type": "fn() -> bool"
            },
            "isPaused": {
                "!type": "fn() -> bool"
            },
            "labels": {
                "!type": "fn() -> AdWordsApp.LabelSelector"
            },
            "negativeKeywords": {
                "!type": "fn() -> AdWordsApp.NegativeKeywordSelector"
            },
            "newAdGroupBuilder": {
                "!type": "fn() -> AdWordsApp.ShoppingAdGroupBuilder"
            },
            "pause": {
                "!type": "fn()"
            },
            "productGroups": {
                "!type": "fn() -> AdWordsApp.ProductGroupSelector"
            },
            "removeLabel": {
                "!type": "fn(name: string)"
            },
            "setAdRotationType": {
                "!type": "fn(adRotationType: string)"
            },
            "setEndDate": {
                "!type": "fn(date: object)"
            },
            "setName": {
                "!type": "fn(name: string)"
            },
            "setStartDate": {
                "!type": "fn(date: object)"
            },
            "targeting": {
                "!type": "fn() -> AdWordsApp.Targeting"
            }
        },
        "AdWordsApp.ShoppingCampaignBidding": {
            "getStrategy": {
                "!type": "fn() -> AdWordsApp.BiddingStrategy"
            },
            "getStrategySource": {
                "!type": "fn() -> string"
            },
            "getStrategyType": {
                "!type": "fn() -> string"
            },
            "setStrategy": {
                "!type": "fn(biddingStrategy: BiddingStrategy)"
            },
            "setStrategy ": {
                "!type": "fn(biddingStrategy: string)"
            }
        },
        "AdWordsApp.ShoppingCampaignIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.ShoppingCampaign"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.ShoppingCampaignSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.ShoppingCampaignSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.ShoppingCampaignSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.ShoppingCampaignIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.ShoppingCampaignSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.ShoppingCampaignSelector"
            },
            "withIds": {
                "!type": "fn(ids: [number]) -> AdWordsApp.ShoppingCampaignSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.ShoppingCampaignSelector"
            }
        },
        "AdWordsApp.Sitelink": {
            "clearDescription1": {
                "!type": "fn()"
            },
            "clearDescription2": {
                "!type": "fn()"
            },
            "clearLinkUrl": {
                "!type": "fn()"
            },
            "getDescription1": {
                "!type": "fn() -> string"
            },
            "getDescription2": {
                "!type": "fn() -> string"
            },
            "getEndDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getLinkText": {
                "!type": "fn() -> string"
            },
            "getLinkUrl": {
                "!type": "fn() -> string"
            },
            "getSchedules": {
                "!type": "fn() -> [AdWordsApp.ExtensionSchedule]"
            },
            "getStartDate": {
                "!type": "fn() -> AdWordsApp.AdWordsDate"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "isMobilePreferred": {
                "!type": "fn() -> bool"
            },
            "setDescription1": {
                "!type": "fn(description1: string)"
            },
            "setDescription2": {
                "!type": "fn(description2: string)"
            },
            "setEndDate": {
                "!type": "fn(date: object)"
            },
            "setLinkText": {
                "!type": "fn(linkText: string)"
            },
            "setLinkUrl": {
                "!type": "fn(linkUrl: string)"
            },
            "setMobilePreferred": {
                "!type": "fn(isMobilePreferred: bool)"
            },
            "setSchedules": {
                "!type": "fn(schedules: [AdWordsApp.ExtensionSchedule])"
            },
            "setStartDate": {
                "!type": "fn(date: object)"
            },
            "urls": {
                "!type": "fn() -> AdWordsApp.SitelinkUrls"
            }
        },
        "AdWordsApp.SitelinkBuilder": {
            "build": {
                "!type": "fn() -> AdWordsApp.SitelinkOperation"
            },
            "withCustomParameters": {
                "!type": "fn(customParameters: object) -> AdWordsApp.SitelinkBuilder"
            },
            "withDescription1": {
                "!type": "fn(description1: string) -> AdWordsApp.SitelinkBuilder"
            },
            "withDescription2": {
                "!type": "fn(description2: string) -> AdWordsApp.SitelinkBuilder"
            },
            "withEndDate": {
                "!type": "fn(date: object) -> AdWordsApp.SitelinkBuilder"
            },
            "withFinalUrl": {
                "!type": "fn(finalUrl: string) -> AdWordsApp.SitelinkBuilder"
            },
            "withLinkText": {
                "!type": "fn(linkText: string) -> AdWordsApp.SitelinkBuilder"
            },
            "withLinkUrl": {
                "!type": "fn(linkUrl: string) -> AdWordsApp.SitelinkBuilder"
            },
            "withMobileFinalUrl": {
                "!type": "fn(mobileFinalUrl: string) -> AdWordsApp.SitelinkBuilder"
            },
            "withMobilePreferred": {
                "!type": "fn(isMobilePreferred: bool) -> AdWordsApp.SitelinkBuilder"
            },
            "withSchedules": {
                "!type": "fn(schedules: [AdWordsApp.ExtensionSchedule]) -> AdWordsApp.SitelinkBuilder"
            },
            "withStartDate": {
                "!type": "fn(date: object) -> AdWordsApp.SitelinkBuilder"
            },
            "withTrackingTemplate": {
                "!type": "fn(trackingTemplate: string) -> AdWordsApp.SitelinkBuilder"
            }
        },
        "AdWordsApp.SitelinkIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.Sitelink"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.SitelinkOperation": {
            "getErrors": {
                "!type": "fn() -> [string]"
            },
            "getResult": {
                "!type": "fn() -> AdWordsApp.Sitelink"
            },
            "isSuccessful": {
                "!type": "fn() -> bool"
            }
        },
        "AdWordsApp.SitelinkSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.SitelinkSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.SitelinkSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.SitelinkIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.SitelinkSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.SitelinkSelector"
            },
            "withIds": {
                "!type": "fn(ids: [number]) -> AdWordsApp.SitelinkSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.SitelinkSelector"
            }
        },
        "AdWordsApp.SitelinkUrls": {
            "clearMobileFinalUrl": {
                "!type": "fn()"
            },
            "clearTrackingTemplate": {
                "!type": "fn()"
            },
            "getCustomParameters": {
                "!type": "fn() -> object"
            },
            "getFinalUrl": {
                "!type": "fn() -> string"
            },
            "getMobileFinalUrl": {
                "!type": "fn() -> string"
            },
            "getTrackingTemplate": {
                "!type": "fn() -> string"
            },
            "setCustomParameters": {
                "!type": "fn(customParameters: object)"
            },
            "setFinalUrl": {
                "!type": "fn(finalUrl: string)"
            },
            "setMobileFinalUrl": {
                "!type": "fn(mobileFinalUrl: string)"
            },
            "setTrackingTemplate": {
                "!type": "fn(trackingTemplate: string)"
            }
        },
        "AdWordsApp.Stats": {
            "getAverageCpc": {
                "!type": "fn() -> number"
            },
            "getAverageCpm": {
                "!type": "fn() -> number"
            },
            "getAveragePageviews": {
                "!type": "fn() -> number"
            },
            "getAveragePosition": {
                "!type": "fn() -> number"
            },
            "getAverageTimeOnSite": {
                "!type": "fn() -> number"
            },
            "getBounceRate": {
                "!type": "fn() -> number"
            },
            "getClickConversionRate": {
                "!type": "fn() -> number"
            },
            "getClicks": {
                "!type": "fn() -> number"
            },
            "getConversionRate": {
                "!type": "fn() -> number"
            },
            "getConversions": {
                "!type": "fn() -> number"
            },
            "getConvertedClicks": {
                "!type": "fn() -> number"
            },
            "getCost": {
                "!type": "fn() -> number"
            },
            "getCtr": {
                "!type": "fn() -> number"
            },
            "getImpressions": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.TargetedLocation": {
            "getBidModifier": {
                "!type": "fn() -> number"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.Campaign"
            },
            "getCountryCode": {
                "!type": "fn() -> string"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getName": {
                "!type": "fn() -> string"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "getTargetType": {
                "!type": "fn() -> string"
            },
            "getTargetingStatus": {
                "!type": "fn() -> string"
            },
            "remove": {
                "!type": "fn()"
            },
            "setBidModifier": {
                "!type": "fn(modifier: number)"
            }
        },
        "AdWordsApp.TargetedLocationIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.TargetedLocation"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.TargetedLocationSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.TargetedLocationSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.TargetedLocationSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.TargetedLocationIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.TargetedLocationSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.TargetedLocationSelector"
            },
            "withIds": {
                "!type": "fn(ids: [[number]]) -> AdWordsApp.TargetedLocationSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.TargetedLocationSelector"
            }
        },
        "AdWordsApp.TargetedProximity": {
            "getAddress": {
                "!type": "fn() -> AdWordsApp.Address"
            },
            "getBidModifier": {
                "!type": "fn() -> number"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.Campaign"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getLatitude": {
                "!type": "fn() -> number"
            },
            "getLongitude": {
                "!type": "fn() -> number"
            },
            "getRadius": {
                "!type": "fn() -> number"
            },
            "getRadiusUnits": {
                "!type": "fn() -> string"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "remove": {
                "!type": "fn()"
            },
            "setBidModifier": {
                "!type": "fn(modifier: number)"
            }
        },
        "AdWordsApp.TargetedProximityIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.TargetedProximity"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.TargetedProximitySelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.TargetedProximitySelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.TargetedProximitySelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.TargetedProximityIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.TargetedProximitySelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.TargetedProximitySelector"
            },
            "withIds": {
                "!type": "fn(ids: [[number]]) -> AdWordsApp.TargetedProximitySelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.TargetedProximitySelector"
            }
        },
        "AdWordsApp.Targeting": {
            "adSchedules": {
                "!type": "fn() -> AdWordsApp.AdScheduleSelector"
            },
            "excludedLocations": {
                "!type": "fn() -> AdWordsApp.ExcludedLocationSelector"
            },
            "platforms": {
                "!type": "fn() -> AdWordsApp.PlatformSelector"
            },
            "targetedLocations": {
                "!type": "fn() -> AdWordsApp.TargetedLocationSelector"
            },
            "targetedProximities": {
                "!type": "fn() -> AdWordsApp.TargetedProximitySelector"
            }
        },
        "AdWordsApp.Topic": {
            "bidding": {
                "!type": "fn() -> AdWordsApp.TopicBidding"
            },
            "getAdGroup": {
                "!type": "fn() -> AdWordsApp.AdGroup"
            },
            "getCampaign": {
                "!type": "fn() -> AdWordsApp.Campaign"
            },
            "getId": {
                "!type": "fn() -> number"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.Stats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.Stats"
            },
            "getTopicId": {
                "!type": "fn() -> number"
            },
            "isEnabled": {
                "!type": "fn() -> bool"
            },
            "isPaused": {
                "!type": "fn() -> bool"
            },
            "remove": {
                "!type": "fn()"
            }
        },
        "AdWordsApp.TopicBidding": {
            "clearCpc": {
                "!type": "fn()"
            },
            "clearCpm": {
                "!type": "fn()"
            },
            "getCpc": {
                "!type": "fn() -> number"
            },
            "getCpm": {
                "!type": "fn() -> number"
            },
            "getStrategy": {
                "!type": "fn() -> AdWordsApp.BiddingStrategy"
            },
            "getStrategySource": {
                "!type": "fn() -> string"
            },
            "getStrategyType": {
                "!type": "fn() -> string"
            },
            "setCpc": {
                "!type": "fn(cpc: number)"
            },
            "setCpm": {
                "!type": "fn(cpm: number)"
            }
        },
        "AdWordsApp.TopicBuilder": {
            "build": {
                "!type": "fn() -> AdWordsApp.TopicOperation"
            },
            "exclude": {
                "!type": "fn() -> AdWordsApp.ExcludedTopicOperation"
            },
            "withCpc": {
                "!type": "fn(cpc: number) -> AdWordsApp.TopicBuilder"
            },
            "withCpm": {
                "!type": "fn(cpm: number) -> AdWordsApp.TopicBuilder"
            },
            "withTopicId": {
                "!type": "fn(topicId: number) -> AdWordsApp.TopicBuilder"
            }
        },
        "AdWordsApp.TopicIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> AdWordsApp.Topic"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "AdWordsApp.TopicOperation": {
            "getErrors": {
                "!type": "fn() -> [string]"
            },
            "getResult": {
                "!type": "fn() -> AdWordsApp.Topic"
            },
            "isSuccessful": {
                "!type": "fn() -> bool"
            }
        },
        "AdWordsApp.TopicSelector": {
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> AdWordsApp.TopicSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> AdWordsApp.TopicSelector"
            },
            "get": {
                "!type": "fn() -> AdWordsApp.TopicIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> AdWordsApp.TopicSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> AdWordsApp.TopicSelector"
            },
            "withIds": {
                "!type": "fn(ids: [[number]]) -> AdWordsApp.TopicSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> AdWordsApp.TopicSelector"
            }
        },
        "Analytics.Collection.Data.GaCollection": {
            "get": {
                "!type": "fn(ids: string, startdate: string, enddate: string, metrics: string) -> Analytics.Schema.GaData"
            },
            "get ": {
                "!type": "fn(ids: string, startdate: string, enddate: string, metrics: string, optionalArgs: object) -> Analytics.Schema.GaData"
            }
        },
        "Analytics.Collection.Data.McfCollection": {
            "get": {
                "!type": "fn(ids: string, startdate: string, enddate: string, metrics: string) -> Analytics.Schema.McfData"
            },
            "get ": {
                "!type": "fn(ids: string, startdate: string, enddate: string, metrics: string, optionalArgs: object) -> Analytics.Schema.McfData"
            }
        },
        "Analytics.Collection.Data.RealtimeCollection": {
            "get": {
                "!type": "fn(ids: string, metrics: string) -> Analytics.Schema.RealtimeData"
            },
            "get ": {
                "!type": "fn(ids: string, metrics: string, optionalArgs: object) -> Analytics.Schema.RealtimeData"
            }
        },
        "Analytics.Collection.DataCollection": {
            "Ga": {
                "!type": "Analytics.Collection.Data.GaCollection"
            },
            "Mcf": {
                "!type": "Analytics.Collection.Data.McfCollection"
            },
            "Realtime": {
                "!type": "Analytics.Collection.Data.RealtimeCollection"
            }
        },
        "Analytics.Collection.Management.AccountSummariesCollection": {
            "list": {
                "!type": "fn() -> Analytics.Schema.AccountSummaries"
            },
            "list ": {
                "!type": "fn(optionalArgs: object) -> Analytics.Schema.AccountSummaries"
            }
        },
        "Analytics.Collection.Management.AccountUserLinksCollection": {
            "insert": {
                "!type": "fn(resource: Analytics.Schema.EntityUserLink, accountId: string) -> Analytics.Schema.EntityUserLink"
            },
            "list": {
                "!type": "fn(accountId: string) -> Analytics.Schema.EntityUserLinks"
            },
            "list ": {
                "!type": "fn(accountId: string, optionalArgs: object) -> Analytics.Schema.EntityUserLinks"
            },
            "remove": {
                "!type": "fn(accountId: string, linkId: string)"
            },
            "update": {
                "!type": "fn(resource: Analytics.Schema.EntityUserLink, accountId: string, linkId: string) -> Analytics.Schema.EntityUserLink"
            }
        },
        "Analytics.Collection.Management.AccountsCollection": {
            "list": {
                "!type": "fn() -> Analytics.Schema.Accounts"
            },
            "list ": {
                "!type": "fn(optionalArgs: object) -> Analytics.Schema.Accounts"
            }
        },
        "Analytics.Collection.Management.CustomDataSourcesCollection": {
            "list": {
                "!type": "fn(accountId: string, webPropertyId: string) -> Analytics.Schema.CustomDataSources"
            },
            "list ": {
                "!type": "fn(accountId: string, webPropertyId: string, optionalArgs: object) -> Analytics.Schema.CustomDataSources"
            }
        },
        "Analytics.Collection.Management.CustomDimensionsCollection": {
            "get": {
                "!type": "fn(accountId: string, webPropertyId: string, customDimensionId: string) -> Analytics.Schema.CustomDimension"
            },
            "insert": {
                "!type": "fn(resource: Analytics.Schema.CustomDimension, accountId: string, webPropertyId: string) -> Analytics.Schema.CustomDimension"
            },
            "list": {
                "!type": "fn(accountId: string, webPropertyId: string) -> Analytics.Schema.CustomDimensions"
            },
            "list ": {
                "!type": "fn(accountId: string, webPropertyId: string, optionalArgs: object) -> Analytics.Schema.CustomDimensions"
            },
            "patch": {
                "!type": "fn(resource: Analytics.Schema.CustomDimension, accountId: string, webPropertyId: string, customDimensionId: string) -> Analytics.Schema.CustomDimension"
            },
            "patch ": {
                "!type": "fn(resource: Analytics.Schema.CustomDimension, accountId: string, webPropertyId: string, customDimensionId: string, optionalArgs: object) -> Analytics.Schema.CustomDimension"
            },
            "update": {
                "!type": "fn(resource: Analytics.Schema.CustomDimension, accountId: string, webPropertyId: string, customDimensionId: string) -> Analytics.Schema.CustomDimension"
            },
            "update ": {
                "!type": "fn(resource: Analytics.Schema.CustomDimension, accountId: string, webPropertyId: string, customDimensionId: string, optionalArgs: object) -> Analytics.Schema.CustomDimension"
            }
        },
        "Analytics.Collection.Management.CustomMetricsCollection": {
            "get": {
                "!type": "fn(accountId: string, webPropertyId: string, customMetricId: string) -> Analytics.Schema.CustomMetric"
            },
            "insert": {
                "!type": "fn(resource: Analytics.Schema.CustomMetric, accountId: string, webPropertyId: string) -> Analytics.Schema.CustomMetric"
            },
            "list": {
                "!type": "fn(accountId: string, webPropertyId: string) -> Analytics.Schema.CustomMetrics"
            },
            "list ": {
                "!type": "fn(accountId: string, webPropertyId: string, optionalArgs: object) -> Analytics.Schema.CustomMetrics"
            },
            "patch": {
                "!type": "fn(resource: Analytics.Schema.CustomMetric, accountId: string, webPropertyId: string, customMetricId: string) -> Analytics.Schema.CustomMetric"
            },
            "patch ": {
                "!type": "fn(resource: Analytics.Schema.CustomMetric, accountId: string, webPropertyId: string, customMetricId: string, optionalArgs: object) -> Analytics.Schema.CustomMetric"
            },
            "update": {
                "!type": "fn(resource: Analytics.Schema.CustomMetric, accountId: string, webPropertyId: string, customMetricId: string) -> Analytics.Schema.CustomMetric"
            },
            "update ": {
                "!type": "fn(resource: Analytics.Schema.CustomMetric, accountId: string, webPropertyId: string, customMetricId: string, optionalArgs: object) -> Analytics.Schema.CustomMetric"
            }
        },
        "Analytics.Collection.Management.ExperimentsCollection": {
            "get": {
                "!type": "fn(accountId: string, webPropertyId: string, profileId: string, experimentId: string) -> Analytics.Schema.Experiment"
            },
            "insert": {
                "!type": "fn(resource: Analytics.Schema.Experiment, accountId: string, webPropertyId: string, profileId: string) -> Analytics.Schema.Experiment"
            },
            "list": {
                "!type": "fn(accountId: string, webPropertyId: string, profileId: string) -> Analytics.Schema.Experiments"
            },
            "list ": {
                "!type": "fn(accountId: string, webPropertyId: string, profileId: string, optionalArgs: object) -> Analytics.Schema.Experiments"
            },
            "patch": {
                "!type": "fn(resource: Analytics.Schema.Experiment, accountId: string, webPropertyId: string, profileId: string, experimentId: string) -> Analytics.Schema.Experiment"
            },
            "remove": {
                "!type": "fn(accountId: string, webPropertyId: string, profileId: string, experimentId: string)"
            },
            "update": {
                "!type": "fn(resource: Analytics.Schema.Experiment, accountId: string, webPropertyId: string, profileId: string, experimentId: string) -> Analytics.Schema.Experiment"
            }
        },
        "Analytics.Collection.Management.FiltersCollection": {
            "get": {
                "!type": "fn(accountId: string, filterId: string) -> Analytics.Schema.Filter"
            },
            "insert": {
                "!type": "fn(resource: Analytics.Schema.Filter, accountId: string) -> Analytics.Schema.Filter"
            },
            "list": {
                "!type": "fn(accountId: string) -> Analytics.Schema.Filters"
            },
            "list ": {
                "!type": "fn(accountId: string, optionalArgs: object) -> Analytics.Schema.Filters"
            },
            "patch": {
                "!type": "fn(resource: Analytics.Schema.Filter, accountId: string, filterId: string) -> Analytics.Schema.Filter"
            },
            "remove": {
                "!type": "fn(accountId: string, filterId: string) -> Analytics.Schema.Filter"
            },
            "update": {
                "!type": "fn(resource: Analytics.Schema.Filter, accountId: string, filterId: string) -> Analytics.Schema.Filter"
            }
        },
        "Analytics.Collection.Management.GoalsCollection": {
            "get": {
                "!type": "fn(accountId: string, webPropertyId: string, profileId: string, goalId: string) -> Analytics.Schema.Goal"
            },
            "insert": {
                "!type": "fn(resource: Analytics.Schema.Goal, accountId: string, webPropertyId: string, profileId: string) -> Analytics.Schema.Goal"
            },
            "list": {
                "!type": "fn(accountId: string, webPropertyId: string, profileId: string) -> Analytics.Schema.Goals"
            },
            "list ": {
                "!type": "fn(accountId: string, webPropertyId: string, profileId: string, optionalArgs: object) -> Analytics.Schema.Goals"
            },
            "patch": {
                "!type": "fn(resource: Analytics.Schema.Goal, accountId: string, webPropertyId: string, profileId: string, goalId: string) -> Analytics.Schema.Goal"
            },
            "update": {
                "!type": "fn(resource: Analytics.Schema.Goal, accountId: string, webPropertyId: string, profileId: string, goalId: string) -> Analytics.Schema.Goal"
            }
        },
        "Analytics.Collection.Management.ProfileFilterLinksCollection": {
            "get": {
                "!type": "fn(accountId: string, webPropertyId: string, profileId: string, linkId: string) -> Analytics.Schema.ProfileFilterLink"
            },
            "insert": {
                "!type": "fn(resource: Analytics.Schema.ProfileFilterLink, accountId: string, webPropertyId: string, profileId: string) -> Analytics.Schema.ProfileFilterLink"
            },
            "list": {
                "!type": "fn(accountId: string, webPropertyId: string, profileId: string) -> Analytics.Schema.ProfileFilterLinks"
            },
            "list ": {
                "!type": "fn(accountId: string, webPropertyId: string, profileId: string, optionalArgs: object) -> Analytics.Schema.ProfileFilterLinks"
            },
            "patch": {
                "!type": "fn(resource: Analytics.Schema.ProfileFilterLink, accountId: string, webPropertyId: string, profileId: string, linkId: string) -> Analytics.Schema.ProfileFilterLink"
            },
            "remove": {
                "!type": "fn(accountId: string, webPropertyId: string, profileId: string, linkId: string)"
            },
            "update": {
                "!type": "fn(resource: Analytics.Schema.ProfileFilterLink, accountId: string, webPropertyId: string, profileId: string, linkId: string) -> Analytics.Schema.ProfileFilterLink"
            }
        },
        "Analytics.Collection.Management.ProfileUserLinksCollection": {
            "insert": {
                "!type": "fn(resource: Analytics.Schema.EntityUserLink, accountId: string, webPropertyId: string, profileId: string) -> Analytics.Schema.EntityUserLink"
            },
            "list": {
                "!type": "fn(accountId: string, webPropertyId: string, profileId: string) -> Analytics.Schema.EntityUserLinks"
            },
            "list ": {
                "!type": "fn(accountId: string, webPropertyId: string, profileId: string, optionalArgs: object) -> Analytics.Schema.EntityUserLinks"
            },
            "remove": {
                "!type": "fn(accountId: string, webPropertyId: string, profileId: string, linkId: string)"
            },
            "update": {
                "!type": "fn(resource: Analytics.Schema.EntityUserLink, accountId: string, webPropertyId: string, profileId: string, linkId: string) -> Analytics.Schema.EntityUserLink"
            }
        },
        "Analytics.Collection.Management.ProfilesCollection": {
            "get": {
                "!type": "fn(accountId: string, webPropertyId: string, profileId: string) -> Analytics.Schema.Profile"
            },
            "insert": {
                "!type": "fn(resource: Analytics.Schema.Profile, accountId: string, webPropertyId: string) -> Analytics.Schema.Profile"
            },
            "list": {
                "!type": "fn(accountId: string, webPropertyId: string) -> Analytics.Schema.Profiles"
            },
            "list ": {
                "!type": "fn(accountId: string, webPropertyId: string, optionalArgs: object) -> Analytics.Schema.Profiles"
            },
            "patch": {
                "!type": "fn(resource: Analytics.Schema.Profile, accountId: string, webPropertyId: string, profileId: string) -> Analytics.Schema.Profile"
            },
            "remove": {
                "!type": "fn(accountId: string, webPropertyId: string, profileId: string)"
            },
            "update": {
                "!type": "fn(resource: Analytics.Schema.Profile, accountId: string, webPropertyId: string, profileId: string) -> Analytics.Schema.Profile"
            }
        },
        "Analytics.Collection.Management.SegmentsCollection": {
            "list": {
                "!type": "fn() -> Analytics.Schema.Segments"
            },
            "list ": {
                "!type": "fn(optionalArgs: object) -> Analytics.Schema.Segments"
            }
        },
        "Analytics.Collection.Management.UnsampledReportsCollection": {
            "get": {
                "!type": "fn(accountId: string, webPropertyId: string, profileId: string, unsampledReportId: string) -> Analytics.Schema.UnsampledReport"
            },
            "insert": {
                "!type": "fn(resource: Analytics.Schema.UnsampledReport, accountId: string, webPropertyId: string, profileId: string) -> Analytics.Schema.UnsampledReport"
            },
            "list": {
                "!type": "fn(accountId: string, webPropertyId: string, profileId: string) -> Analytics.Schema.UnsampledReports"
            },
            "list ": {
                "!type": "fn(accountId: string, webPropertyId: string, profileId: string, optionalArgs: object) -> Analytics.Schema.UnsampledReports"
            },
            "remove": {
                "!type": "fn(accountId: string, webPropertyId: string, profileId: string, unsampledReportId: string)"
            }
        },
        "Analytics.Collection.Management.UploadsCollection": {
            "deleteUploadData": {
                "!type": "fn(resource: Analytics.Schema.AnalyticsDataimportDeleteUploadDataRequest, accountId: string, webPropertyId: string, customDataSourceId: string)"
            },
            "get": {
                "!type": "fn(accountId: string, webPropertyId: string, customDataSourceId: string, uploadId: string) -> Analytics.Schema.Upload"
            },
            "list": {
                "!type": "fn(accountId: string, webPropertyId: string, customDataSourceId: string) -> Analytics.Schema.Uploads"
            },
            "list ": {
                "!type": "fn(accountId: string, webPropertyId: string, customDataSourceId: string, optionalArgs: object) -> Analytics.Schema.Uploads"
            },
            "uploadData": {
                "!type": "fn(accountId: string, webPropertyId: string, customDataSourceId: string) -> Analytics.Schema.Upload"
            },
            "uploadData ": {
                "!type": "fn(accountId: string, webPropertyId: string, customDataSourceId: string, mediaData: Blob) -> Analytics.Schema.Upload"
            }
        },
        "Analytics.Collection.Management.WebPropertyAdWordsLinksCollection": {
            "get": {
                "!type": "fn(accountId: string, webPropertyId: string, webPropertyAdWordsLinkId: string) -> Analytics.Schema.EntityAdWordsLink"
            },
            "insert": {
                "!type": "fn(resource: Analytics.Schema.EntityAdWordsLink, accountId: string, webPropertyId: string) -> Analytics.Schema.EntityAdWordsLink"
            },
            "list": {
                "!type": "fn(accountId: string, webPropertyId: string) -> Analytics.Schema.EntityAdWordsLinks"
            },
            "list ": {
                "!type": "fn(accountId: string, webPropertyId: string, optionalArgs: object) -> Analytics.Schema.EntityAdWordsLinks"
            },
            "patch": {
                "!type": "fn(resource: Analytics.Schema.EntityAdWordsLink, accountId: string, webPropertyId: string, webPropertyAdWordsLinkId: string) -> Analytics.Schema.EntityAdWordsLink"
            },
            "remove": {
                "!type": "fn(accountId: string, webPropertyId: string, webPropertyAdWordsLinkId: string)"
            },
            "update": {
                "!type": "fn(resource: Analytics.Schema.EntityAdWordsLink, accountId: string, webPropertyId: string, webPropertyAdWordsLinkId: string) -> Analytics.Schema.EntityAdWordsLink"
            }
        },
        "Analytics.Collection.Management.WebpropertiesCollection": {
            "get": {
                "!type": "fn(accountId: string, webPropertyId: string) -> Analytics.Schema.Webproperty"
            },
            "insert": {
                "!type": "fn(resource: Analytics.Schema.Webproperty, accountId: string) -> Analytics.Schema.Webproperty"
            },
            "list": {
                "!type": "fn(accountId: string) -> Analytics.Schema.Webproperties"
            },
            "list ": {
                "!type": "fn(accountId: string, optionalArgs: object) -> Analytics.Schema.Webproperties"
            },
            "patch": {
                "!type": "fn(resource: Analytics.Schema.Webproperty, accountId: string, webPropertyId: string) -> Analytics.Schema.Webproperty"
            },
            "update": {
                "!type": "fn(resource: Analytics.Schema.Webproperty, accountId: string, webPropertyId: string) -> Analytics.Schema.Webproperty"
            }
        },
        "Analytics.Collection.Management.WebpropertyUserLinksCollection": {
            "insert": {
                "!type": "fn(resource: Analytics.Schema.EntityUserLink, accountId: string, webPropertyId: string) -> Analytics.Schema.EntityUserLink"
            },
            "list": {
                "!type": "fn(accountId: string, webPropertyId: string) -> Analytics.Schema.EntityUserLinks"
            },
            "list ": {
                "!type": "fn(accountId: string, webPropertyId: string, optionalArgs: object) -> Analytics.Schema.EntityUserLinks"
            },
            "remove": {
                "!type": "fn(accountId: string, webPropertyId: string, linkId: string)"
            },
            "update": {
                "!type": "fn(resource: Analytics.Schema.EntityUserLink, accountId: string, webPropertyId: string, linkId: string) -> Analytics.Schema.EntityUserLink"
            }
        },
        "Analytics.Collection.ManagementCollection": {
            "AccountSummaries": {
                "!type": "Analytics.Collection.Management.AccountSummariesCollection"
            },
            "AccountUserLinks": {
                "!type": "Analytics.Collection.Management.AccountUserLinksCollection"
            },
            "Accounts": {
                "!type": "Analytics.Collection.Management.AccountsCollection"
            },
            "CustomDataSources": {
                "!type": "Analytics.Collection.Management.CustomDataSourcesCollection"
            },
            "CustomDimensions": {
                "!type": "Analytics.Collection.Management.CustomDimensionsCollection"
            },
            "CustomMetrics": {
                "!type": "Analytics.Collection.Management.CustomMetricsCollection"
            },
            "Experiments": {
                "!type": "Analytics.Collection.Management.ExperimentsCollection"
            },
            "Filters": {
                "!type": "Analytics.Collection.Management.FiltersCollection"
            },
            "Goals": {
                "!type": "Analytics.Collection.Management.GoalsCollection"
            },
            "ProfileFilterLinks": {
                "!type": "Analytics.Collection.Management.ProfileFilterLinksCollection"
            },
            "ProfileUserLinks": {
                "!type": "Analytics.Collection.Management.ProfileUserLinksCollection"
            },
            "Profiles": {
                "!type": "Analytics.Collection.Management.ProfilesCollection"
            },
            "Segments": {
                "!type": "Analytics.Collection.Management.SegmentsCollection"
            },
            "UnsampledReports": {
                "!type": "Analytics.Collection.Management.UnsampledReportsCollection"
            },
            "Uploads": {
                "!type": "Analytics.Collection.Management.UploadsCollection"
            },
            "WebPropertyAdWordsLinks": {
                "!type": "Analytics.Collection.Management.WebPropertyAdWordsLinksCollection"
            },
            "Webproperties": {
                "!type": "Analytics.Collection.Management.WebpropertiesCollection"
            },
            "WebpropertyUserLinks": {
                "!type": "Analytics.Collection.Management.WebpropertyUserLinksCollection"
            }
        },
        "Analytics.Collection.Metadata.ColumnsCollection": {
            "list": {
                "!type": "fn(reportType: string) -> Analytics.Schema.Columns"
            }
        },
        "Analytics.Collection.MetadataCollection": {
            "Columns": {
                "!type": "Analytics.Collection.Metadata.ColumnsCollection"
            }
        },
        "Analytics.Collection.ProvisioningCollection": {
            "createAccountTicket": {
                "!type": "fn(resource: Analytics.Schema.AccountTicket) -> Analytics.Schema.AccountTicket"
            }
        },
        "Analytics.Schema.Account": {
            "childLink": {
                "!type": "Analytics.Schema.AccountChildLink"
            },
            "created": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "name": {
                "!type": "string"
            },
            "permissions": {
                "!type": "Analytics.Schema.AccountPermissions"
            },
            "selfLink": {
                "!type": "string"
            },
            "updated": {
                "!type": "string"
            }
        },
        "Analytics.Schema.AccountChildLink": {
            "href": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            }
        },
        "Analytics.Schema.AccountPermissions": {
            "effective": {
                "!type": "[string]"
            }
        },
        "Analytics.Schema.AccountRef": {
            "href": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "name": {
                "!type": "string"
            }
        },
        "Analytics.Schema.AccountSummaries": {
            "items": {
                "!type": "[Analytics.Schema.AccountSummary]"
            },
            "itemsPerPage": {
                "!type": "number"
            },
            "kind": {
                "!type": "string"
            },
            "nextLink": {
                "!type": "string"
            },
            "previousLink": {
                "!type": "string"
            },
            "startIndex": {
                "!type": "number"
            },
            "totalResults": {
                "!type": "number"
            },
            "username": {
                "!type": "string"
            }
        },
        "Analytics.Schema.AccountSummary": {
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "name": {
                "!type": "string"
            },
            "webProperties": {
                "!type": "[Analytics.Schema.WebPropertySummary]"
            }
        },
        "Analytics.Schema.AccountTicket": {
            "account": {
                "!type": "Analytics.Schema.Account"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "profile": {
                "!type": "Analytics.Schema.Profile"
            },
            "redirectUri": {
                "!type": "string"
            },
            "webproperty": {
                "!type": "Analytics.Schema.Webproperty"
            }
        },
        "Analytics.Schema.Accounts": {
            "items": {
                "!type": "[Analytics.Schema.Account]"
            },
            "itemsPerPage": {
                "!type": "number"
            },
            "kind": {
                "!type": "string"
            },
            "nextLink": {
                "!type": "string"
            },
            "previousLink": {
                "!type": "string"
            },
            "startIndex": {
                "!type": "number"
            },
            "totalResults": {
                "!type": "number"
            },
            "username": {
                "!type": "string"
            }
        },
        "Analytics.Schema.AdWordsAccount": {
            "autoTaggingEnabled": {
                "!type": "bool"
            },
            "customerId": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            }
        },
        "Analytics.Schema.AnalyticsDataimportDeleteUploadDataRequest": {
            "customDataImportUids": {
                "!type": "[string]"
            }
        },
        "Analytics.Schema.Column": {
            "attributes": {
                "!type": "object"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            }
        },
        "Analytics.Schema.Columns": {
            "attributeNames": {
                "!type": "[string]"
            },
            "etag": {
                "!type": "string"
            },
            "items": {
                "!type": "[Analytics.Schema.Column]"
            },
            "kind": {
                "!type": "string"
            },
            "totalResults": {
                "!type": "number"
            }
        },
        "Analytics.Schema.CustomDataSource": {
            "accountId": {
                "!type": "string"
            },
            "childLink": {
                "!type": "Analytics.Schema.CustomDataSourceChildLink"
            },
            "created": {
                "!type": "string"
            },
            "description": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "importBehavior": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "name": {
                "!type": "string"
            },
            "parentLink": {
                "!type": "Analytics.Schema.CustomDataSourceParentLink"
            },
            "profilesLinked": {
                "!type": "[string]"
            },
            "selfLink": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            },
            "updated": {
                "!type": "string"
            },
            "uploadType": {
                "!type": "string"
            },
            "webPropertyId": {
                "!type": "string"
            }
        },
        "Analytics.Schema.CustomDataSourceChildLink": {
            "href": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            }
        },
        "Analytics.Schema.CustomDataSourceParentLink": {
            "href": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            }
        },
        "Analytics.Schema.CustomDataSources": {
            "items": {
                "!type": "[Analytics.Schema.CustomDataSource]"
            },
            "itemsPerPage": {
                "!type": "number"
            },
            "kind": {
                "!type": "string"
            },
            "nextLink": {
                "!type": "string"
            },
            "previousLink": {
                "!type": "string"
            },
            "startIndex": {
                "!type": "number"
            },
            "totalResults": {
                "!type": "number"
            },
            "username": {
                "!type": "string"
            }
        },
        "Analytics.Schema.CustomDimension": {
            "accountId": {
                "!type": "string"
            },
            "active": {
                "!type": "bool"
            },
            "created": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "index": {
                "!type": "number"
            },
            "kind": {
                "!type": "string"
            },
            "name": {
                "!type": "string"
            },
            "parentLink": {
                "!type": "Analytics.Schema.CustomDimensionParentLink"
            },
            "scope": {
                "!type": "string"
            },
            "selfLink": {
                "!type": "string"
            },
            "updated": {
                "!type": "string"
            },
            "webPropertyId": {
                "!type": "string"
            }
        },
        "Analytics.Schema.CustomDimensionParentLink": {
            "href": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            }
        },
        "Analytics.Schema.CustomDimensions": {
            "items": {
                "!type": "[Analytics.Schema.CustomDimension]"
            },
            "itemsPerPage": {
                "!type": "number"
            },
            "kind": {
                "!type": "string"
            },
            "nextLink": {
                "!type": "string"
            },
            "previousLink": {
                "!type": "string"
            },
            "startIndex": {
                "!type": "number"
            },
            "totalResults": {
                "!type": "number"
            },
            "username": {
                "!type": "string"
            }
        },
        "Analytics.Schema.CustomMetric": {
            "accountId": {
                "!type": "string"
            },
            "active": {
                "!type": "bool"
            },
            "created": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "index": {
                "!type": "number"
            },
            "kind": {
                "!type": "string"
            },
            "max_value": {
                "!type": "string"
            },
            "min_value": {
                "!type": "string"
            },
            "name": {
                "!type": "string"
            },
            "parentLink": {
                "!type": "Analytics.Schema.CustomMetricParentLink"
            },
            "scope": {
                "!type": "string"
            },
            "selfLink": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            },
            "updated": {
                "!type": "string"
            },
            "webPropertyId": {
                "!type": "string"
            }
        },
        "Analytics.Schema.CustomMetricParentLink": {
            "href": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            }
        },
        "Analytics.Schema.CustomMetrics": {
            "items": {
                "!type": "[Analytics.Schema.CustomMetric]"
            },
            "itemsPerPage": {
                "!type": "number"
            },
            "kind": {
                "!type": "string"
            },
            "nextLink": {
                "!type": "string"
            },
            "previousLink": {
                "!type": "string"
            },
            "startIndex": {
                "!type": "number"
            },
            "totalResults": {
                "!type": "number"
            },
            "username": {
                "!type": "string"
            }
        },
        "Analytics.Schema.EntityAdWordsLink": {
            "adWordsAccounts": {
                "!type": "[Analytics.Schema.AdWordsAccount]"
            },
            "entity": {
                "!type": "Analytics.Schema.EntityAdWordsLinkEntity"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "name": {
                "!type": "string"
            },
            "profileIds": {
                "!type": "[string]"
            },
            "selfLink": {
                "!type": "string"
            }
        },
        "Analytics.Schema.EntityAdWordsLinkEntity": {
            "webPropertyRef": {
                "!type": "Analytics.Schema.WebPropertyRef"
            }
        },
        "Analytics.Schema.EntityAdWordsLinks": {
            "items": {
                "!type": "[Analytics.Schema.EntityAdWordsLink]"
            },
            "itemsPerPage": {
                "!type": "number"
            },
            "kind": {
                "!type": "string"
            },
            "nextLink": {
                "!type": "string"
            },
            "previousLink": {
                "!type": "string"
            },
            "startIndex": {
                "!type": "number"
            },
            "totalResults": {
                "!type": "number"
            }
        },
        "Analytics.Schema.EntityUserLink": {
            "entity": {
                "!type": "Analytics.Schema.EntityUserLinkEntity"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "permissions": {
                "!type": "Analytics.Schema.EntityUserLinkPermissions"
            },
            "selfLink": {
                "!type": "string"
            },
            "userRef": {
                "!type": "Analytics.Schema.UserRef"
            }
        },
        "Analytics.Schema.EntityUserLinkEntity": {
            "accountRef": {
                "!type": "Analytics.Schema.AccountRef"
            },
            "profileRef": {
                "!type": "Analytics.Schema.ProfileRef"
            },
            "webPropertyRef": {
                "!type": "Analytics.Schema.WebPropertyRef"
            }
        },
        "Analytics.Schema.EntityUserLinkPermissions": {
            "effective": {
                "!type": "[string]"
            },
            "local": {
                "!type": "[string]"
            }
        },
        "Analytics.Schema.EntityUserLinks": {
            "items": {
                "!type": "[Analytics.Schema.EntityUserLink]"
            },
            "itemsPerPage": {
                "!type": "number"
            },
            "kind": {
                "!type": "string"
            },
            "nextLink": {
                "!type": "string"
            },
            "previousLink": {
                "!type": "string"
            },
            "startIndex": {
                "!type": "number"
            },
            "totalResults": {
                "!type": "number"
            }
        },
        "Analytics.Schema.Experiment": {
            "accountId": {
                "!type": "string"
            },
            "created": {
                "!type": "string"
            },
            "description": {
                "!type": "string"
            },
            "editableInGaUi": {
                "!type": "bool"
            },
            "endTime": {
                "!type": "string"
            },
            "equalWeighting": {
                "!type": "bool"
            },
            "id": {
                "!type": "string"
            },
            "internalWebPropertyId": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "minimumExperimentLengthInDays": {
                "!type": "number"
            },
            "name": {
                "!type": "string"
            },
            "objectiveMetric": {
                "!type": "string"
            },
            "optimizationType": {
                "!type": "string"
            },
            "parentLink": {
                "!type": "Analytics.Schema.ExperimentParentLink"
            },
            "profileId": {
                "!type": "string"
            },
            "reasonExperimentEnded": {
                "!type": "string"
            },
            "rewriteVariationUrlsAsOriginal": {
                "!type": "bool"
            },
            "selfLink": {
                "!type": "string"
            },
            "servingFramework": {
                "!type": "string"
            },
            "snippet": {
                "!type": "string"
            },
            "startTime": {
                "!type": "string"
            },
            "status": {
                "!type": "string"
            },
            "trafficCoverage": {
                "!type": "number"
            },
            "updated": {
                "!type": "string"
            },
            "variations": {
                "!type": "[Analytics.Schema.ExperimentVariations]"
            },
            "webPropertyId": {
                "!type": "string"
            },
            "winnerConfidenceLevel": {
                "!type": "number"
            },
            "winnerFound": {
                "!type": "bool"
            }
        },
        "Analytics.Schema.ExperimentParentLink": {
            "href": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            }
        },
        "Analytics.Schema.ExperimentVariations": {
            "name": {
                "!type": "string"
            },
            "status": {
                "!type": "string"
            },
            "url": {
                "!type": "string"
            },
            "weight": {
                "!type": "number"
            },
            "won": {
                "!type": "bool"
            }
        },
        "Analytics.Schema.Experiments": {
            "items": {
                "!type": "[Analytics.Schema.Experiment]"
            },
            "itemsPerPage": {
                "!type": "number"
            },
            "kind": {
                "!type": "string"
            },
            "nextLink": {
                "!type": "string"
            },
            "previousLink": {
                "!type": "string"
            },
            "startIndex": {
                "!type": "number"
            },
            "totalResults": {
                "!type": "number"
            },
            "username": {
                "!type": "string"
            }
        },
        "Analytics.Schema.Filter": {
            "accountId": {
                "!type": "string"
            },
            "advancedDetails": {
                "!type": "Analytics.Schema.FilterAdvancedDetails"
            },
            "created": {
                "!type": "string"
            },
            "excludeDetails": {
                "!type": "Analytics.Schema.FilterExpression"
            },
            "id": {
                "!type": "string"
            },
            "includeDetails": {
                "!type": "Analytics.Schema.FilterExpression"
            },
            "kind": {
                "!type": "string"
            },
            "lowercaseDetails": {
                "!type": "Analytics.Schema.FilterLowercaseDetails"
            },
            "name": {
                "!type": "string"
            },
            "parentLink": {
                "!type": "Analytics.Schema.FilterParentLink"
            },
            "searchAndReplaceDetails": {
                "!type": "Analytics.Schema.FilterSearchAndReplaceDetails"
            },
            "selfLink": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            },
            "updated": {
                "!type": "string"
            },
            "uppercaseDetails": {
                "!type": "Analytics.Schema.FilterUppercaseDetails"
            }
        },
        "Analytics.Schema.FilterAdvancedDetails": {
            "caseSensitive": {
                "!type": "bool"
            },
            "extractA": {
                "!type": "string"
            },
            "extractB": {
                "!type": "string"
            },
            "fieldA": {
                "!type": "string"
            },
            "fieldAIndex": {
                "!type": "number"
            },
            "fieldARequired": {
                "!type": "bool"
            },
            "fieldB": {
                "!type": "string"
            },
            "fieldBIndex": {
                "!type": "number"
            },
            "fieldBRequired": {
                "!type": "bool"
            },
            "outputConstructor": {
                "!type": "string"
            },
            "outputToField": {
                "!type": "string"
            },
            "outputToFieldIndex": {
                "!type": "number"
            },
            "overrideOutputField": {
                "!type": "bool"
            }
        },
        "Analytics.Schema.FilterExpression": {
            "caseSensitive": {
                "!type": "bool"
            },
            "expressionValue": {
                "!type": "string"
            },
            "field": {
                "!type": "string"
            },
            "fieldIndex": {
                "!type": "number"
            },
            "kind": {
                "!type": "string"
            },
            "matchType": {
                "!type": "string"
            }
        },
        "Analytics.Schema.FilterLowercaseDetails": {
            "field": {
                "!type": "string"
            },
            "fieldIndex": {
                "!type": "number"
            }
        },
        "Analytics.Schema.FilterParentLink": {
            "href": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            }
        },
        "Analytics.Schema.FilterRef": {
            "accountId": {
                "!type": "string"
            },
            "href": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "name": {
                "!type": "string"
            }
        },
        "Analytics.Schema.FilterSearchAndReplaceDetails": {
            "caseSensitive": {
                "!type": "bool"
            },
            "field": {
                "!type": "string"
            },
            "fieldIndex": {
                "!type": "number"
            },
            "replaceString": {
                "!type": "string"
            },
            "searchString": {
                "!type": "string"
            }
        },
        "Analytics.Schema.FilterUppercaseDetails": {
            "field": {
                "!type": "string"
            },
            "fieldIndex": {
                "!type": "number"
            }
        },
        "Analytics.Schema.Filters": {
            "items": {
                "!type": "[Analytics.Schema.Filter]"
            },
            "itemsPerPage": {
                "!type": "number"
            },
            "kind": {
                "!type": "string"
            },
            "nextLink": {
                "!type": "string"
            },
            "previousLink": {
                "!type": "string"
            },
            "startIndex": {
                "!type": "number"
            },
            "totalResults": {
                "!type": "number"
            },
            "username": {
                "!type": "string"
            }
        },
        "Analytics.Schema.GaData": {
            "columnHeaders": {
                "!type": "[Analytics.Schema.GaDataColumnHeaders]"
            },
            "containsSampledData": {
                "!type": "bool"
            },
            "dataTable": {
                "!type": "Analytics.Schema.GaDataDataTable"
            },
            "id": {
                "!type": "string"
            },
            "itemsPerPage": {
                "!type": "number"
            },
            "kind": {
                "!type": "string"
            },
            "nextLink": {
                "!type": "string"
            },
            "previousLink": {
                "!type": "string"
            },
            "profileInfo": {
                "!type": "Analytics.Schema.GaDataProfileInfo"
            },
            "query": {
                "!type": "Analytics.Schema.GaDataQuery"
            },
            "rows": {
                "!type": "[[string]]"
            },
            "sampleSize": {
                "!type": "string"
            },
            "sampleSpace": {
                "!type": "string"
            },
            "selfLink": {
                "!type": "string"
            },
            "totalResults": {
                "!type": "number"
            },
            "totalsForAllResults": {
                "!type": "object"
            }
        },
        "Analytics.Schema.GaDataColumnHeaders": {
            "columnType": {
                "!type": "string"
            },
            "dataType": {
                "!type": "string"
            },
            "name": {
                "!type": "string"
            }
        },
        "Analytics.Schema.GaDataDataTable": {
            "cols": {
                "!type": "[Analytics.Schema.GaDataDataTableCols]"
            },
            "rows": {
                "!type": "[Analytics.Schema.GaDataDataTableRows]"
            }
        },
        "Analytics.Schema.GaDataDataTableCols": {
            "id": {
                "!type": "string"
            },
            "label": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            }
        },
        "Analytics.Schema.GaDataDataTableRows": {
            "c": {
                "!type": "[Analytics.Schema.GaDataDataTableRowsC]"
            }
        },
        "Analytics.Schema.GaDataDataTableRowsC": {
            "v": {
                "!type": "string"
            }
        },
        "Analytics.Schema.GaDataProfileInfo": {
            "accountId": {
                "!type": "string"
            },
            "internalWebPropertyId": {
                "!type": "string"
            },
            "profileId": {
                "!type": "string"
            },
            "profileName": {
                "!type": "string"
            },
            "tableId": {
                "!type": "string"
            },
            "webPropertyId": {
                "!type": "string"
            }
        },
        "Analytics.Schema.GaDataQuery": {
            "dimensions": {
                "!type": "string"
            },
            "enddate": {
                "!type": "string"
            },
            "filters": {
                "!type": "string"
            },
            "ids": {
                "!type": "string"
            },
            "maxresults": {
                "!type": "number"
            },
            "metrics": {
                "!type": "[string]"
            },
            "samplingLevel": {
                "!type": "string"
            },
            "segment": {
                "!type": "string"
            },
            "sort": {
                "!type": "[string]"
            },
            "startdate": {
                "!type": "string"
            },
            "startindex": {
                "!type": "number"
            }
        },
        "Analytics.Schema.Goal": {
            "accountId": {
                "!type": "string"
            },
            "active": {
                "!type": "bool"
            },
            "created": {
                "!type": "string"
            },
            "eventDetails": {
                "!type": "Analytics.Schema.GoalEventDetails"
            },
            "id": {
                "!type": "string"
            },
            "internalWebPropertyId": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "name": {
                "!type": "string"
            },
            "parentLink": {
                "!type": "Analytics.Schema.GoalParentLink"
            },
            "profileId": {
                "!type": "string"
            },
            "selfLink": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            },
            "updated": {
                "!type": "string"
            },
            "urlDestinationDetails": {
                "!type": "Analytics.Schema.GoalUrlDestinationDetails"
            },
            "value": {
                "!type": "number"
            },
            "visitNumPagesDetails": {
                "!type": "Analytics.Schema.GoalVisitNumPagesDetails"
            },
            "visitTimeOnSiteDetails": {
                "!type": "Analytics.Schema.GoalVisitTimeOnSiteDetails"
            },
            "webPropertyId": {
                "!type": "string"
            }
        },
        "Analytics.Schema.GoalEventDetails": {
            "eventConditions": {
                "!type": "[Analytics.Schema.GoalEventDetailsEventConditions]"
            },
            "useEventValue": {
                "!type": "bool"
            }
        },
        "Analytics.Schema.GoalEventDetailsEventConditions": {
            "comparisonType": {
                "!type": "string"
            },
            "comparisonValue": {
                "!type": "string"
            },
            "expression": {
                "!type": "string"
            },
            "matchType": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            }
        },
        "Analytics.Schema.GoalParentLink": {
            "href": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            }
        },
        "Analytics.Schema.GoalUrlDestinationDetails": {
            "caseSensitive": {
                "!type": "bool"
            },
            "firstStepRequired": {
                "!type": "bool"
            },
            "matchType": {
                "!type": "string"
            },
            "steps": {
                "!type": "[Analytics.Schema.GoalUrlDestinationDetailsSteps]"
            },
            "url": {
                "!type": "string"
            }
        },
        "Analytics.Schema.GoalUrlDestinationDetailsSteps": {
            "name": {
                "!type": "string"
            },
            "number": {
                "!type": "number"
            },
            "url": {
                "!type": "string"
            }
        },
        "Analytics.Schema.GoalVisitNumPagesDetails": {
            "comparisonType": {
                "!type": "string"
            },
            "comparisonValue": {
                "!type": "string"
            }
        },
        "Analytics.Schema.GoalVisitTimeOnSiteDetails": {
            "comparisonType": {
                "!type": "string"
            },
            "comparisonValue": {
                "!type": "string"
            }
        },
        "Analytics.Schema.Goals": {
            "items": {
                "!type": "[Analytics.Schema.Goal]"
            },
            "itemsPerPage": {
                "!type": "number"
            },
            "kind": {
                "!type": "string"
            },
            "nextLink": {
                "!type": "string"
            },
            "previousLink": {
                "!type": "string"
            },
            "startIndex": {
                "!type": "number"
            },
            "totalResults": {
                "!type": "number"
            },
            "username": {
                "!type": "string"
            }
        },
        "Analytics.Schema.McfData": {
            "columnHeaders": {
                "!type": "[Analytics.Schema.McfDataColumnHeaders]"
            },
            "containsSampledData": {
                "!type": "bool"
            },
            "id": {
                "!type": "string"
            },
            "itemsPerPage": {
                "!type": "number"
            },
            "kind": {
                "!type": "string"
            },
            "nextLink": {
                "!type": "string"
            },
            "previousLink": {
                "!type": "string"
            },
            "profileInfo": {
                "!type": "Analytics.Schema.McfDataProfileInfo"
            },
            "query": {
                "!type": "Analytics.Schema.McfDataQuery"
            },
            "rows": {
                "!type": "[[Analytics.Schema.McfDataRows]]"
            },
            "sampleSize": {
                "!type": "string"
            },
            "sampleSpace": {
                "!type": "string"
            },
            "selfLink": {
                "!type": "string"
            },
            "totalResults": {
                "!type": "number"
            },
            "totalsForAllResults": {
                "!type": "object"
            }
        },
        "Analytics.Schema.McfDataColumnHeaders": {
            "columnType": {
                "!type": "string"
            },
            "dataType": {
                "!type": "string"
            },
            "name": {
                "!type": "string"
            }
        },
        "Analytics.Schema.McfDataProfileInfo": {
            "accountId": {
                "!type": "string"
            },
            "internalWebPropertyId": {
                "!type": "string"
            },
            "profileId": {
                "!type": "string"
            },
            "profileName": {
                "!type": "string"
            },
            "tableId": {
                "!type": "string"
            },
            "webPropertyId": {
                "!type": "string"
            }
        },
        "Analytics.Schema.McfDataQuery": {
            "dimensions": {
                "!type": "string"
            },
            "enddate": {
                "!type": "string"
            },
            "filters": {
                "!type": "string"
            },
            "ids": {
                "!type": "string"
            },
            "maxresults": {
                "!type": "number"
            },
            "metrics": {
                "!type": "[string]"
            },
            "samplingLevel": {
                "!type": "string"
            },
            "segment": {
                "!type": "string"
            },
            "sort": {
                "!type": "[string]"
            },
            "startdate": {
                "!type": "string"
            },
            "startindex": {
                "!type": "number"
            }
        },
        "Analytics.Schema.McfDataRows": {
            "conversionPathValue": {
                "!type": "[Analytics.Schema.McfDataRowsConversionPathValue]"
            },
            "primitiveValue": {
                "!type": "string"
            }
        },
        "Analytics.Schema.McfDataRowsConversionPathValue": {
            "interactionType": {
                "!type": "string"
            },
            "nodeValue": {
                "!type": "string"
            }
        },
        "Analytics.Schema.Profile": {
            "accountId": {
                "!type": "string"
            },
            "botFilteringEnabled": {
                "!type": "bool"
            },
            "childLink": {
                "!type": "Analytics.Schema.ProfileChildLink"
            },
            "created": {
                "!type": "string"
            },
            "currency": {
                "!type": "string"
            },
            "defaultPage": {
                "!type": "string"
            },
            "eCommerceTracking": {
                "!type": "bool"
            },
            "enhancedECommerceTracking": {
                "!type": "bool"
            },
            "excludeQueryParameters": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "internalWebPropertyId": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "name": {
                "!type": "string"
            },
            "parentLink": {
                "!type": "Analytics.Schema.ProfileParentLink"
            },
            "permissions": {
                "!type": "Analytics.Schema.ProfilePermissions"
            },
            "selfLink": {
                "!type": "string"
            },
            "siteSearchCategoryParameters": {
                "!type": "string"
            },
            "siteSearchQueryParameters": {
                "!type": "string"
            },
            "stripSiteSearchCategoryParameters": {
                "!type": "bool"
            },
            "stripSiteSearchQueryParameters": {
                "!type": "bool"
            },
            "timezone": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            },
            "updated": {
                "!type": "string"
            },
            "webPropertyId": {
                "!type": "string"
            },
            "websiteUrl": {
                "!type": "string"
            }
        },
        "Analytics.Schema.ProfileChildLink": {
            "href": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            }
        },
        "Analytics.Schema.ProfileFilterLink": {
            "filterRef": {
                "!type": "Analytics.Schema.FilterRef"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "profileRef": {
                "!type": "Analytics.Schema.ProfileRef"
            },
            "rank": {
                "!type": "number"
            },
            "selfLink": {
                "!type": "string"
            }
        },
        "Analytics.Schema.ProfileFilterLinks": {
            "items": {
                "!type": "[Analytics.Schema.ProfileFilterLink]"
            },
            "itemsPerPage": {
                "!type": "number"
            },
            "kind": {
                "!type": "string"
            },
            "nextLink": {
                "!type": "string"
            },
            "previousLink": {
                "!type": "string"
            },
            "startIndex": {
                "!type": "number"
            },
            "totalResults": {
                "!type": "number"
            },
            "username": {
                "!type": "string"
            }
        },
        "Analytics.Schema.ProfileParentLink": {
            "href": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            }
        },
        "Analytics.Schema.ProfilePermissions": {
            "effective": {
                "!type": "[string]"
            }
        },
        "Analytics.Schema.ProfileRef": {
            "accountId": {
                "!type": "string"
            },
            "href": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "internalWebPropertyId": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "name": {
                "!type": "string"
            },
            "webPropertyId": {
                "!type": "string"
            }
        },
        "Analytics.Schema.ProfileSummary": {
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "name": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            }
        },
        "Analytics.Schema.Profiles": {
            "items": {
                "!type": "[Analytics.Schema.Profile]"
            },
            "itemsPerPage": {
                "!type": "number"
            },
            "kind": {
                "!type": "string"
            },
            "nextLink": {
                "!type": "string"
            },
            "previousLink": {
                "!type": "string"
            },
            "startIndex": {
                "!type": "number"
            },
            "totalResults": {
                "!type": "number"
            },
            "username": {
                "!type": "string"
            }
        },
        "Analytics.Schema.RealtimeData": {
            "columnHeaders": {
                "!type": "[Analytics.Schema.RealtimeDataColumnHeaders]"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "profileInfo": {
                "!type": "Analytics.Schema.RealtimeDataProfileInfo"
            },
            "query": {
                "!type": "Analytics.Schema.RealtimeDataQuery"
            },
            "rows": {
                "!type": "[[string]]"
            },
            "selfLink": {
                "!type": "string"
            },
            "totalResults": {
                "!type": "number"
            },
            "totalsForAllResults": {
                "!type": "object"
            }
        },
        "Analytics.Schema.RealtimeDataColumnHeaders": {
            "columnType": {
                "!type": "string"
            },
            "dataType": {
                "!type": "string"
            },
            "name": {
                "!type": "string"
            }
        },
        "Analytics.Schema.RealtimeDataProfileInfo": {
            "accountId": {
                "!type": "string"
            },
            "internalWebPropertyId": {
                "!type": "string"
            },
            "profileId": {
                "!type": "string"
            },
            "profileName": {
                "!type": "string"
            },
            "tableId": {
                "!type": "string"
            },
            "webPropertyId": {
                "!type": "string"
            }
        },
        "Analytics.Schema.RealtimeDataQuery": {
            "dimensions": {
                "!type": "string"
            },
            "filters": {
                "!type": "string"
            },
            "ids": {
                "!type": "string"
            },
            "maxresults": {
                "!type": "number"
            },
            "metrics": {
                "!type": "[string]"
            },
            "sort": {
                "!type": "[string]"
            }
        },
        "Analytics.Schema.Segment": {
            "created": {
                "!type": "string"
            },
            "definition": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "name": {
                "!type": "string"
            },
            "segmentId": {
                "!type": "string"
            },
            "selfLink": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            },
            "updated": {
                "!type": "string"
            }
        },
        "Analytics.Schema.Segments": {
            "items": {
                "!type": "[Analytics.Schema.Segment]"
            },
            "itemsPerPage": {
                "!type": "number"
            },
            "kind": {
                "!type": "string"
            },
            "nextLink": {
                "!type": "string"
            },
            "previousLink": {
                "!type": "string"
            },
            "startIndex": {
                "!type": "number"
            },
            "totalResults": {
                "!type": "number"
            },
            "username": {
                "!type": "string"
            }
        },
        "Analytics.Schema.UnsampledReport": {
            "accountId": {
                "!type": "string"
            },
            "cloudStorageDownloadDetails": {
                "!type": "Analytics.Schema.UnsampledReportCloudStorageDownloadDetails"
            },
            "created": {
                "!type": "string"
            },
            "dimensions": {
                "!type": "string"
            },
            "downloadType": {
                "!type": "string"
            },
            "driveDownloadDetails": {
                "!type": "Analytics.Schema.UnsampledReportDriveDownloadDetails"
            },
            "enddate": {
                "!type": "string"
            },
            "filters": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "metrics": {
                "!type": "string"
            },
            "profileId": {
                "!type": "string"
            },
            "segment": {
                "!type": "string"
            },
            "selfLink": {
                "!type": "string"
            },
            "startdate": {
                "!type": "string"
            },
            "status": {
                "!type": "string"
            },
            "title": {
                "!type": "string"
            },
            "updated": {
                "!type": "string"
            },
            "webPropertyId": {
                "!type": "string"
            }
        },
        "Analytics.Schema.UnsampledReportCloudStorageDownloadDetails": {
            "bucketId": {
                "!type": "string"
            },
            "objectId": {
                "!type": "string"
            }
        },
        "Analytics.Schema.UnsampledReportDriveDownloadDetails": {
            "documentId": {
                "!type": "string"
            }
        },
        "Analytics.Schema.UnsampledReports": {
            "items": {
                "!type": "[Analytics.Schema.UnsampledReport]"
            },
            "itemsPerPage": {
                "!type": "number"
            },
            "kind": {
                "!type": "string"
            },
            "nextLink": {
                "!type": "string"
            },
            "previousLink": {
                "!type": "string"
            },
            "startIndex": {
                "!type": "number"
            },
            "totalResults": {
                "!type": "number"
            },
            "username": {
                "!type": "string"
            }
        },
        "Analytics.Schema.Upload": {
            "accountId": {
                "!type": "string"
            },
            "customDataSourceId": {
                "!type": "string"
            },
            "errors": {
                "!type": "[string]"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "status": {
                "!type": "string"
            }
        },
        "Analytics.Schema.Uploads": {
            "items": {
                "!type": "[Analytics.Schema.Upload]"
            },
            "itemsPerPage": {
                "!type": "number"
            },
            "kind": {
                "!type": "string"
            },
            "nextLink": {
                "!type": "string"
            },
            "previousLink": {
                "!type": "string"
            },
            "startIndex": {
                "!type": "number"
            },
            "totalResults": {
                "!type": "number"
            }
        },
        "Analytics.Schema.UserRef": {
            "email": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            }
        },
        "Analytics.Schema.WebPropertyRef": {
            "accountId": {
                "!type": "string"
            },
            "href": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "internalWebPropertyId": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "name": {
                "!type": "string"
            }
        },
        "Analytics.Schema.WebPropertySummary": {
            "id": {
                "!type": "string"
            },
            "internalWebPropertyId": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "level": {
                "!type": "string"
            },
            "name": {
                "!type": "string"
            },
            "profiles": {
                "!type": "[Analytics.Schema.ProfileSummary]"
            },
            "websiteUrl": {
                "!type": "string"
            }
        },
        "Analytics.Schema.Webproperties": {
            "items": {
                "!type": "[Analytics.Schema.Webproperty]"
            },
            "itemsPerPage": {
                "!type": "number"
            },
            "kind": {
                "!type": "string"
            },
            "nextLink": {
                "!type": "string"
            },
            "previousLink": {
                "!type": "string"
            },
            "startIndex": {
                "!type": "number"
            },
            "totalResults": {
                "!type": "number"
            },
            "username": {
                "!type": "string"
            }
        },
        "Analytics.Schema.Webproperty": {
            "accountId": {
                "!type": "string"
            },
            "childLink": {
                "!type": "Analytics.Schema.WebpropertyChildLink"
            },
            "created": {
                "!type": "string"
            },
            "defaultProfileId": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "industryVertical": {
                "!type": "string"
            },
            "internalWebPropertyId": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "level": {
                "!type": "string"
            },
            "name": {
                "!type": "string"
            },
            "parentLink": {
                "!type": "Analytics.Schema.WebpropertyParentLink"
            },
            "permissions": {
                "!type": "Analytics.Schema.WebpropertyPermissions"
            },
            "profileCount": {
                "!type": "number"
            },
            "selfLink": {
                "!type": "string"
            },
            "updated": {
                "!type": "string"
            },
            "websiteUrl": {
                "!type": "string"
            }
        },
        "Analytics.Schema.WebpropertyChildLink": {
            "href": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            }
        },
        "Analytics.Schema.WebpropertyParentLink": {
            "href": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            }
        },
        "Analytics.Schema.WebpropertyPermissions": {
            "effective": {
                "!type": "[string]"
            }
        },
        "Bigquery.Collection.DatasetsCollection": {
            "get": {
                "!type": "fn(projectId: string, datasetId: string) -> Bigquery.Schema.Dataset"
            },
            "insert": {
                "!type": "fn(resource: Bigquery.Schema.Dataset, projectId: string) -> Bigquery.Schema.Dataset"
            },
            "list": {
                "!type": "fn(projectId: string) -> Bigquery.Schema.DatasetList"
            },
            "list ": {
                "!type": "fn(projectId: string, optionalArgs: object) -> Bigquery.Schema.DatasetList"
            },
            "patch": {
                "!type": "fn(resource: Bigquery.Schema.Dataset, projectId: string, datasetId: string) -> Bigquery.Schema.Dataset"
            },
            "remove": {
                "!type": "fn(projectId: string, datasetId: string)"
            },
            "remove ": {
                "!type": "fn(projectId: string, datasetId: string, optionalArgs: object)"
            },
            "update": {
                "!type": "fn(resource: Bigquery.Schema.Dataset, projectId: string, datasetId: string) -> Bigquery.Schema.Dataset"
            }
        },
        "Bigquery.Collection.JobsCollection": {
            "cancel": {
                "!type": "fn(projectId: string, jobId: string) -> Bigquery.Schema.JobCancelResponse"
            },
            "get": {
                "!type": "fn(projectId: string, jobId: string) -> Bigquery.Schema.Job"
            },
            "getQueryResults": {
                "!type": "fn(projectId: string, jobId: string) -> Bigquery.Schema.GetQueryResultsResponse"
            },
            "getQueryResults ": {
                "!type": "fn(projectId: string, jobId: string, optionalArgs: object) -> Bigquery.Schema.GetQueryResultsResponse"
            },
            "insert": {
                "!type": "fn(resource: Bigquery.Schema.Job, projectId: string) -> Bigquery.Schema.Job"
            },
            "insert ": {
                "!type": "fn(resource: Bigquery.Schema.Job, projectId: string, mediaData: Blob) -> Bigquery.Schema.Job"
            },
            "list": {
                "!type": "fn(projectId: string) -> Bigquery.Schema.JobList"
            },
            "list ": {
                "!type": "fn(projectId: string, optionalArgs: object) -> Bigquery.Schema.JobList"
            },
            "query": {
                "!type": "fn(resource: Bigquery.Schema.QueryRequest, projectId: string) -> Bigquery.Schema.QueryResponse"
            }
        },
        "Bigquery.Collection.ProjectsCollection": {
            "list": {
                "!type": "fn() -> Bigquery.Schema.ProjectList"
            },
            "list ": {
                "!type": "fn(optionalArgs: object) -> Bigquery.Schema.ProjectList"
            }
        },
        "Bigquery.Collection.TabledataCollection": {
            "insertAll": {
                "!type": "fn(resource: Bigquery.Schema.TableDataInsertAllRequest, projectId: string, datasetId: string, tableId: string) -> Bigquery.Schema.TableDataInsertAllResponse"
            },
            "list": {
                "!type": "fn(projectId: string, datasetId: string, tableId: string) -> Bigquery.Schema.TableDataList"
            },
            "list ": {
                "!type": "fn(projectId: string, datasetId: string, tableId: string, optionalArgs: object) -> Bigquery.Schema.TableDataList"
            }
        },
        "Bigquery.Collection.TablesCollection": {
            "get": {
                "!type": "fn(projectId: string, datasetId: string, tableId: string) -> Bigquery.Schema.Table"
            },
            "insert": {
                "!type": "fn(resource: Bigquery.Schema.Table, projectId: string, datasetId: string) -> Bigquery.Schema.Table"
            },
            "list": {
                "!type": "fn(projectId: string, datasetId: string) -> Bigquery.Schema.TableList"
            },
            "list ": {
                "!type": "fn(projectId: string, datasetId: string, optionalArgs: object) -> Bigquery.Schema.TableList"
            },
            "patch": {
                "!type": "fn(resource: Bigquery.Schema.Table, projectId: string, datasetId: string, tableId: string) -> Bigquery.Schema.Table"
            },
            "remove": {
                "!type": "fn(projectId: string, datasetId: string, tableId: string)"
            },
            "update": {
                "!type": "fn(resource: Bigquery.Schema.Table, projectId: string, datasetId: string, tableId: string) -> Bigquery.Schema.Table"
            }
        },
        "Bigquery.Schema.CsvOptions": {
            "allowJaggedRows": {
                "!type": "bool"
            },
            "allowQuotedNewlines": {
                "!type": "bool"
            },
            "encoding": {
                "!type": "string"
            },
            "fieldDelimiter": {
                "!type": "string"
            },
            "quote": {
                "!type": "string"
            },
            "skipLeadingRows": {
                "!type": "number"
            }
        },
        "Bigquery.Schema.Dataset": {
            "access": {
                "!type": "[Bigquery.Schema.DatasetAccess]"
            },
            "creationTime": {
                "!type": "string"
            },
            "datasetReference": {
                "!type": "Bigquery.Schema.DatasetReference"
            },
            "defaultTableExpirationMs": {
                "!type": "string"
            },
            "description": {
                "!type": "string"
            },
            "etag": {
                "!type": "string"
            },
            "friendlyName": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "lastModifiedTime": {
                "!type": "string"
            },
            "location": {
                "!type": "string"
            },
            "selfLink": {
                "!type": "string"
            }
        },
        "Bigquery.Schema.DatasetAccess": {
            "domain": {
                "!type": "string"
            },
            "groupByEmail": {
                "!type": "string"
            },
            "role": {
                "!type": "string"
            },
            "specialGroup": {
                "!type": "string"
            },
            "userByEmail": {
                "!type": "string"
            },
            "view": {
                "!type": "Bigquery.Schema.TableReference"
            }
        },
        "Bigquery.Schema.DatasetList": {
            "datasets": {
                "!type": "[Bigquery.Schema.DatasetListDatasets]"
            },
            "etag": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            }
        },
        "Bigquery.Schema.DatasetListDatasets": {
            "datasetReference": {
                "!type": "Bigquery.Schema.DatasetReference"
            },
            "friendlyName": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            }
        },
        "Bigquery.Schema.DatasetReference": {
            "datasetId": {
                "!type": "string"
            },
            "projectId": {
                "!type": "string"
            }
        },
        "Bigquery.Schema.ErrorProto": {
            "debugInfo": {
                "!type": "string"
            },
            "location": {
                "!type": "string"
            },
            "message": {
                "!type": "string"
            },
            "reason": {
                "!type": "string"
            }
        },
        "Bigquery.Schema.ExplainQueryStage": {
            "computeRatioAvg": {
                "!type": "number"
            },
            "computeRatioMax": {
                "!type": "number"
            },
            "id": {
                "!type": "string"
            },
            "name": {
                "!type": "string"
            },
            "readRatioAvg": {
                "!type": "number"
            },
            "readRatioMax": {
                "!type": "number"
            },
            "recordsRead": {
                "!type": "string"
            },
            "recordsWritten": {
                "!type": "string"
            },
            "steps": {
                "!type": "[Bigquery.Schema.ExplainQueryStep]"
            },
            "waitRatioAvg": {
                "!type": "number"
            },
            "waitRatioMax": {
                "!type": "number"
            },
            "writeRatioAvg": {
                "!type": "number"
            },
            "writeRatioMax": {
                "!type": "number"
            }
        },
        "Bigquery.Schema.ExplainQueryStep": {
            "kind": {
                "!type": "string"
            },
            "substeps": {
                "!type": "[string]"
            }
        },
        "Bigquery.Schema.ExternalDataConfiguration": {
            "compression": {
                "!type": "string"
            },
            "csvOptions": {
                "!type": "Bigquery.Schema.CsvOptions"
            },
            "ignoreUnknownValues": {
                "!type": "bool"
            },
            "maxBadRecords": {
                "!type": "number"
            },
            "schema": {
                "!type": "Bigquery.Schema.TableSchema"
            },
            "sourceFormat": {
                "!type": "string"
            },
            "sourceUris": {
                "!type": "[string]"
            }
        },
        "Bigquery.Schema.GetQueryResultsResponse": {
            "cacheHit": {
                "!type": "bool"
            },
            "errors": {
                "!type": "[Bigquery.Schema.ErrorProto]"
            },
            "etag": {
                "!type": "string"
            },
            "jobComplete": {
                "!type": "bool"
            },
            "jobReference": {
                "!type": "Bigquery.Schema.JobReference"
            },
            "kind": {
                "!type": "string"
            },
            "pageToken": {
                "!type": "string"
            },
            "rows": {
                "!type": "[Bigquery.Schema.TableRow]"
            },
            "schema": {
                "!type": "Bigquery.Schema.TableSchema"
            },
            "totalBytesProcessed": {
                "!type": "string"
            },
            "totalRows": {
                "!type": "string"
            }
        },
        "Bigquery.Schema.Job": {
            "configuration": {
                "!type": "Bigquery.Schema.JobConfiguration"
            },
            "etag": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "jobReference": {
                "!type": "Bigquery.Schema.JobReference"
            },
            "kind": {
                "!type": "string"
            },
            "selfLink": {
                "!type": "string"
            },
            "statistics": {
                "!type": "Bigquery.Schema.JobStatistics"
            },
            "status": {
                "!type": "Bigquery.Schema.JobStatus"
            },
            "user_email": {
                "!type": "string"
            }
        },
        "Bigquery.Schema.JobCancelResponse": {
            "job": {
                "!type": "Bigquery.Schema.Job"
            },
            "kind": {
                "!type": "string"
            }
        },
        "Bigquery.Schema.JobConfiguration": {
            "copy": {
                "!type": "Bigquery.Schema.JobConfigurationTableCopy"
            },
            "dryRun": {
                "!type": "bool"
            },
            "extract": {
                "!type": "Bigquery.Schema.JobConfigurationExtract"
            },
            "load": {
                "!type": "Bigquery.Schema.JobConfigurationLoad"
            },
            "query": {
                "!type": "Bigquery.Schema.JobConfigurationQuery"
            }
        },
        "Bigquery.Schema.JobConfigurationExtract": {
            "compression": {
                "!type": "string"
            },
            "destinationFormat": {
                "!type": "string"
            },
            "destinationUri": {
                "!type": "string"
            },
            "destinationUris": {
                "!type": "[string]"
            },
            "fieldDelimiter": {
                "!type": "string"
            },
            "printHeader": {
                "!type": "bool"
            },
            "sourceTable": {
                "!type": "Bigquery.Schema.TableReference"
            }
        },
        "Bigquery.Schema.JobConfigurationLoad": {
            "allowJaggedRows": {
                "!type": "bool"
            },
            "allowQuotedNewlines": {
                "!type": "bool"
            },
            "createDisposition": {
                "!type": "string"
            },
            "destinationTable": {
                "!type": "Bigquery.Schema.TableReference"
            },
            "encoding": {
                "!type": "string"
            },
            "fieldDelimiter": {
                "!type": "string"
            },
            "ignoreUnknownValues": {
                "!type": "bool"
            },
            "maxBadRecords": {
                "!type": "number"
            },
            "projectionFields": {
                "!type": "[string]"
            },
            "quote": {
                "!type": "string"
            },
            "schema": {
                "!type": "Bigquery.Schema.TableSchema"
            },
            "schemaInline": {
                "!type": "string"
            },
            "schemaInlineFormat": {
                "!type": "string"
            },
            "skipLeadingRows": {
                "!type": "number"
            },
            "sourceFormat": {
                "!type": "string"
            },
            "sourceUris": {
                "!type": "[string]"
            },
            "writeDisposition": {
                "!type": "string"
            }
        },
        "Bigquery.Schema.JobConfigurationQuery": {
            "allowLargeResults": {
                "!type": "bool"
            },
            "createDisposition": {
                "!type": "string"
            },
            "defaultDataset": {
                "!type": "Bigquery.Schema.DatasetReference"
            },
            "destinationTable": {
                "!type": "Bigquery.Schema.TableReference"
            },
            "flattenResults": {
                "!type": "bool"
            },
            "maximumBillingTier": {
                "!type": "number"
            },
            "preserveNulls": {
                "!type": "bool"
            },
            "priority": {
                "!type": "string"
            },
            "query": {
                "!type": "string"
            },
            "tableDefinitions": {
                "!type": "object"
            },
            "useQueryCache": {
                "!type": "bool"
            },
            "userDefinedFunctionResources": {
                "!type": "[Bigquery.Schema.UserDefinedFunctionResource]"
            },
            "writeDisposition": {
                "!type": "string"
            }
        },
        "Bigquery.Schema.JobConfigurationTableCopy": {
            "createDisposition": {
                "!type": "string"
            },
            "destinationTable": {
                "!type": "Bigquery.Schema.TableReference"
            },
            "sourceTable": {
                "!type": "Bigquery.Schema.TableReference"
            },
            "sourceTables": {
                "!type": "[Bigquery.Schema.TableReference]"
            },
            "writeDisposition": {
                "!type": "string"
            }
        },
        "Bigquery.Schema.JobList": {
            "etag": {
                "!type": "string"
            },
            "jobs": {
                "!type": "[Bigquery.Schema.JobListJobs]"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            }
        },
        "Bigquery.Schema.JobListJobs": {
            "configuration": {
                "!type": "Bigquery.Schema.JobConfiguration"
            },
            "errorResult": {
                "!type": "Bigquery.Schema.ErrorProto"
            },
            "id": {
                "!type": "string"
            },
            "jobReference": {
                "!type": "Bigquery.Schema.JobReference"
            },
            "kind": {
                "!type": "string"
            },
            "state": {
                "!type": "string"
            },
            "statistics": {
                "!type": "Bigquery.Schema.JobStatistics"
            },
            "status": {
                "!type": "Bigquery.Schema.JobStatus"
            },
            "user_email": {
                "!type": "string"
            }
        },
        "Bigquery.Schema.JobReference": {
            "jobId": {
                "!type": "string"
            },
            "projectId": {
                "!type": "string"
            }
        },
        "Bigquery.Schema.JobStatistics": {
            "creationTime": {
                "!type": "string"
            },
            "endTime": {
                "!type": "string"
            },
            "extract": {
                "!type": "Bigquery.Schema.JobStatistics4"
            },
            "load": {
                "!type": "Bigquery.Schema.JobStatistics3"
            },
            "query": {
                "!type": "Bigquery.Schema.JobStatistics2"
            },
            "startTime": {
                "!type": "string"
            },
            "totalBytesProcessed": {
                "!type": "string"
            }
        },
        "Bigquery.Schema.JobStatistics2": {
            "billingTier": {
                "!type": "number"
            },
            "cacheHit": {
                "!type": "bool"
            },
            "queryPlan": {
                "!type": "[Bigquery.Schema.ExplainQueryStage]"
            },
            "totalBytesBilled": {
                "!type": "string"
            },
            "totalBytesProcessed": {
                "!type": "string"
            }
        },
        "Bigquery.Schema.JobStatistics3": {
            "inputFileBytes": {
                "!type": "string"
            },
            "inputFiles": {
                "!type": "string"
            },
            "outputBytes": {
                "!type": "string"
            },
            "outputRows": {
                "!type": "string"
            }
        },
        "Bigquery.Schema.JobStatistics4": {
            "destinationUriFileCounts": {
                "!type": "[string]"
            }
        },
        "Bigquery.Schema.JobStatus": {
            "errorResult": {
                "!type": "Bigquery.Schema.ErrorProto"
            },
            "errors": {
                "!type": "[Bigquery.Schema.ErrorProto]"
            },
            "state": {
                "!type": "string"
            }
        },
        "Bigquery.Schema.ProjectList": {
            "etag": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "projects": {
                "!type": "[Bigquery.Schema.ProjectListProjects]"
            },
            "totalItems": {
                "!type": "number"
            }
        },
        "Bigquery.Schema.ProjectListProjects": {
            "friendlyName": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "numericId": {
                "!type": "string"
            },
            "projectReference": {
                "!type": "Bigquery.Schema.ProjectReference"
            }
        },
        "Bigquery.Schema.ProjectReference": {
            "projectId": {
                "!type": "string"
            }
        },
        "Bigquery.Schema.QueryRequest": {
            "defaultDataset": {
                "!type": "Bigquery.Schema.DatasetReference"
            },
            "dryRun": {
                "!type": "bool"
            },
            "kind": {
                "!type": "string"
            },
            "maxResults": {
                "!type": "number"
            },
            "preserveNulls": {
                "!type": "bool"
            },
            "query": {
                "!type": "string"
            },
            "timeoutMs": {
                "!type": "number"
            },
            "useQueryCache": {
                "!type": "bool"
            }
        },
        "Bigquery.Schema.QueryResponse": {
            "cacheHit": {
                "!type": "bool"
            },
            "errors": {
                "!type": "[Bigquery.Schema.ErrorProto]"
            },
            "jobComplete": {
                "!type": "bool"
            },
            "jobReference": {
                "!type": "Bigquery.Schema.JobReference"
            },
            "kind": {
                "!type": "string"
            },
            "pageToken": {
                "!type": "string"
            },
            "rows": {
                "!type": "[Bigquery.Schema.TableRow]"
            },
            "schema": {
                "!type": "Bigquery.Schema.TableSchema"
            },
            "totalBytesProcessed": {
                "!type": "string"
            },
            "totalRows": {
                "!type": "string"
            }
        },
        "Bigquery.Schema.Streamingbuffer": {
            "estimatedBytes": {
                "!type": "string"
            },
            "estimatedRows": {
                "!type": "string"
            },
            "oldestEntryTime": {
                "!type": "string"
            }
        },
        "Bigquery.Schema.Table": {
            "creationTime": {
                "!type": "string"
            },
            "description": {
                "!type": "string"
            },
            "etag": {
                "!type": "string"
            },
            "expirationTime": {
                "!type": "string"
            },
            "externalDataConfiguration": {
                "!type": "Bigquery.Schema.ExternalDataConfiguration"
            },
            "friendlyName": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "lastModifiedTime": {
                "!type": "string"
            },
            "location": {
                "!type": "string"
            },
            "numBytes": {
                "!type": "string"
            },
            "numRows": {
                "!type": "string"
            },
            "schema": {
                "!type": "Bigquery.Schema.TableSchema"
            },
            "selfLink": {
                "!type": "string"
            },
            "streamingBuffer": {
                "!type": "Bigquery.Schema.Streamingbuffer"
            },
            "tableReference": {
                "!type": "Bigquery.Schema.TableReference"
            },
            "type": {
                "!type": "string"
            },
            "view": {
                "!type": "Bigquery.Schema.ViewDefinition"
            }
        },
        "Bigquery.Schema.TableCell": {
            "v": {
                "!type": "object"
            }
        },
        "Bigquery.Schema.TableDataInsertAllRequest": {
            "ignoreUnknownValues": {
                "!type": "bool"
            },
            "kind": {
                "!type": "string"
            },
            "rows": {
                "!type": "[Bigquery.Schema.TableDataInsertAllRequestRows]"
            },
            "skipInvalidRows": {
                "!type": "bool"
            },
            "templateSuffix": {
                "!type": "string"
            }
        },
        "Bigquery.Schema.TableDataInsertAllRequestRows": {
            "insertId": {
                "!type": "string"
            },
            "json": {
                "!type": "Bigquery.Schema.JsonObject"
            }
        },
        "Bigquery.Schema.TableDataInsertAllResponse": {
            "insertErrors": {
                "!type": "[Bigquery.Schema.TableDataInsertAllResponseInsertErrors]"
            },
            "kind": {
                "!type": "string"
            }
        },
        "Bigquery.Schema.TableDataInsertAllResponseInsertErrors": {
            "errors": {
                "!type": "[Bigquery.Schema.ErrorProto]"
            },
            "index": {
                "!type": "number"
            }
        },
        "Bigquery.Schema.TableDataList": {
            "etag": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "pageToken": {
                "!type": "string"
            },
            "rows": {
                "!type": "[Bigquery.Schema.TableRow]"
            },
            "totalRows": {
                "!type": "string"
            }
        },
        "Bigquery.Schema.TableFieldSchema": {
            "description": {
                "!type": "string"
            },
            "fields": {
                "!type": "[Bigquery.Schema.TableFieldSchema]"
            },
            "mode": {
                "!type": "string"
            },
            "name": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            }
        },
        "Bigquery.Schema.TableList": {
            "etag": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "tables": {
                "!type": "[Bigquery.Schema.TableListTables]"
            },
            "totalItems": {
                "!type": "number"
            }
        },
        "Bigquery.Schema.TableListTables": {
            "friendlyName": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "tableReference": {
                "!type": "Bigquery.Schema.TableReference"
            },
            "type": {
                "!type": "string"
            }
        },
        "Bigquery.Schema.TableReference": {
            "datasetId": {
                "!type": "string"
            },
            "projectId": {
                "!type": "string"
            },
            "tableId": {
                "!type": "string"
            }
        },
        "Bigquery.Schema.TableRow": {
            "f": {
                "!type": "[Bigquery.Schema.TableCell]"
            }
        },
        "Bigquery.Schema.TableSchema": {
            "fields": {
                "!type": "[Bigquery.Schema.TableFieldSchema]"
            }
        },
        "Bigquery.Schema.UserDefinedFunctionResource": {
            "inlineCode": {
                "!type": "string"
            },
            "resourceUri": {
                "!type": "string"
            }
        },
        "Bigquery.Schema.ViewDefinition": {
            "query": {
                "!type": "string"
            },
            "userDefinedFunctionResources": {
                "!type": "[Bigquery.Schema.UserDefinedFunctionResource]"
            }
        },
        "Blob": {
            "copyBlob": {
                "!doc": "Returns a copy of this blob.",
                "!type": "fn() -> Blob"
            },
            "getAllBlobs": {
                "!doc": "Gets all the blobs that are contained within this (possibly composite) blob.",
                "!type": "fn() -> [Blob]"
            },
            "getAs": {
                "!doc": "Return the data inside this object as a blob converted to the specified content type. This\n method adds the appropriate extension to the filename ? for example, \"myfile.pdf\". However, it\n assumes that the part of the filename that follows the last period (if any) is an existing\n extension that should be replaced. Consequently, \"ChristmasList.12.25.2014\" will become\n \"ChristmasList.12.25.pdf\".",
                "!type": "fn(contentType: string) -> Blob"
            },
            "getBytes": {
                "!doc": "Gets the data stored in this blob.",
                "!type": "fn() -> [number]"
            },
            "getContentType": {
                "!doc": "Gets the content type of the bytes in this blob.",
                "!type": "fn() -> string"
            },
            "getDataAsString": {
                "!doc": "Gets the data of this blob as a String with UTF-8 encoding.",
                "!type": "fn() -> string"
            },
            "getDataAsString ": {
                "!doc": "Gets the data of this blob as a string with the specified encoding.",
                "!type": "fn(charset: string) -> string"
            },
            "getName": {
                "!doc": "Gets the name of this blob.",
                "!type": "fn() -> string"
            },
            "isGoogleType": {
                "!doc": "Returns whether this blob is a Google Apps file (Sheets, Docs, etc.).",
                "!type": "fn() -> bool"
            },
            "setBytes": {
                "!doc": "Sets the data stored in this blob.",
                "!type": "fn(data: [number]) -> Blob"
            },
            "setContentType": {
                "!doc": "Sets the content type of the bytes in this blob.",
                "!type": "fn(contentType: string) -> Blob"
            },
            "setContentTypeFromExtension": {
                "!doc": "Sets the content type of the bytes in this blob based on the file extension.\n The contentType will be null if it cannot be guessed from its extension.",
                "!type": "fn() -> Blob"
            },
            "setDataFromString": {
                "!doc": "Sets the data of this blob from a string with UTF-8 encoding.",
                "!type": "fn(string: string) -> Blob"
            },
            "setDataFromString ": {
                "!doc": "Sets the data of this blob from a string with the specified encoding.",
                "!type": "fn(string: string, charset: string) -> Blob"
            },
            "setName": {
                "!doc": "Sets the name of this blob.",
                "!type": "fn(name: string) -> Blob"
            }
        },
        "BlobSource": {
            "getAs": {
                "!doc": "Return the data inside this object as a blob converted to the specified content type. This\n method adds the appropriate extension to the filename ? for example, \"myfile.pdf\". However, it\n assumes that the part of the filename that follows the last period (if any) is an existing\n extension that should be replaced. Consequently, \"ChristmasList.12.25.2014\" will become\n \"ChristmasList.12.25.pdf\".",
                "!type": "fn(contentType: string) -> Blob"
            },
            "getBlob": {
                "!doc": "Return the data inside this object as a blob.",
                "!type": "fn() -> Blob"
            }
        },
        "Button": {
            "CANCEL": {
                "!doc": "A \"Cancel\" button, indicating that an operation should not proceed.",
                "!type": "Button"
            },
            "CLOSE": {
                "!doc": "The standard close button displayed in every dialog's title bar. This button is not explicitly\n added to a dialog, and it cannot be removed.",
                "!type": "Button"
            },
            "NO": {
                "!doc": "A \"No\" button, indicating a negative response to a question.",
                "!type": "Button"
            },
            "OK": {
                "!doc": "An \"OK\" button, indicating that an operation should proceed.",
                "!type": "Button"
            },
            "YES": {
                "!doc": "A \"Yes\" button, indicating a positive response to a question.",
                "!type": "Button"
            }
        },
        "ButtonSet": {
            "OK": {
                "!doc": "A single \"OK\" button, indicating an informational message that can only be dismissed.",
                "!type": "ButtonSet"
            },
            "OK_CANCEL": {
                "!doc": "An \"OK\" button and a \"Cancel\" button, allowing the user to either proceed with or halt an\n operation.",
                "!type": "ButtonSet"
            },
            "YES_NO": {
                "!doc": "A \"Yes\" button and a \"No\" button, allowing the user to answer a yes\/no question.",
                "!type": "ButtonSet"
            },
            "YES_NO_CANCEL": {
                "!doc": "A \"Yes\" button, a \"No\" button, and a \"Cancel\" button, allowing the user to either answer a\n yes\/no question or halt an operation.",
                "!type": "ButtonSet"
            }
        },
        "Calendar.Collection.AclCollection": {
            "get": {
                "!type": "fn(calendarId: string, ruleId: string) -> Calendar.Schema.AclRule"
            },
            "insert": {
                "!type": "fn(resource: Calendar.Schema.AclRule, calendarId: string) -> Calendar.Schema.AclRule"
            },
            "list": {
                "!type": "fn(calendarId: string) -> Calendar.Schema.Acl"
            },
            "list ": {
                "!type": "fn(calendarId: string, optionalArgs: object) -> Calendar.Schema.Acl"
            },
            "patch": {
                "!type": "fn(resource: Calendar.Schema.AclRule, calendarId: string, ruleId: string) -> Calendar.Schema.AclRule"
            },
            "remove": {
                "!type": "fn(calendarId: string, ruleId: string)"
            },
            "update": {
                "!type": "fn(resource: Calendar.Schema.AclRule, calendarId: string, ruleId: string) -> Calendar.Schema.AclRule"
            },
            "watch": {
                "!type": "fn(resource: Calendar.Schema.Channel, calendarId: string) -> Calendar.Schema.Channel"
            },
            "watch ": {
                "!type": "fn(resource: Calendar.Schema.Channel, calendarId: string, optionalArgs: object) -> Calendar.Schema.Channel"
            }
        },
        "Calendar.Collection.CalendarListCollection": {
            "get": {
                "!type": "fn(calendarId: string) -> Calendar.Schema.CalendarListEntry"
            },
            "insert": {
                "!type": "fn(resource: Calendar.Schema.CalendarListEntry) -> Calendar.Schema.CalendarListEntry"
            },
            "insert ": {
                "!type": "fn(resource: Calendar.Schema.CalendarListEntry, optionalArgs: object) -> Calendar.Schema.CalendarListEntry"
            },
            "list": {
                "!type": "fn() -> Calendar.Schema.CalendarList"
            },
            "list ": {
                "!type": "fn(optionalArgs: object) -> Calendar.Schema.CalendarList"
            },
            "patch": {
                "!type": "fn(resource: Calendar.Schema.CalendarListEntry, calendarId: string) -> Calendar.Schema.CalendarListEntry"
            },
            "patch ": {
                "!type": "fn(resource: Calendar.Schema.CalendarListEntry, calendarId: string, optionalArgs: object) -> Calendar.Schema.CalendarListEntry"
            },
            "remove": {
                "!type": "fn(calendarId: string)"
            },
            "update": {
                "!type": "fn(resource: Calendar.Schema.CalendarListEntry, calendarId: string) -> Calendar.Schema.CalendarListEntry"
            },
            "update ": {
                "!type": "fn(resource: Calendar.Schema.CalendarListEntry, calendarId: string, optionalArgs: object) -> Calendar.Schema.CalendarListEntry"
            },
            "watch": {
                "!type": "fn(resource: Calendar.Schema.Channel) -> Calendar.Schema.Channel"
            },
            "watch ": {
                "!type": "fn(resource: Calendar.Schema.Channel, optionalArgs: object) -> Calendar.Schema.Channel"
            }
        },
        "Calendar.Collection.CalendarsCollection": {
            "clear": {
                "!type": "fn(calendarId: string)"
            },
            "get": {
                "!type": "fn(calendarId: string) -> Calendar.Schema.Calendar"
            },
            "insert": {
                "!type": "fn(resource: Calendar.Schema.Calendar) -> Calendar.Schema.Calendar"
            },
            "patch": {
                "!type": "fn(resource: Calendar.Schema.Calendar, calendarId: string) -> Calendar.Schema.Calendar"
            },
            "remove": {
                "!type": "fn(calendarId: string)"
            },
            "update": {
                "!type": "fn(resource: Calendar.Schema.Calendar, calendarId: string) -> Calendar.Schema.Calendar"
            }
        },
        "Calendar.Collection.ChannelsCollection": {
            "stop": {
                "!type": "fn(resource: Calendar.Schema.Channel)"
            }
        },
        "Calendar.Collection.ColorsCollection": {
            "get": {
                "!type": "fn() -> Calendar.Schema.Colors"
            }
        },
        "Calendar.Collection.EventsCollection": {
            "get": {
                "!type": "fn(calendarId: string, eventId: string) -> Calendar.Schema.Event"
            },
            "get ": {
                "!type": "fn(calendarId: string, eventId: string, optionalArgs: object) -> Calendar.Schema.Event"
            },
            "import": {
                "!type": "fn(resource: Calendar.Schema.Event, calendarId: string) -> Calendar.Schema.Event"
            },
            "import ": {
                "!type": "fn(resource: Calendar.Schema.Event, calendarId: string, optionalArgs: object) -> Calendar.Schema.Event"
            },
            "insert": {
                "!type": "fn(resource: Calendar.Schema.Event, calendarId: string) -> Calendar.Schema.Event"
            },
            "insert ": {
                "!type": "fn(resource: Calendar.Schema.Event, calendarId: string, optionalArgs: object) -> Calendar.Schema.Event"
            },
            "instances": {
                "!type": "fn(calendarId: string, eventId: string) -> Calendar.Schema.Events"
            },
            "instances ": {
                "!type": "fn(calendarId: string, eventId: string, optionalArgs: object) -> Calendar.Schema.Events"
            },
            "list": {
                "!type": "fn(calendarId: string) -> Calendar.Schema.Events"
            },
            "list ": {
                "!type": "fn(calendarId: string, optionalArgs: object) -> Calendar.Schema.Events"
            },
            "move": {
                "!type": "fn(calendarId: string, eventId: string, destination: string) -> Calendar.Schema.Event"
            },
            "move ": {
                "!type": "fn(calendarId: string, eventId: string, destination: string, optionalArgs: object) -> Calendar.Schema.Event"
            },
            "patch": {
                "!type": "fn(resource: Calendar.Schema.Event, calendarId: string, eventId: string) -> Calendar.Schema.Event"
            },
            "patch ": {
                "!type": "fn(resource: Calendar.Schema.Event, calendarId: string, eventId: string, optionalArgs: object) -> Calendar.Schema.Event"
            },
            "quickAdd": {
                "!type": "fn(calendarId: string, text: string) -> Calendar.Schema.Event"
            },
            "quickAdd ": {
                "!type": "fn(calendarId: string, text: string, optionalArgs: object) -> Calendar.Schema.Event"
            },
            "remove": {
                "!type": "fn(calendarId: string, eventId: string)"
            },
            "remove ": {
                "!type": "fn(calendarId: string, eventId: string, optionalArgs: object)"
            },
            "update": {
                "!type": "fn(resource: Calendar.Schema.Event, calendarId: string, eventId: string) -> Calendar.Schema.Event"
            },
            "update ": {
                "!type": "fn(resource: Calendar.Schema.Event, calendarId: string, eventId: string, optionalArgs: object) -> Calendar.Schema.Event"
            },
            "watch": {
                "!type": "fn(resource: Calendar.Schema.Channel, calendarId: string) -> Calendar.Schema.Channel"
            },
            "watch ": {
                "!type": "fn(resource: Calendar.Schema.Channel, calendarId: string, optionalArgs: object) -> Calendar.Schema.Channel"
            }
        },
        "Calendar.Collection.FreebusyCollection": {
            "query": {
                "!type": "fn(resource: Calendar.Schema.FreeBusyRequest) -> Calendar.Schema.FreeBusyResponse"
            }
        },
        "Calendar.Collection.SettingsCollection": {
            "get": {
                "!type": "fn(setting: string) -> Calendar.Schema.Setting"
            },
            "list": {
                "!type": "fn() -> Calendar.Schema.Settings"
            },
            "list ": {
                "!type": "fn(optionalArgs: object) -> Calendar.Schema.Settings"
            },
            "watch": {
                "!type": "fn(resource: Calendar.Schema.Channel) -> Calendar.Schema.Channel"
            },
            "watch ": {
                "!type": "fn(resource: Calendar.Schema.Channel, optionalArgs: object) -> Calendar.Schema.Channel"
            }
        },
        "Calendar.Schema.Acl": {
            "etag": {
                "!type": "string"
            },
            "items": {
                "!type": "[Calendar.Schema.AclRule]"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "nextSyncToken": {
                "!type": "string"
            }
        },
        "Calendar.Schema.AclRule": {
            "etag": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "role": {
                "!type": "string"
            },
            "scope": {
                "!type": "Calendar.Schema.AclRuleScope"
            }
        },
        "Calendar.Schema.AclRuleScope": {
            "type": {
                "!type": "string"
            },
            "value": {
                "!type": "string"
            }
        },
        "Calendar.Schema.Calendar": {
            "description": {
                "!type": "string"
            },
            "etag": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "location": {
                "!type": "string"
            },
            "summary": {
                "!type": "string"
            },
            "timeZone": {
                "!type": "string"
            }
        },
        "Calendar.Schema.CalendarList": {
            "etag": {
                "!type": "string"
            },
            "items": {
                "!type": "[Calendar.Schema.CalendarListEntry]"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "nextSyncToken": {
                "!type": "string"
            }
        },
        "Calendar.Schema.CalendarListEntry": {
            "accessRole": {
                "!type": "string"
            },
            "backgroundColor": {
                "!type": "string"
            },
            "colorId": {
                "!type": "string"
            },
            "defaultReminders": {
                "!type": "[Calendar.Schema.EventReminder]"
            },
            "deleted": {
                "!type": "bool"
            },
            "description": {
                "!type": "string"
            },
            "etag": {
                "!type": "string"
            },
            "foregroundColor": {
                "!type": "string"
            },
            "hidden": {
                "!type": "bool"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "location": {
                "!type": "string"
            },
            "notificationSettings": {
                "!type": "Calendar.Schema.CalendarListEntryNotificationSettings"
            },
            "primary": {
                "!type": "bool"
            },
            "selected": {
                "!type": "bool"
            },
            "summary": {
                "!type": "string"
            },
            "summaryOverride": {
                "!type": "string"
            },
            "timeZone": {
                "!type": "string"
            }
        },
        "Calendar.Schema.CalendarListEntryNotificationSettings": {
            "notifications": {
                "!type": "[Calendar.Schema.CalendarNotification]"
            }
        },
        "Calendar.Schema.CalendarNotification": {
            "method": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            }
        },
        "Calendar.Schema.Channel": {
            "address": {
                "!type": "string"
            },
            "expiration": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "params": {
                "!type": "object"
            },
            "payload": {
                "!type": "bool"
            },
            "resourceId": {
                "!type": "string"
            },
            "resourceUri": {
                "!type": "string"
            },
            "token": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            }
        },
        "Calendar.Schema.ColorDefinition": {
            "background": {
                "!type": "string"
            },
            "foreground": {
                "!type": "string"
            }
        },
        "Calendar.Schema.Colors": {
            "calendar": {
                "!type": "object"
            },
            "event": {
                "!type": "object"
            },
            "kind": {
                "!type": "string"
            },
            "updated": {
                "!type": "string"
            }
        },
        "Calendar.Schema.Error": {
            "domain": {
                "!type": "string"
            },
            "reason": {
                "!type": "string"
            }
        },
        "Calendar.Schema.Event": {
            "anyoneCanAddSelf": {
                "!type": "bool"
            },
            "attachments": {
                "!type": "[Calendar.Schema.EventAttachment]"
            },
            "attendees": {
                "!type": "[Calendar.Schema.EventAttendee]"
            },
            "attendeesOmitted": {
                "!type": "bool"
            },
            "colorId": {
                "!type": "string"
            },
            "created": {
                "!type": "string"
            },
            "creator": {
                "!type": "Calendar.Schema.EventCreator"
            },
            "description": {
                "!type": "string"
            },
            "end": {
                "!type": "Calendar.Schema.EventDateTime"
            },
            "endTimeUnspecified": {
                "!type": "bool"
            },
            "etag": {
                "!type": "string"
            },
            "extendedProperties": {
                "!type": "Calendar.Schema.EventExtendedProperties"
            },
            "gadget": {
                "!type": "Calendar.Schema.EventGadget"
            },
            "guestsCanInviteOthers": {
                "!type": "bool"
            },
            "guestsCanModify": {
                "!type": "bool"
            },
            "guestsCanSeeOtherGuests": {
                "!type": "bool"
            },
            "hangoutLink": {
                "!type": "string"
            },
            "htmlLink": {
                "!type": "string"
            },
            "iCalUID": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "location": {
                "!type": "string"
            },
            "locked": {
                "!type": "bool"
            },
            "organizer": {
                "!type": "Calendar.Schema.EventOrganizer"
            },
            "originalStartTime": {
                "!type": "Calendar.Schema.EventDateTime"
            },
            "privateCopy": {
                "!type": "bool"
            },
            "recurrence": {
                "!type": "[string]"
            },
            "recurringEventId": {
                "!type": "string"
            },
            "reminders": {
                "!type": "Calendar.Schema.EventReminders"
            },
            "sequence": {
                "!type": "number"
            },
            "source": {
                "!type": "Calendar.Schema.EventSource"
            },
            "start": {
                "!type": "Calendar.Schema.EventDateTime"
            },
            "status": {
                "!type": "string"
            },
            "summary": {
                "!type": "string"
            },
            "transparency": {
                "!type": "string"
            },
            "updated": {
                "!type": "string"
            },
            "visibility": {
                "!type": "string"
            }
        },
        "Calendar.Schema.EventAttachment": {
            "fileId": {
                "!type": "string"
            },
            "fileUrl": {
                "!type": "string"
            },
            "iconLink": {
                "!type": "string"
            },
            "mimeType": {
                "!type": "string"
            },
            "title": {
                "!type": "string"
            }
        },
        "Calendar.Schema.EventAttendee": {
            "additionalGuests": {
                "!type": "number"
            },
            "comment": {
                "!type": "string"
            },
            "displayName": {
                "!type": "string"
            },
            "email": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "optional": {
                "!type": "bool"
            },
            "organizer": {
                "!type": "bool"
            },
            "resource": {
                "!type": "bool"
            },
            "responseStatus": {
                "!type": "string"
            },
            "self": {
                "!type": "bool"
            }
        },
        "Calendar.Schema.EventCreator": {
            "displayName": {
                "!type": "string"
            },
            "email": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "self": {
                "!type": "bool"
            }
        },
        "Calendar.Schema.EventDateTime": {
            "date": {
                "!type": "string"
            },
            "dateTime": {
                "!type": "string"
            },
            "timeZone": {
                "!type": "string"
            }
        },
        "Calendar.Schema.EventExtendedProperties": {
            "private": {
                "!type": "object"
            },
            "shared": {
                "!type": "object"
            }
        },
        "Calendar.Schema.EventGadget": {
            "display": {
                "!type": "string"
            },
            "height": {
                "!type": "number"
            },
            "iconLink": {
                "!type": "string"
            },
            "link": {
                "!type": "string"
            },
            "preferences": {
                "!type": "object"
            },
            "title": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            },
            "width": {
                "!type": "number"
            }
        },
        "Calendar.Schema.EventOrganizer": {
            "displayName": {
                "!type": "string"
            },
            "email": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "self": {
                "!type": "bool"
            }
        },
        "Calendar.Schema.EventReminder": {
            "method": {
                "!type": "string"
            },
            "minutes": {
                "!type": "number"
            }
        },
        "Calendar.Schema.EventReminders": {
            "overrides": {
                "!type": "[Calendar.Schema.EventReminder]"
            },
            "useDefault": {
                "!type": "bool"
            }
        },
        "Calendar.Schema.EventSource": {
            "title": {
                "!type": "string"
            },
            "url": {
                "!type": "string"
            }
        },
        "Calendar.Schema.Events": {
            "accessRole": {
                "!type": "string"
            },
            "defaultReminders": {
                "!type": "[Calendar.Schema.EventReminder]"
            },
            "description": {
                "!type": "string"
            },
            "etag": {
                "!type": "string"
            },
            "items": {
                "!type": "[Calendar.Schema.Event]"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "nextSyncToken": {
                "!type": "string"
            },
            "summary": {
                "!type": "string"
            },
            "timeZone": {
                "!type": "string"
            },
            "updated": {
                "!type": "string"
            }
        },
        "Calendar.Schema.FreeBusyCalendar": {
            "busy": {
                "!type": "[Calendar.Schema.TimePeriod]"
            },
            "errors": {
                "!type": "[Calendar.Schema.Error]"
            }
        },
        "Calendar.Schema.FreeBusyGroup": {
            "calendars": {
                "!type": "[string]"
            },
            "errors": {
                "!type": "[Calendar.Schema.Error]"
            }
        },
        "Calendar.Schema.FreeBusyRequest": {
            "calendarExpansionMax": {
                "!type": "number"
            },
            "groupExpansionMax": {
                "!type": "number"
            },
            "items": {
                "!type": "[Calendar.Schema.FreeBusyRequestItem]"
            },
            "timeMax": {
                "!type": "string"
            },
            "timeMin": {
                "!type": "string"
            },
            "timeZone": {
                "!type": "string"
            }
        },
        "Calendar.Schema.FreeBusyRequestItem": {
            "id": {
                "!type": "string"
            }
        },
        "Calendar.Schema.FreeBusyResponse": {
            "calendars": {
                "!type": "object"
            },
            "groups": {
                "!type": "object"
            },
            "kind": {
                "!type": "string"
            },
            "timeMax": {
                "!type": "string"
            },
            "timeMin": {
                "!type": "string"
            }
        },
        "Calendar.Schema.Setting": {
            "etag": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "value": {
                "!type": "string"
            }
        },
        "Calendar.Schema.Settings": {
            "etag": {
                "!type": "string"
            },
            "items": {
                "!type": "[Calendar.Schema.Setting]"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "nextSyncToken": {
                "!type": "string"
            }
        },
        "Calendar.Schema.TimePeriod": {
            "end": {
                "!type": "string"
            },
            "start": {
                "!type": "string"
            }
        },
        "Charts.AreaChartBuilder": {
            "build": {
                "!doc": "Builds the chart.",
                "!type": "fn() -> Charts.Chart"
            },
            "reverseCategories": {
                "!doc": "Reverses the drawing of series in the domain axis.  For vertical-range charts (such as line,\n area or column charts), this means the horizontal axis is drawn from right to left.  For\n horizontal-range charts (such as bar charts), this means the vertical axis is drawn from top\n to bottom.  For pie charts, this means the slices are drawn counterclockwise.\n\n \n \n \/\/ Creates a pie chart builder and sets drawing of the slices in a counter-clockwise manner.\n var builder = Charts.newPieChart();\n builder.reverseCategories();\n ",
                "!type": "fn() -> Charts.AreaChartBuilder"
            },
            "setBackgroundColor": {
                "!doc": "Sets the background color for the chart.\n\n \n \n \/\/ Creates a line chart builder and sets the background color to gray\n var builder = Charts.newLineChart();\n builder.setBackgroundColor(&quot;gray&quot;);\n ",
                "!type": "fn(cssValue: string) -> Charts.AreaChartBuilder"
            },
            "setColors": {
                "!doc": "Sets the colors for the lines in the chart.\n\n \n \n \/\/ Creates a line chart builder and sets the first two lines to be drawn in green and red,\n \/\/ respectively.\n var builder = Charts.newLineChart();\n builder.setColors([&quot;green&quot;, &quot;red&quot;]);\n ",
                "!type": "fn(cssValues: [string]) -> Charts.AreaChartBuilder"
            },
            "setDataSourceUrl": {
                "!doc": "Sets the data source URL that will be used to pull data in from an\n external source, such as Google Sheets.\n If a data source URL and a DataTable are provided, the data source URL is ignored.\n\n For more information about querying data sources, check out the \n Google Charts documentation.",
                "!type": "fn(url: string) -> Charts.AreaChartBuilder"
            },
            "setDataTable": {
                "!doc": "Sets the data table to use for the chart using a DataTableBuilder.  This is a convenience\n method for setting the data table without needing to call build().",
                "!type": "fn(tableBuilder: DataTableBuilder) -> Charts.AreaChartBuilder"
            },
            "setDataTable ": {
                "!doc": "Sets the data table which contains the lines for the chart, as well as the X-axis labels.\n The first column should be a string, and contain the horizontal axis labels. Any number of\n columns can follow, all must be numeric.  Each column is displayed as a separate line.",
                "!type": "fn(table: DataTableSource) -> Charts.AreaChartBuilder"
            },
            "setDataViewDefinition": {
                "!doc": "Sets the data view definition to use for the chart.",
                "!type": "fn(dataViewDefinition: Charts.DataViewDefinition) -> Charts.AreaChartBuilder"
            },
            "setDimensions": {
                "!doc": "Sets the dimensions for the chart.",
                "!type": "fn(width: number, height: number) -> Charts.AreaChartBuilder"
            },
            "setLegendPosition": {
                "!doc": "Sets the position of the legend with respect to the chart.  By default, there will be no\n legend.\n\n \n \n \/\/ Creates a line chart builder and sets the legend position to right.\n var builder = Charts.newLineChart();\n builder.setLegendPosition(Charts.Position.RIGHT);\n ",
                "!type": "fn(position: Charts.Position) -> Charts.AreaChartBuilder"
            },
            "setLegendTextStyle": {
                "!doc": "Sets the text style of the chart legend.\n\n \n \n \/\/ Creates a line chart builder and sets it up for a  blue, 26-point legend.\n var textStyleBuilder = Charts.newTextStyle().setColor(&#39;#0000FF&#39;).setFontSize(26);\n var style = textStyleBuilder.build();\n var builder = Charts.newLineChart();\n builder.setLegendTextStyle(style);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> Charts.AreaChartBuilder"
            },
            "setOption": {
                "!doc": "Sets advanced options for this chart. See\n the available options for this chart.\n This method has no effect if the given option is invalid.\n\n \n\n \n \n \/\/ Build an area chart with a 1-second animation duration.\n var builder = Charts.newAreaChart();\n builder.setOption(&#39;animation.duration&#39;, 1000); \n var chart = builder.build();\n ",
                "!type": "fn(option: string, value: object) -> Charts.AreaChartBuilder"
            },
            "setPointStyle": {
                "!doc": "Sets the style for points in the line.  By default, points will have no particular styles,\n and only the line will be visible.\n\n \n \n \/\/ Creates a line chart builder and sets large point style.\n var builder = Charts.newLineChart();\n builder.setPointStyle(Charts.PointStyle.LARGE);\n ",
                "!type": "fn(style: Charts.PointStyle) -> Charts.AreaChartBuilder"
            },
            "setRange": {
                "!doc": "Sets the range for the chart.\n \n If any data points fall outside the range, the range will be expanded to include those data\n points.",
                "!type": "fn(start: number, end: number) -> Charts.AreaChartBuilder"
            },
            "setStacked": {
                "!doc": "Uses stacked lines, meaning that line and bar values are stacked (accumulated).  By default,\n there is no stacking.",
                "!type": "fn() -> Charts.AreaChartBuilder"
            },
            "setTitle": {
                "!doc": "Sets the title of the chart.  The title will be displayed centered above the chart.\n\n \n \n \/\/ Creates a line chart builder and title to &#39;My Line Chart&#39;.\n var builder = Charts.newLineChart();\n builder.setTitle(&#39;My Line Chart&#39;)\n ",
                "!type": "fn(chartTitle: string) -> Charts.AreaChartBuilder"
            },
            "setTitleTextStyle": {
                "!doc": "Sets the text style of the chart title.\n\n \n \n \/\/ Creates a line chart builder and sets it up for a  blue, 26-point title.\n var textStyleBuilder = Charts.newTextStyle().setColor(&#39;#0000FF&#39;).setFontSize(26);\n var style = textStyleBuilder.build();\n var builder = Charts.newLineChart();\n builder.setTitleTextStyle(style);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> Charts.AreaChartBuilder"
            },
            "setXAxisTextStyle": {
                "!doc": "Sets the horizontal axis text style.\n\n \n \n \/\/ Creates a line chart builder and sets the X-axis text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setXAxisTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> Charts.AreaChartBuilder"
            },
            "setXAxisTitle": {
                "!doc": "Adds a title to the horizontal axis.  The title will be centered and will appear below\n the axis value labels.\n\n \n \n \/\/ Creates a line chart builder and sets the X-axis title.\n var builder = Charts.newLineChart();\n builder.setTitle(&#39;X-axis Title&#39;)\n ",
                "!type": "fn(title: string) -> Charts.AreaChartBuilder"
            },
            "setXAxisTitleTextStyle": {
                "!doc": "Sets the horizontal axis title text style.\n\n \n \n \/\/ Creates a line chart builder and sets the X-axis title text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setXAxisTitleTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> Charts.AreaChartBuilder"
            },
            "setYAxisTextStyle": {
                "!doc": "Sets the vertical axis text style.\n\n \n \n \/\/ Creates a line chart builder and sets the Y-axis text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setYAxisTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> Charts.AreaChartBuilder"
            },
            "setYAxisTitle": {
                "!doc": "Adds a title to the vertical axis.  The title will be centered and will appear to the\n left of the value labels.\n\n \n \n \/\/ Creates a line chart builder and sets the Y-axis title.\n var builder = Charts.newLineChart();\n builder.setYAxisTitle(&#39;Y-axis Title&#39;)\n ",
                "!type": "fn(title: string) -> Charts.AreaChartBuilder"
            },
            "setYAxisTitleTextStyle": {
                "!doc": "Sets the vertical axis title text style.\n\n \n \n \/\/ Creates a line chart builder and sets the Y-axis title text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setYAxisTitleTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> Charts.AreaChartBuilder"
            },
            "useLogScale": {
                "!doc": "Makes the range axis into a logarithmic scale (requires all values to be positive).  The range\n axis will be the vertical axis for vertical charts (line, area, column, etc.) and the\n horizontal axis for horizontal charts (bar, etc.)",
                "!type": "fn() -> Charts.AreaChartBuilder"
            }
        },
        "Charts.BarChartBuilder": {
            "build": {
                "!doc": "Builds the chart.",
                "!type": "fn() -> Charts.Chart"
            },
            "reverseCategories": {
                "!doc": "Reverses the drawing of series in the domain axis.  For vertical-range charts (such as line,\n area or column charts), this means the horizontal axis is drawn from right to left.  For\n horizontal-range charts (such as bar charts), this means the vertical axis is drawn from top\n to bottom.  For pie charts, this means the slices are drawn counterclockwise.\n\n \n \n \/\/ Creates a pie chart builder and sets drawing of the slices in a counter-clockwise manner.\n var builder = Charts.newPieChart();\n builder.reverseCategories();\n ",
                "!type": "fn() -> Charts.BarChartBuilder"
            },
            "reverseDirection": {
                "!doc": "Reverses the direction in which the bars grow along the horizontal axis.  By default, values\n grow from left to right.  Calling this method will cause them to grow from right to left.",
                "!type": "fn() -> Charts.BarChartBuilder"
            },
            "setBackgroundColor": {
                "!doc": "Sets the background color for the chart.\n\n \n \n \/\/ Creates a line chart builder and sets the background color to gray\n var builder = Charts.newLineChart();\n builder.setBackgroundColor(&quot;gray&quot;);\n ",
                "!type": "fn(cssValue: string) -> Charts.BarChartBuilder"
            },
            "setColors": {
                "!doc": "Sets the colors for the lines in the chart.\n\n \n \n \/\/ Creates a line chart builder and sets the first two lines to be drawn in green and red,\n \/\/ respectively.\n var builder = Charts.newLineChart();\n builder.setColors([&quot;green&quot;, &quot;red&quot;]);\n ",
                "!type": "fn(cssValues: [string]) -> Charts.BarChartBuilder"
            },
            "setDataSourceUrl": {
                "!doc": "Sets the data source URL that will be used to pull data in from an\n external source, such as Google Sheets.\n If a data source URL and a DataTable are provided, the data source URL is ignored.\n\n For more information about querying data sources, check out the \n Google Charts documentation.",
                "!type": "fn(url: string) -> Charts.BarChartBuilder"
            },
            "setDataTable": {
                "!doc": "Sets the data table to use for the chart using a DataTableBuilder.  This is a convenience\n method for setting the data table without needing to call build().",
                "!type": "fn(tableBuilder: DataTableBuilder) -> Charts.BarChartBuilder"
            },
            "setDataTable ": {
                "!doc": "Sets the data table which contains the lines for the chart, as well as the X-axis labels.\n The first column should be a string, and contain the horizontal axis labels. Any number of\n columns can follow, all must be numeric.  Each column is displayed as a separate line.",
                "!type": "fn(table: DataTableSource) -> Charts.BarChartBuilder"
            },
            "setDataViewDefinition": {
                "!doc": "Sets the data view definition to use for the chart.",
                "!type": "fn(dataViewDefinition: Charts.DataViewDefinition) -> Charts.BarChartBuilder"
            },
            "setDimensions": {
                "!doc": "Sets the dimensions for the chart.",
                "!type": "fn(width: number, height: number) -> Charts.BarChartBuilder"
            },
            "setLegendPosition": {
                "!doc": "Sets the position of the legend with respect to the chart.  By default, there will be no\n legend.\n\n \n \n \/\/ Creates a line chart builder and sets the legend position to right.\n var builder = Charts.newLineChart();\n builder.setLegendPosition(Charts.Position.RIGHT);\n ",
                "!type": "fn(position: Charts.Position) -> Charts.BarChartBuilder"
            },
            "setLegendTextStyle": {
                "!doc": "Sets the text style of the chart legend.\n\n \n \n \/\/ Creates a line chart builder and sets it up for a  blue, 26-point legend.\n var textStyleBuilder = Charts.newTextStyle().setColor(&#39;#0000FF&#39;).setFontSize(26);\n var style = textStyleBuilder.build();\n var builder = Charts.newLineChart();\n builder.setLegendTextStyle(style);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> Charts.BarChartBuilder"
            },
            "setOption": {
                "!doc": "Sets advanced options for this chart. See\n the available options for this chart.\n This method has no effect if the given option is invalid.\n\n \n\n \n \n \/\/ Build a bar chart with a 1-second animation duration.\n var builder = Charts.newBarChart();\n builder.setOption(&#39;animation.duration&#39;, 1000); \n var chart = builder.build();\n ",
                "!type": "fn(option: string, value: object) -> Charts.BarChartBuilder"
            },
            "setRange": {
                "!doc": "Sets the range for the chart.\n \n If any data points fall outside the range, the range will be expanded to include those data\n points.",
                "!type": "fn(start: number, end: number) -> Charts.BarChartBuilder"
            },
            "setStacked": {
                "!doc": "Uses stacked lines, meaning that line and bar values are stacked (accumulated).  By default,\n there is no stacking.",
                "!type": "fn() -> Charts.BarChartBuilder"
            },
            "setTitle": {
                "!doc": "Sets the title of the chart.  The title will be displayed centered above the chart.\n\n \n \n \/\/ Creates a line chart builder and title to &#39;My Line Chart&#39;.\n var builder = Charts.newLineChart();\n builder.setTitle(&#39;My Line Chart&#39;)\n ",
                "!type": "fn(chartTitle: string) -> Charts.BarChartBuilder"
            },
            "setTitleTextStyle": {
                "!doc": "Sets the text style of the chart title.\n\n \n \n \/\/ Creates a line chart builder and sets it up for a  blue, 26-point title.\n var textStyleBuilder = Charts.newTextStyle().setColor(&#39;#0000FF&#39;).setFontSize(26);\n var style = textStyleBuilder.build();\n var builder = Charts.newLineChart();\n builder.setTitleTextStyle(style);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> Charts.BarChartBuilder"
            },
            "setXAxisTextStyle": {
                "!doc": "Sets the horizontal axis text style.\n\n \n \n \/\/ Creates a line chart builder and sets the X-axis text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setXAxisTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> Charts.BarChartBuilder"
            },
            "setXAxisTitle": {
                "!doc": "Adds a title to the horizontal axis.  The title will be centered and will appear below\n the axis value labels.\n\n \n \n \/\/ Creates a line chart builder and sets the X-axis title.\n var builder = Charts.newLineChart();\n builder.setTitle(&#39;X-axis Title&#39;)\n ",
                "!type": "fn(title: string) -> Charts.BarChartBuilder"
            },
            "setXAxisTitleTextStyle": {
                "!doc": "Sets the horizontal axis title text style.\n\n \n \n \/\/ Creates a line chart builder and sets the X-axis title text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setXAxisTitleTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> Charts.BarChartBuilder"
            },
            "setYAxisTextStyle": {
                "!doc": "Sets the vertical axis text style.\n\n \n \n \/\/ Creates a line chart builder and sets the Y-axis text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setYAxisTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> Charts.BarChartBuilder"
            },
            "setYAxisTitle": {
                "!doc": "Adds a title to the vertical axis.  The title will be centered and will appear to the\n left of the value labels.\n\n \n \n \/\/ Creates a line chart builder and sets the Y-axis title.\n var builder = Charts.newLineChart();\n builder.setYAxisTitle(&#39;Y-axis Title&#39;)\n ",
                "!type": "fn(title: string) -> Charts.BarChartBuilder"
            },
            "setYAxisTitleTextStyle": {
                "!doc": "Sets the vertical axis title text style.\n\n \n \n \/\/ Creates a line chart builder and sets the Y-axis title text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setYAxisTitleTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> Charts.BarChartBuilder"
            },
            "useLogScale": {
                "!doc": "Makes the range axis into a logarithmic scale (requires all values to be positive).  The range\n axis will be the vertical axis for vertical charts (line, area, column, etc.) and the\n horizontal axis for horizontal charts (bar, etc.)",
                "!type": "fn() -> Charts.BarChartBuilder"
            }
        },
        "Charts.CategoryFilterBuilder": {
            "build": {
                "!doc": "Builds a control.",
                "!type": "fn() -> Charts.Control"
            },
            "setAllowMultiple": {
                "!doc": "Sets whether multiple values can be selected, rather than just one. The default value of\n this option is true (allowing multiple selection).\n\n \n \n \/\/ Creates a category filter and disallows multiple value selection.\n var builder = Charts.newCategoryFilter().setAllowMultiple(false);\n ",
                "!type": "fn(allowMultiple: bool) -> Charts.CategoryFilterBuilder"
            },
            "setAllowNone": {
                "!doc": "Sets whether the user is allowed not to choose any value. If false the user must choose at\n least one value from the available ones. The default value of this option is true.\n\n \n \n \/\/ Creates a category filter and force the user to choose at least one value.\n var builder = Charts.newCategoryFilter().setAllowNone(false);\n ",
                "!type": "fn(allowNone: bool) -> Charts.CategoryFilterBuilder"
            },
            "setAllowTyping": {
                "!doc": "Sets whether the user is allowed to type in a text field to narrow down the list of possible\n choices (via an autocompleter), or not. The default value of this option is true (allowing the\n user to type in values in the picker).\n\n \n \n \/\/ Creates a category filter and disallows the user from typing in text to filter the values,\n \/\/ so the user must use the drop down to pick values.\n var builder = Charts.newCategoryFilter().setAllowTyping(false);\n ",
                "!type": "fn(allowTyping: bool) -> Charts.CategoryFilterBuilder"
            },
            "setCaption": {
                "!doc": "Sets the caption to display inside the value picker widget when no item is selected.\n\n \n \n \/\/ Creates a category filter with a caption.\n var builder = Charts.newCategoryFilter().setCaption(&#39;select a value&#39;);\n ",
                "!type": "fn(caption: string) -> Charts.CategoryFilterBuilder"
            },
            "setDataTable": {
                "!doc": "Sets the data table to use for the control using a DataTableBuilder.\n\n This is a convenience method for setting the data table without needing to call\n build().",
                "!type": "fn(tableBuilder: DataTableBuilder) -> Charts.CategoryFilterBuilder"
            },
            "setDataTable ": {
                "!doc": "Sets the control data table, which will be the control's underlying data model.",
                "!type": "fn(table: DataTableSource) -> Charts.CategoryFilterBuilder"
            },
            "setFilterColumnIndex": {
                "!doc": "Sets the index of the data table column to filter on.\n\n The values of that column will determine whether or not each row should be filtered.\n It is mandatory to set either this or the column label using\n setFilterColumnLabel(columnLabel).",
                "!type": "fn(columnIndex: number) -> Charts.CategoryFilterBuilder"
            },
            "setFilterColumnLabel": {
                "!doc": "Sets the label of the data table column to filter on.\n\n The values of that column will determine whether or not each row should be filtered.\n It is mandatory to set either this or a column index using setFilterColumnIndex(columnIndex).",
                "!type": "fn(columnLabel: string) -> Charts.CategoryFilterBuilder"
            },
            "setLabel": {
                "!doc": "Sets the label to display next to the slider.\n\n If unspecified, the label of the column the control operates on will be used.",
                "!type": "fn(label: string) -> Charts.CategoryFilterBuilder"
            },
            "setLabelSeparator": {
                "!doc": "Sets a separator string appended to the label, to visually separate the\n label from the category picker.",
                "!type": "fn(labelSeparator: string) -> Charts.CategoryFilterBuilder"
            },
            "setLabelStacking": {
                "!doc": "Sets whether the label should display above (vertical stacking) or beside (horizontal stacking)\n the input field.",
                "!type": "fn(orientation: Charts.Orientation) -> Charts.CategoryFilterBuilder"
            },
            "setSelectedValuesLayout": {
                "!doc": "Sets how to display selected values, when multiple selection is allowed.\n\n \n \n \/\/ Creates a category filter and sets it to display selected values below the picker.\n var builder = Charts.newCategoryFilter()\n     .setSelectedValuesLayout(Charts.PickerValuesLayout.BELOW);\n ",
                "!type": "fn(layout: Charts.PickerValuesLayout) -> Charts.CategoryFilterBuilder"
            },
            "setSortValues": {
                "!doc": "Sets whether the values to choose from should be sorted.\n\n \n \n \/\/ Creates a category filter that sorts the values.\n var builder = Charts.newCategoryFilter().setSortValues(true);\n ",
                "!type": "fn(sortValues: bool) -> Charts.CategoryFilterBuilder"
            },
            "setValues": {
                "!doc": "Sets the list of values (categories) the user can choose from.\n\n \n \n \/\/ Creates a category filter with two choices.\n var builder = Charts.newCategoryFilter().setValues([&#39;choice 1&#39;,&#39;choice 2&#39;]);\n ",
                "!type": "fn(values: [string]) -> Charts.CategoryFilterBuilder"
            }
        },
        "Charts.Chart": {
            "getAs": {
                "!doc": "Return the data inside this object as a blob converted to the specified content type. This\n method adds the appropriate extension to the filename ? for example, \"myfile.pdf\". However, it\n assumes that the part of the filename that follows the last period (if any) is an existing\n extension that should be replaced. Consequently, \"ChristmasList.12.25.2014\" will become\n \"ChristmasList.12.25.pdf\".",
                "!type": "fn(contentType: string) -> Blob"
            },
            "getBlob": {
                "!doc": "Return the data inside this object as a blob.",
                "!type": "fn() -> Blob"
            },
            "getId": {
                "!doc": "Returns the id that has been assigned to this object.\n \n This can be used in conjunction with app.getElementById() to retrieve a reference to this\n object.",
                "!type": "fn() -> string"
            },
            "getOptions": {
                "!doc": "Returns the options for this chart, such as height, colors, axes, etc.\n \n The returned options are immutable.",
                "!type": "fn() -> Charts.ChartOptions"
            },
            "getType": {
                "!doc": "Gets the type of this object.",
                "!type": "fn() -> string"
            },
            "setId": {
                "!doc": "Sets the id of this Chart to be used with UiApp.",
                "!type": "fn(id: string) -> Charts.Chart"
            }
        },
        "Charts.ChartOptions": {
            "get": {
                "!doc": "Returns a configured option for this chart.",
                "!type": "fn(option: string) -> object"
            }
        },
        "Charts.ChartType": {
            "AREA": {
                "!doc": "Area chart",
                "!type": "Charts.ChartType"
            },
            "BAR": {
                "!doc": "Bar chart",
                "!type": "Charts.ChartType"
            },
            "COLUMN": {
                "!doc": "Column chart",
                "!type": "Charts.ChartType"
            },
            "LINE": {
                "!doc": "Line chart",
                "!type": "Charts.ChartType"
            },
            "PIE": {
                "!doc": "Pie chart",
                "!type": "Charts.ChartType"
            },
            "SCATTER": {
                "!doc": "Scatter chart",
                "!type": "Charts.ChartType"
            },
            "TABLE": {
                "!doc": "Table chart",
                "!type": "Charts.ChartType"
            }
        },
        "Charts.ColumnChartBuilder": {
            "build": {
                "!doc": "Builds the chart.",
                "!type": "fn() -> Charts.Chart"
            },
            "reverseCategories": {
                "!doc": "Reverses the drawing of series in the domain axis.  For vertical-range charts (such as line,\n area or column charts), this means the horizontal axis is drawn from right to left.  For\n horizontal-range charts (such as bar charts), this means the vertical axis is drawn from top\n to bottom.  For pie charts, this means the slices are drawn counterclockwise.\n\n \n \n \/\/ Creates a pie chart builder and sets drawing of the slices in a counter-clockwise manner.\n var builder = Charts.newPieChart();\n builder.reverseCategories();\n ",
                "!type": "fn() -> Charts.ColumnChartBuilder"
            },
            "setBackgroundColor": {
                "!doc": "Sets the background color for the chart.\n\n \n \n \/\/ Creates a line chart builder and sets the background color to gray\n var builder = Charts.newLineChart();\n builder.setBackgroundColor(&quot;gray&quot;);\n ",
                "!type": "fn(cssValue: string) -> Charts.ColumnChartBuilder"
            },
            "setColors": {
                "!doc": "Sets the colors for the lines in the chart.\n\n \n \n \/\/ Creates a line chart builder and sets the first two lines to be drawn in green and red,\n \/\/ respectively.\n var builder = Charts.newLineChart();\n builder.setColors([&quot;green&quot;, &quot;red&quot;]);\n ",
                "!type": "fn(cssValues: [string]) -> Charts.ColumnChartBuilder"
            },
            "setDataSourceUrl": {
                "!doc": "Sets the data source URL that will be used to pull data in from an\n external source, such as Google Sheets.\n If a data source URL and a DataTable are provided, the data source URL is ignored.\n\n For more information about querying data sources, check out the \n Google Charts documentation.",
                "!type": "fn(url: string) -> Charts.ColumnChartBuilder"
            },
            "setDataTable": {
                "!doc": "Sets the data table to use for the chart using a DataTableBuilder.  This is a convenience\n method for setting the data table without needing to call build().",
                "!type": "fn(tableBuilder: DataTableBuilder) -> Charts.ColumnChartBuilder"
            },
            "setDataTable ": {
                "!doc": "Sets the data table which contains the lines for the chart, as well as the X-axis labels.\n The first column should be a string, and contain the horizontal axis labels. Any number of\n columns can follow, all must be numeric.  Each column is displayed as a separate line.",
                "!type": "fn(table: DataTableSource) -> Charts.ColumnChartBuilder"
            },
            "setDataViewDefinition": {
                "!doc": "Sets the data view definition to use for the chart.",
                "!type": "fn(dataViewDefinition: Charts.DataViewDefinition) -> Charts.ColumnChartBuilder"
            },
            "setDimensions": {
                "!doc": "Sets the dimensions for the chart.",
                "!type": "fn(width: number, height: number) -> Charts.ColumnChartBuilder"
            },
            "setLegendPosition": {
                "!doc": "Sets the position of the legend with respect to the chart.  By default, there will be no\n legend.\n\n \n \n \/\/ Creates a line chart builder and sets the legend position to right.\n var builder = Charts.newLineChart();\n builder.setLegendPosition(Charts.Position.RIGHT);\n ",
                "!type": "fn(position: Charts.Position) -> Charts.ColumnChartBuilder"
            },
            "setLegendTextStyle": {
                "!doc": "Sets the text style of the chart legend.\n\n \n \n \/\/ Creates a line chart builder and sets it up for a  blue, 26-point legend.\n var textStyleBuilder = Charts.newTextStyle().setColor(&#39;#0000FF&#39;).setFontSize(26);\n var style = textStyleBuilder.build();\n var builder = Charts.newLineChart();\n builder.setLegendTextStyle(style);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> Charts.ColumnChartBuilder"
            },
            "setOption": {
                "!doc": "Sets advanced options for this chart. See\n the available options for this chart.\n This method has no effect if the given option is invalid.\n\n \n\n \n \n \/\/ Build a column chart with a 1-second animation duration.\n var builder = Charts.newColumnChart();\n builder.setOption(&#39;animation.duration&#39;, 1000); \n var chart = builder.build();\n ",
                "!type": "fn(option: string, value: object) -> Charts.ColumnChartBuilder"
            },
            "setRange": {
                "!doc": "Sets the range for the chart.\n \n If any data points fall outside the range, the range will be expanded to include those data\n points.",
                "!type": "fn(start: number, end: number) -> Charts.ColumnChartBuilder"
            },
            "setStacked": {
                "!doc": "Uses stacked lines, meaning that line and bar values are stacked (accumulated).  By default,\n there is no stacking.",
                "!type": "fn() -> Charts.ColumnChartBuilder"
            },
            "setTitle": {
                "!doc": "Sets the title of the chart.  The title will be displayed centered above the chart.\n\n \n \n \/\/ Creates a line chart builder and title to &#39;My Line Chart&#39;.\n var builder = Charts.newLineChart();\n builder.setTitle(&#39;My Line Chart&#39;)\n ",
                "!type": "fn(chartTitle: string) -> Charts.ColumnChartBuilder"
            },
            "setTitleTextStyle": {
                "!doc": "Sets the text style of the chart title.\n\n \n \n \/\/ Creates a line chart builder and sets it up for a  blue, 26-point title.\n var textStyleBuilder = Charts.newTextStyle().setColor(&#39;#0000FF&#39;).setFontSize(26);\n var style = textStyleBuilder.build();\n var builder = Charts.newLineChart();\n builder.setTitleTextStyle(style);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> Charts.ColumnChartBuilder"
            },
            "setXAxisTextStyle": {
                "!doc": "Sets the horizontal axis text style.\n\n \n \n \/\/ Creates a line chart builder and sets the X-axis text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setXAxisTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> Charts.ColumnChartBuilder"
            },
            "setXAxisTitle": {
                "!doc": "Adds a title to the horizontal axis.  The title will be centered and will appear below\n the axis value labels.\n\n \n \n \/\/ Creates a line chart builder and sets the X-axis title.\n var builder = Charts.newLineChart();\n builder.setTitle(&#39;X-axis Title&#39;)\n ",
                "!type": "fn(title: string) -> Charts.ColumnChartBuilder"
            },
            "setXAxisTitleTextStyle": {
                "!doc": "Sets the horizontal axis title text style.\n\n \n \n \/\/ Creates a line chart builder and sets the X-axis title text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setXAxisTitleTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> Charts.ColumnChartBuilder"
            },
            "setYAxisTextStyle": {
                "!doc": "Sets the vertical axis text style.\n\n \n \n \/\/ Creates a line chart builder and sets the Y-axis text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setYAxisTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> Charts.ColumnChartBuilder"
            },
            "setYAxisTitle": {
                "!doc": "Adds a title to the vertical axis.  The title will be centered and will appear to the\n left of the value labels.\n\n \n \n \/\/ Creates a line chart builder and sets the Y-axis title.\n var builder = Charts.newLineChart();\n builder.setYAxisTitle(&#39;Y-axis Title&#39;)\n ",
                "!type": "fn(title: string) -> Charts.ColumnChartBuilder"
            },
            "setYAxisTitleTextStyle": {
                "!doc": "Sets the vertical axis title text style.\n\n \n \n \/\/ Creates a line chart builder and sets the Y-axis title text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setYAxisTitleTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> Charts.ColumnChartBuilder"
            },
            "useLogScale": {
                "!doc": "Makes the range axis into a logarithmic scale (requires all values to be positive).  The range\n axis will be the vertical axis for vertical charts (line, area, column, etc.) and the\n horizontal axis for horizontal charts (bar, etc.)",
                "!type": "fn() -> Charts.ColumnChartBuilder"
            }
        },
        "Charts.Control": {
            "getId": {
                "!doc": "Returns the id that has been assigned to this object.\n \n This can be used in conjunction with app.getElementById() to retrieve a reference to this\n object.",
                "!type": "fn() -> string"
            },
            "getType": {
                "!doc": "Gets the type of this object.",
                "!type": "fn() -> string"
            },
            "setId": {
                "!doc": "Sets the id of this Control to be used with UiApp.",
                "!type": "fn(id: string) -> Charts.Control"
            }
        },
        "Charts.CurveStyle": {
            "NORMAL": {
                "!doc": "Straight lines without curve",
                "!type": "Charts.CurveStyle"
            },
            "SMOOTH": {
                "!doc": "The angles of the line will be smoothed",
                "!type": "Charts.CurveStyle"
            }
        },
        "Charts.DashboardPanel": {
            "add": {
                "!doc": "Add a widget to the DashboardPanel.\n \n The DashboardPanel is a simple panel which contains a single widget in it. A good practice\n for building a dashboard to place all of its components (the charts and controls that are\n bound in it) in a complex panel (vertical or horizontal panel for example), and to add\n that panel to it.",
                "!type": "fn(widget: UiApp.Widget) -> Charts.DashboardPanel"
            },
            "getId": {
                "!doc": "Returns the id that has been assigned to this object.\n \n This can be used in conjunction with app.getElementById() to retrieve a reference to this\n object.",
                "!type": "fn() -> string"
            },
            "getType": {
                "!doc": "Gets the type of this object.",
                "!type": "fn() -> string"
            },
            "setId": {
                "!doc": "Sets the id of this DashboardPanel to be used with UiApp.",
                "!type": "fn(id: string) -> Charts.DashboardPanel"
            }
        },
        "Charts.DashboardPanelBuilder": {
            "bind": {
                "!doc": "Binds a control to a chart, so that the chart is redrawn whenever the control collects\n a user interaction that affects the data managed by the dashboard.\n \n For example, when binding a range selector to a chart, a user interaction will be sliding the\n the range selector to the desired range. The effect on the data will be keeping only the\n data that's in the chosen range.",
                "!type": "fn(control: Charts.Control, chart: Charts.Chart) -> Charts.DashboardPanelBuilder"
            },
            "bind ": {
                "!doc": "Binds multiple controls to multiple charts, so that the charts are redrawn whenever the\n controls collect a user interaction that affects the data managed by the dashboard. When\n binding multiple controls to a chart (or multiple charts), the data that's displayed in\n the chart is that which passes the filters of all of the controls (of this specific binding).\n \n For more information about object binding see the Gviz\n \n documentation.\n \n Here is an example that shows how multiple controls can be bound to a chart using a dashboard\n panel:\n \n \n function doGet() {\n   \/\/ Create a data table with some sample data.\n   var data = Charts.newDataTable()\n       .addColumn(Charts.ColumnType.STRING, &quot;Name&quot;)\n       .addColumn(Charts.ColumnType.NUMBER, &quot;Age&quot;)\n       .addRow([&quot;Michael&quot;, 18])\n       .addRow([&quot;Elisa&quot;, 12])\n       .addRow([&quot;John&quot;, 20])\n       .addRow([&quot;Jessica&quot;, 25])\n       .addRow([&quot;Aaron&quot;, 14])\n       .addRow([&quot;Margareth&quot;, 19])\n       .addRow([&quot;Miranda&quot;, 22])\n       .addRow([&quot;May&quot;, 20])\n       .build();\n\n   var chart = Charts.newBarChart()\n       .setTitle(&quot;Ages&quot;)\n       .build();\n\n   var stringFilter = Charts.newStringFilter()\n       .setFilterColumnLabel(&quot;Name&quot;)\n       .build();\n\n   var numberRangeFilter = Charts.newNumberRangeFilter()\n       .setFilterColumnLabel(&quot;Age&quot;)\n       .build();\n\n   \/\/ Create a dashboard panel binding both controls to the chart.\n   var dashboard = Charts.newDashboardPanel()\n       .setDataTable(data)\n       .bind([stringFilter, numberRangeFilter], [chart])\n       .build();\n\n   var uiApp = UiApp.createApplication().setTitle(&quot;My Dashboard&quot;);\n\n   var panel = uiApp.createVerticalPanel()\n       .setSpacing(50);\n\n   panel.add(stringFilter);\n   panel.add(numberRangeFilter);\n   panel.add(chart);\n   dashboard.add(panel);\n   uiApp.add(dashboard);\n   return uiApp;\n }\n ",
                "!type": "fn(controls: [Charts.Control], charts: [Charts.Chart]) -> Charts.DashboardPanelBuilder"
            },
            "build": {
                "!doc": "Builds a dashboard.",
                "!type": "fn() -> Charts.DashboardPanel"
            },
            "setDataTable": {
                "!doc": "Sets the data table to use for the dashboard using a DataTableBuilder.  This is a convenience\n method for setting the data table without needing to call build().",
                "!type": "fn(tableBuilder: DataTableBuilder) -> Charts.DashboardPanelBuilder"
            },
            "setDataTable ": {
                "!doc": "Sets the dashboard's data table, which will be the control's underlying data model.",
                "!type": "fn(source: DataTableSource) -> Charts.DashboardPanelBuilder"
            }
        },
        "Charts.DataViewDefinition": [

        ],
        "Charts.DataViewDefinitionBuilder": {
            "build": {
                "!doc": "Builds and returns the data view definition object that was built using this builder.",
                "!type": "fn() -> Charts.DataViewDefinition"
            },
            "setColumns": {
                "!doc": "Sets the indexes of the columns to include in the data view as well as specifying\n role-column information. This subset of column indexes refer to the columns of the\n data source that the data view will be derived from.\n \n A column role describes the purpose of the data in that column: for example,\n a column might hold data describing tooltip text, data point annotations, or\n uncertainty indicators. For more details, see \n DataTable Roles in the Google Charts\n documentation.\n \n Assuming a spreadsheet with the following data in A1:C3:\n \n   \"abc\", 20, \"blue\"\n   \"def\", 30, \"red\"\n   \"ghi\", 40, \"orange\"\n \n The following code creates a bar chart where each bar is a different color.\n The colors are assigned via a style \"role column\".\n\n \n var COLUMN_SPEC = [\n   0, \/\/ categories\n   1, \/\/ counts\n   {sourceColumn: 2, role: &#39;style&#39;}\n ];\n\n function roleColumnChart() {\n   var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();\n   var sheet = spreadsheet.getActiveSheet();\n   var viewSpec = Charts.newDataViewDefinition()\n       .setColumns(COLUMN_SPEC)\n       .build();\n   var chartBuilder = sheet.newChart()\n       .setChartType(Charts.ChartType.BAR)\n       .setDataViewDefinition(viewSpec)\n       .setOption(&#39;useFirstColumnAsDomain&#39;, true)\n       .setPosition(5, 1, 0, 0)\n       .setOption(&#39;hAxis&#39;, { title: &#39;Counts&#39; })\n       .setOption(&#39;vAxis&#39;, { title: &#39;Categories&#39; })\n       .addRange(sheet.getRange(&#39;A1:C3&#39;));\n   sheet.insertChart(chartBuilder.build());\n };\n ",
                "!type": "fn(columns: [object]) -> Charts.DataViewDefinitionBuilder"
            }
        },
        "Charts.LineChartBuilder": {
            "build": {
                "!doc": "Builds the chart.",
                "!type": "fn() -> Charts.Chart"
            },
            "reverseCategories": {
                "!doc": "Reverses the drawing of series in the domain axis.  For vertical-range charts (such as line,\n area or column charts), this means the horizontal axis is drawn from right to left.  For\n horizontal-range charts (such as bar charts), this means the vertical axis is drawn from top\n to bottom.  For pie charts, this means the slices are drawn counterclockwise.\n\n \n \n \/\/ Creates a pie chart builder and sets drawing of the slices in a counter-clockwise manner.\n var builder = Charts.newPieChart();\n builder.reverseCategories();\n ",
                "!type": "fn() -> Charts.LineChartBuilder"
            },
            "setBackgroundColor": {
                "!doc": "Sets the background color for the chart.\n\n \n \n \/\/ Creates a line chart builder and sets the background color to gray\n var builder = Charts.newLineChart();\n builder.setBackgroundColor(&quot;gray&quot;);\n ",
                "!type": "fn(cssValue: string) -> Charts.LineChartBuilder"
            },
            "setColors": {
                "!doc": "Sets the colors for the lines in the chart.\n\n \n \n \/\/ Creates a line chart builder and sets the first two lines to be drawn in green and red,\n \/\/ respectively.\n var builder = Charts.newLineChart();\n builder.setColors([&quot;green&quot;, &quot;red&quot;]);\n ",
                "!type": "fn(cssValues: [string]) -> Charts.LineChartBuilder"
            },
            "setCurveStyle": {
                "!doc": "Sets the style to use for curves in the chart.  See CurveStyle for allowed curve\n styles.\n\n \n \n \/\/ Creates a line chart builder and curves the lines in the chart.\n var builder = Charts.newLineChart();\n builder.setCurveStyle(Charts.CurveStyle.SMOOTH)\n ",
                "!type": "fn(style: Charts.CurveStyle) -> Charts.LineChartBuilder"
            },
            "setDataSourceUrl": {
                "!doc": "Sets the data source URL that will be used to pull data in from an\n external source, such as Google Sheets.\n If a data source URL and a DataTable are provided, the data source URL is ignored.\n\n For more information about querying data sources, check out the \n Google Charts documentation.",
                "!type": "fn(url: string) -> Charts.LineChartBuilder"
            },
            "setDataTable": {
                "!doc": "Sets the data table to use for the chart using a DataTableBuilder.  This is a convenience\n method for setting the data table without needing to call build().",
                "!type": "fn(tableBuilder: DataTableBuilder) -> Charts.LineChartBuilder"
            },
            "setDataTable ": {
                "!doc": "Sets the data table which contains the lines for the chart, as well as the X-axis labels.\n The first column should be a string, and contain the horizontal axis labels. Any number of\n columns can follow, all must be numeric.  Each column is displayed as a separate line.",
                "!type": "fn(table: DataTableSource) -> Charts.LineChartBuilder"
            },
            "setDataViewDefinition": {
                "!doc": "Sets the data view definition to use for the chart.",
                "!type": "fn(dataViewDefinition: Charts.DataViewDefinition) -> Charts.LineChartBuilder"
            },
            "setDimensions": {
                "!doc": "Sets the dimensions for the chart.",
                "!type": "fn(width: number, height: number) -> Charts.LineChartBuilder"
            },
            "setLegendPosition": {
                "!doc": "Sets the position of the legend with respect to the chart.  By default, there will be no\n legend.\n\n \n \n \/\/ Creates a line chart builder and sets the legend position to right.\n var builder = Charts.newLineChart();\n builder.setLegendPosition(Charts.Position.RIGHT);\n ",
                "!type": "fn(position: Charts.Position) -> Charts.LineChartBuilder"
            },
            "setLegendTextStyle": {
                "!doc": "Sets the text style of the chart legend.\n\n \n \n \/\/ Creates a line chart builder and sets it up for a  blue, 26-point legend.\n var textStyleBuilder = Charts.newTextStyle().setColor(&#39;#0000FF&#39;).setFontSize(26);\n var style = textStyleBuilder.build();\n var builder = Charts.newLineChart();\n builder.setLegendTextStyle(style);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> Charts.LineChartBuilder"
            },
            "setOption": {
                "!doc": "Sets advanced options for this chart. See\n the available options for this chart.\n This method has no effect if the given option is invalid.\n\n \n\n \n \n \/\/ Build a line chart with a 1-second animation duration.\n var builder = Charts.newLineChart();\n builder.setOption(&#39;animation.duration&#39;, 1000); \n var chart = builder.build();\n ",
                "!type": "fn(option: string, value: object) -> Charts.LineChartBuilder"
            },
            "setPointStyle": {
                "!doc": "Sets the style for points in the line.  By default, points will have no particular styles,\n and only the line will be visible.\n\n \n \n \/\/ Creates a line chart builder and sets large point style.\n var builder = Charts.newLineChart();\n builder.setPointStyle(Charts.PointStyle.LARGE);\n ",
                "!type": "fn(style: Charts.PointStyle) -> Charts.LineChartBuilder"
            },
            "setRange": {
                "!doc": "Sets the range for the chart.\n \n If any data points fall outside the range, the range will be expanded to include those data\n points.",
                "!type": "fn(start: number, end: number) -> Charts.LineChartBuilder"
            },
            "setTitle": {
                "!doc": "Sets the title of the chart.  The title will be displayed centered above the chart.\n\n \n \n \/\/ Creates a line chart builder and title to &#39;My Line Chart&#39;.\n var builder = Charts.newLineChart();\n builder.setTitle(&#39;My Line Chart&#39;)\n ",
                "!type": "fn(chartTitle: string) -> Charts.LineChartBuilder"
            },
            "setTitleTextStyle": {
                "!doc": "Sets the text style of the chart title.\n\n \n \n \/\/ Creates a line chart builder and sets it up for a  blue, 26-point title.\n var textStyleBuilder = Charts.newTextStyle().setColor(&#39;#0000FF&#39;).setFontSize(26);\n var style = textStyleBuilder.build();\n var builder = Charts.newLineChart();\n builder.setTitleTextStyle(style);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> Charts.LineChartBuilder"
            },
            "setXAxisTextStyle": {
                "!doc": "Sets the horizontal axis text style.\n\n \n \n \/\/ Creates a line chart builder and sets the X-axis text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setXAxisTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> Charts.LineChartBuilder"
            },
            "setXAxisTitle": {
                "!doc": "Adds a title to the horizontal axis.  The title will be centered and will appear below\n the axis value labels.\n\n \n \n \/\/ Creates a line chart builder and sets the X-axis title.\n var builder = Charts.newLineChart();\n builder.setTitle(&#39;X-axis Title&#39;)\n ",
                "!type": "fn(title: string) -> Charts.LineChartBuilder"
            },
            "setXAxisTitleTextStyle": {
                "!doc": "Sets the horizontal axis title text style.\n\n \n \n \/\/ Creates a line chart builder and sets the X-axis title text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setXAxisTitleTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> Charts.LineChartBuilder"
            },
            "setYAxisTextStyle": {
                "!doc": "Sets the vertical axis text style.\n\n \n \n \/\/ Creates a line chart builder and sets the Y-axis text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setYAxisTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> Charts.LineChartBuilder"
            },
            "setYAxisTitle": {
                "!doc": "Adds a title to the vertical axis.  The title will be centered and will appear to the\n left of the value labels.\n\n \n \n \/\/ Creates a line chart builder and sets the Y-axis title.\n var builder = Charts.newLineChart();\n builder.setYAxisTitle(&#39;Y-axis Title&#39;)\n ",
                "!type": "fn(title: string) -> Charts.LineChartBuilder"
            },
            "setYAxisTitleTextStyle": {
                "!doc": "Sets the vertical axis title text style.\n\n \n \n \/\/ Creates a line chart builder and sets the Y-axis title text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setYAxisTitleTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> Charts.LineChartBuilder"
            },
            "useLogScale": {
                "!doc": "Makes the range axis into a logarithmic scale (requires all values to be positive).  The range\n axis will be the vertical axis for vertical charts (line, area, column, etc.) and the\n horizontal axis for horizontal charts (bar, etc.)",
                "!type": "fn() -> Charts.LineChartBuilder"
            }
        },
        "Charts.MatchType": {
            "ANY": {
                "!doc": "Match any substring",
                "!type": "Charts.MatchType"
            },
            "EXACT": {
                "!doc": "Match exact values only",
                "!type": "Charts.MatchType"
            },
            "PREFIX": {
                "!doc": "Match prefixes starting from the beginning of the value",
                "!type": "Charts.MatchType"
            },
            "getName": {
                "!doc": "Returns the name of the MatchType to be used in the options JSON.",
                "!type": "fn() -> string"
            }
        },
        "Charts.NumberRangeFilterBuilder": {
            "build": {
                "!doc": "Builds a control.",
                "!type": "fn() -> Charts.Control"
            },
            "setDataTable": {
                "!doc": "Sets the data table to use for the control using a DataTableBuilder.\n\n This is a convenience method for setting the data table without needing to call\n build().",
                "!type": "fn(tableBuilder: DataTableBuilder) -> Charts.NumberRangeFilterBuilder"
            },
            "setDataTable ": {
                "!doc": "Sets the control data table, which will be the control's underlying data model.",
                "!type": "fn(table: DataTableSource) -> Charts.NumberRangeFilterBuilder"
            },
            "setFilterColumnIndex": {
                "!doc": "Sets the index of the data table column to filter on.\n\n The values of that column will determine whether or not each row should be filtered.\n It is mandatory to set either this or the column label using\n setFilterColumnLabel(columnLabel).",
                "!type": "fn(columnIndex: number) -> Charts.NumberRangeFilterBuilder"
            },
            "setFilterColumnLabel": {
                "!doc": "Sets the label of the data table column to filter on.\n\n The values of that column will determine whether or not each row should be filtered.\n It is mandatory to set either this or a column index using setFilterColumnIndex(columnIndex).",
                "!type": "fn(columnLabel: string) -> Charts.NumberRangeFilterBuilder"
            },
            "setLabel": {
                "!doc": "Sets the label to display next to the slider.\n\n If unspecified, the label of the column the control operates on will be used.",
                "!type": "fn(label: string) -> Charts.NumberRangeFilterBuilder"
            },
            "setLabelSeparator": {
                "!doc": "Sets a separator string appended to the label, to visually separate the\n label from the category picker.",
                "!type": "fn(labelSeparator: string) -> Charts.NumberRangeFilterBuilder"
            },
            "setLabelStacking": {
                "!doc": "Sets whether the label should display above (vertical stacking) or beside (horizontal stacking)\n the input field.",
                "!type": "fn(orientation: Charts.Orientation) -> Charts.NumberRangeFilterBuilder"
            },
            "setMaxValue": {
                "!doc": "Sets the maximum allowed value for the range lower extent. If undefined, the value\n will be inferred from the contents of the DataTable managed by the control.\n\n \n \n \/\/ Builds a number range filter and sets the maximum value to 100.\n var numberRangeFilter = Charts.newNumberRangeFilter()\n   .setFilterColumnLabel(&quot;Col2&quot;)\n   .setMaxValue(100)\n   .build();\n ",
                "!type": "fn(maxValue: number) -> Charts.NumberRangeFilterBuilder"
            },
            "setMinValue": {
                "!doc": "Sets the minimum allowed value for the range lower extent. If undefined, the value\n will be inferred from the contents of the DataTable managed by the control.\n\n \n \n \/\/ Builds a number range filter and sets the minimum value to 10.\n var numberRangeFilter = Charts.newNumberRangeFilter()\n   .setFilterColumnLabel(&quot;Col2&quot;)\n   .setMinValue(10)\n   .build();\n ",
                "!type": "fn(minValue: number) -> Charts.NumberRangeFilterBuilder"
            },
            "setOrientation": {
                "!doc": "Sets the slider orientation.\n\n \n \n \/\/ Builds a number range filter and sets it to have a horizontal orientation.\n var numberRangeFilter = Charts.newNumberRangeFilter()\n   .setFilterColumnLabel(&quot;Col2&quot;)\n   .setOrientation(Charts.Orientation.HORIZONTAL)\n   .build();\n ",
                "!type": "fn(orientation: Charts.Orientation) -> Charts.NumberRangeFilterBuilder"
            },
            "setShowRangeValues": {
                "!doc": "Sets whether to have labels next to the slider displaying extents of the selected range.\n\n \n \n \/\/ Builds a number range filter and enables showing of the number range values.\n var numberRangeFilter = Charts.newNumberRangeFilter()\n   .setFilterColumnLabel(&quot;Col2&quot;)\n   .setShowRangeValues(true)\n   .build();\n ",
                "!type": "fn(showRangeValues: bool) -> Charts.NumberRangeFilterBuilder"
            },
            "setTicks": {
                "!doc": "Sets the number of ticks (fixed positions in a range bar) a number range filter slider thumbs\n can fall in.\n\n \n \n \/\/ Builds a number range filter and sets the number of ticks for the range to 10.\n var numberRangeFilter = Charts.newNumberRangeFilter()\n   .setFilterColumnLabel(&quot;Col2&quot;)\n   .setTicks(10)\n   .build();\n ",
                "!type": "fn(ticks: number) -> Charts.NumberRangeFilterBuilder"
            }
        },
        "Charts.Orientation": {
            "HORIZONTAL": {
                "!doc": "Horizontal orientation",
                "!type": "Charts.Orientation"
            },
            "VERTICAL": {
                "!doc": "Vertical  orientation",
                "!type": "Charts.Orientation"
            }
        },
        "Charts.PickerValuesLayout": {
            "ASIDE": {
                "!doc": "Selected values will display in a single text line next to the value picker widget",
                "!type": "Charts.PickerValuesLayout"
            },
            "BELOW": {
                "!doc": "Selected values will display in a single text line below the widget",
                "!type": "Charts.PickerValuesLayout"
            },
            "BELOW_STACKED": {
                "!doc": "Selected values will be displayed in a column below the widget",
                "!type": "Charts.PickerValuesLayout"
            },
            "BELOW_WRAPPING": {
                "!doc": "Similar to below, but entries that cannot fit in the picker will wrap to a new line",
                "!type": "Charts.PickerValuesLayout"
            }
        },
        "Charts.PieChartBuilder": {
            "build": {
                "!doc": "Builds the chart.",
                "!type": "fn() -> Charts.Chart"
            },
            "reverseCategories": {
                "!doc": "Reverses the drawing of series in the domain axis.  For vertical-range charts (such as line,\n area or column charts), this means the horizontal axis is drawn from right to left.  For\n horizontal-range charts (such as bar charts), this means the vertical axis is drawn from top\n to bottom.  For pie charts, this means the slices are drawn counterclockwise.\n\n \n \n \/\/ Creates a pie chart builder and sets drawing of the slices in a counter-clockwise manner.\n var builder = Charts.newPieChart();\n builder.reverseCategories();\n ",
                "!type": "fn() -> Charts.PieChartBuilder"
            },
            "set3D": {
                "!doc": "Sets the chart to be three-dimensional.",
                "!type": "fn() -> Charts.PieChartBuilder"
            },
            "setBackgroundColor": {
                "!doc": "Sets the background color for the chart.\n\n \n \n \/\/ Creates a line chart builder and sets the background color to gray\n var builder = Charts.newLineChart();\n builder.setBackgroundColor(&quot;gray&quot;);\n ",
                "!type": "fn(cssValue: string) -> Charts.PieChartBuilder"
            },
            "setColors": {
                "!doc": "Sets the colors for the lines in the chart.\n\n \n \n \/\/ Creates a line chart builder and sets the first two lines to be drawn in green and red,\n \/\/ respectively.\n var builder = Charts.newLineChart();\n builder.setColors([&quot;green&quot;, &quot;red&quot;]);\n ",
                "!type": "fn(cssValues: [string]) -> Charts.PieChartBuilder"
            },
            "setDataSourceUrl": {
                "!doc": "Sets the data source URL that will be used to pull data in from an\n external source, such as Google Sheets.\n If a data source URL and a DataTable are provided, the data source URL is ignored.\n\n For more information about querying data sources, check out the \n Google Charts documentation.",
                "!type": "fn(url: string) -> Charts.PieChartBuilder"
            },
            "setDataTable": {
                "!doc": "Sets the data table to use for the chart using a DataTableBuilder.  This is a convenience\n method for setting the data table without needing to call build().",
                "!type": "fn(tableBuilder: DataTableBuilder) -> Charts.PieChartBuilder"
            },
            "setDataTable ": {
                "!doc": "Sets the data table which contains the lines for the chart, as well as the X-axis labels.\n The first column should be a string, and contain the horizontal axis labels. Any number of\n columns can follow, all must be numeric.  Each column is displayed as a separate line.",
                "!type": "fn(table: DataTableSource) -> Charts.PieChartBuilder"
            },
            "setDataViewDefinition": {
                "!doc": "Sets the data view definition to use for the chart.",
                "!type": "fn(dataViewDefinition: Charts.DataViewDefinition) -> Charts.PieChartBuilder"
            },
            "setDimensions": {
                "!doc": "Sets the dimensions for the chart.",
                "!type": "fn(width: number, height: number) -> Charts.PieChartBuilder"
            },
            "setLegendPosition": {
                "!doc": "Sets the position of the legend with respect to the chart.  By default, there will be no\n legend.\n\n \n \n \/\/ Creates a line chart builder and sets the legend position to right.\n var builder = Charts.newLineChart();\n builder.setLegendPosition(Charts.Position.RIGHT);\n ",
                "!type": "fn(position: Charts.Position) -> Charts.PieChartBuilder"
            },
            "setLegendTextStyle": {
                "!doc": "Sets the text style of the chart legend.\n\n \n \n \/\/ Creates a line chart builder and sets it up for a  blue, 26-point legend.\n var textStyleBuilder = Charts.newTextStyle().setColor(&#39;#0000FF&#39;).setFontSize(26);\n var style = textStyleBuilder.build();\n var builder = Charts.newLineChart();\n builder.setLegendTextStyle(style);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> Charts.PieChartBuilder"
            },
            "setOption": {
                "!doc": "Sets advanced options for this chart. See\n the available options for this chart.\n This method has no effect if the given option is invalid.\n\n \n\n \n \n \/\/ Build a pie chart with a pretty legend.\n var builder = Charts.newPieChart();\n builder.setOption(&#39;legend&#39;, {textStyle: {color: &#39;blue&#39;, fontSize: 16}}); \n var chart = builder.build();\n ",
                "!type": "fn(option: string, value: object) -> Charts.PieChartBuilder"
            },
            "setTitle": {
                "!doc": "Sets the title of the chart.  The title will be displayed centered above the chart.\n\n \n \n \/\/ Creates a line chart builder and title to &#39;My Line Chart&#39;.\n var builder = Charts.newLineChart();\n builder.setTitle(&#39;My Line Chart&#39;)\n ",
                "!type": "fn(chartTitle: string) -> Charts.PieChartBuilder"
            },
            "setTitleTextStyle": {
                "!doc": "Sets the text style of the chart title.\n\n \n \n \/\/ Creates a line chart builder and sets it up for a  blue, 26-point title.\n var textStyleBuilder = Charts.newTextStyle().setColor(&#39;#0000FF&#39;).setFontSize(26);\n var style = textStyleBuilder.build();\n var builder = Charts.newLineChart();\n builder.setTitleTextStyle(style);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> Charts.PieChartBuilder"
            }
        },
        "Charts.PointStyle": {
            "HUGE": {
                "!doc": "Use largest sized line points",
                "!type": "Charts.PointStyle"
            },
            "LARGE": {
                "!doc": "Use large sized line points",
                "!type": "Charts.PointStyle"
            },
            "MEDIUM": {
                "!doc": "Use medium sized line points",
                "!type": "Charts.PointStyle"
            },
            "NONE": {
                "!doc": "Do not display line points",
                "!type": "Charts.PointStyle"
            },
            "TINY": {
                "!doc": "Use tiny line points",
                "!type": "Charts.PointStyle"
            }
        },
        "Charts.Position": {
            "BOTTOM": {
                "!doc": "Below the chart.",
                "!type": "Charts.Position"
            },
            "NONE": {
                "!doc": "No legend is displayed.",
                "!type": "Charts.Position"
            },
            "RIGHT": {
                "!doc": "To the right of the chart.",
                "!type": "Charts.Position"
            },
            "TOP": {
                "!doc": "Above the chart.",
                "!type": "Charts.Position"
            }
        },
        "Charts.ScatterChartBuilder": {
            "build": {
                "!doc": "Builds the chart.",
                "!type": "fn() -> Charts.Chart"
            },
            "setBackgroundColor": {
                "!doc": "Sets the background color for the chart.\n\n \n \n \/\/ Creates a line chart builder and sets the background color to gray\n var builder = Charts.newLineChart();\n builder.setBackgroundColor(&quot;gray&quot;);\n ",
                "!type": "fn(cssValue: string) -> Charts.ScatterChartBuilder"
            },
            "setColors": {
                "!doc": "Sets the colors for the lines in the chart.\n\n \n \n \/\/ Creates a line chart builder and sets the first two lines to be drawn in green and red,\n \/\/ respectively.\n var builder = Charts.newLineChart();\n builder.setColors([&quot;green&quot;, &quot;red&quot;]);\n ",
                "!type": "fn(cssValues: [string]) -> Charts.ScatterChartBuilder"
            },
            "setDataSourceUrl": {
                "!doc": "Sets the data source URL that will be used to pull data in from an\n external source, such as Google Sheets.\n If a data source URL and a DataTable are provided, the data source URL is ignored.\n\n For more information about querying data sources, check out the \n Google Charts documentation.",
                "!type": "fn(url: string) -> Charts.ScatterChartBuilder"
            },
            "setDataTable": {
                "!doc": "Sets the data table to use for the chart using a DataTableBuilder.  This is a convenience\n method for setting the data table without needing to call build().",
                "!type": "fn(tableBuilder: DataTableBuilder) -> Charts.ScatterChartBuilder"
            },
            "setDataTable ": {
                "!doc": "Sets the data table which contains the lines for the chart, as well as the X-axis labels.\n The first column should be a string, and contain the horizontal axis labels. Any number of\n columns can follow, all must be numeric.  Each column is displayed as a separate line.",
                "!type": "fn(table: DataTableSource) -> Charts.ScatterChartBuilder"
            },
            "setDataViewDefinition": {
                "!doc": "Sets the data view definition to use for the chart.",
                "!type": "fn(dataViewDefinition: Charts.DataViewDefinition) -> Charts.ScatterChartBuilder"
            },
            "setDimensions": {
                "!doc": "Sets the dimensions for the chart.",
                "!type": "fn(width: number, height: number) -> Charts.ScatterChartBuilder"
            },
            "setLegendPosition": {
                "!doc": "Sets the position of the legend with respect to the chart.  By default, there will be no\n legend.\n\n \n \n \/\/ Creates a line chart builder and sets the legend position to right.\n var builder = Charts.newLineChart();\n builder.setLegendPosition(Charts.Position.RIGHT);\n ",
                "!type": "fn(position: Charts.Position) -> Charts.ScatterChartBuilder"
            },
            "setLegendTextStyle": {
                "!doc": "Sets the text style of the chart legend.\n\n \n \n \/\/ Creates a line chart builder and sets it up for a  blue, 26-point legend.\n var textStyleBuilder = Charts.newTextStyle().setColor(&#39;#0000FF&#39;).setFontSize(26);\n var style = textStyleBuilder.build();\n var builder = Charts.newLineChart();\n builder.setLegendTextStyle(style);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> Charts.ScatterChartBuilder"
            },
            "setOption": {
                "!doc": "Sets advanced options for this chart. See\n the available options for this chart.\n This method has no effect if the given option is invalid.\n\n \n\n \n \n \/\/ Build a scatter chart with a 1-second animation duration.\n var builder = Charts.newScatterChart();\n builder.setOption(&#39;animation.duration&#39;, 1000); \n var chart = builder.build();\n ",
                "!type": "fn(option: string, value: object) -> Charts.ScatterChartBuilder"
            },
            "setPointStyle": {
                "!doc": "Sets the style for points in the line.  By default, points will have no particular styles,\n and only the line will be visible.\n\n \n \n \/\/ Creates a line chart builder and sets large point style.\n var builder = Charts.newLineChart();\n builder.setPointStyle(Charts.PointStyle.LARGE);\n ",
                "!type": "fn(style: Charts.PointStyle) -> Charts.ScatterChartBuilder"
            },
            "setTitle": {
                "!doc": "Sets the title of the chart.  The title will be displayed centered above the chart.\n\n \n \n \/\/ Creates a line chart builder and title to &#39;My Line Chart&#39;.\n var builder = Charts.newLineChart();\n builder.setTitle(&#39;My Line Chart&#39;)\n ",
                "!type": "fn(chartTitle: string) -> Charts.ScatterChartBuilder"
            },
            "setTitleTextStyle": {
                "!doc": "Sets the text style of the chart title.\n\n \n \n \/\/ Creates a line chart builder and sets it up for a  blue, 26-point title.\n var textStyleBuilder = Charts.newTextStyle().setColor(&#39;#0000FF&#39;).setFontSize(26);\n var style = textStyleBuilder.build();\n var builder = Charts.newLineChart();\n builder.setTitleTextStyle(style);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> Charts.ScatterChartBuilder"
            },
            "setXAxisLogScale": {
                "!doc": "Makes the horizontal axis into a logarithmic scale (requires all values to be positive).",
                "!type": "fn() -> Charts.ScatterChartBuilder"
            },
            "setXAxisRange": {
                "!doc": "Sets the range for the horizontal axis of the chart.\n \n If any data points fall outside the range, the range will be expanded to include those data\n points.\n\n \n \n \/\/ Creates a scatter chart builder and sets the X-axis range to be 0 to 100.\n var builder = Charts.newTableChart();\n builder.setXAxisRange(0, 100);\n ",
                "!type": "fn(start: number, end: number) -> Charts.ScatterChartBuilder"
            },
            "setXAxisTextStyle": {
                "!doc": "Sets the horizontal axis text style.\n\n \n \n \/\/ Creates a line chart builder and sets the X-axis text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setXAxisTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> Charts.ScatterChartBuilder"
            },
            "setXAxisTitle": {
                "!doc": "Adds a title to the horizontal axis.  The title will be centered and will appear below\n the axis value labels.\n\n \n \n \/\/ Creates a line chart builder and sets the X-axis title.\n var builder = Charts.newLineChart();\n builder.setTitle(&#39;X-axis Title&#39;)\n ",
                "!type": "fn(title: string) -> Charts.ScatterChartBuilder"
            },
            "setXAxisTitleTextStyle": {
                "!doc": "Sets the horizontal axis title text style.\n\n \n \n \/\/ Creates a line chart builder and sets the X-axis title text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setXAxisTitleTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> Charts.ScatterChartBuilder"
            },
            "setYAxisLogScale": {
                "!doc": "Makes the vertical axis into a logarithmic scale (requires all values to be positive).",
                "!type": "fn() -> Charts.ScatterChartBuilder"
            },
            "setYAxisRange": {
                "!doc": "Sets the range for the vertical axis of the chart. If any data points fall outside the range,\n the range will be expanded to include those data points.\n\n \n \n \/\/ Creates a scatter chart builder and sets the Y-axis range to be 0 to 100.\n var builder = Charts.newTableChart();\n builder.setYAxisRange(0, 100);\n ",
                "!type": "fn(start: number, end: number) -> Charts.ScatterChartBuilder"
            },
            "setYAxisTextStyle": {
                "!doc": "Sets the vertical axis text style.\n\n \n \n \/\/ Creates a line chart builder and sets the Y-axis text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setYAxisTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> Charts.ScatterChartBuilder"
            },
            "setYAxisTitle": {
                "!doc": "Adds a title to the vertical axis.  The title will be centered and will appear to the\n left of the value labels.\n\n \n \n \/\/ Creates a line chart builder and sets the Y-axis title.\n var builder = Charts.newLineChart();\n builder.setYAxisTitle(&#39;Y-axis Title&#39;)\n ",
                "!type": "fn(title: string) -> Charts.ScatterChartBuilder"
            },
            "setYAxisTitleTextStyle": {
                "!doc": "Sets the vertical axis title text style.\n\n \n \n \/\/ Creates a line chart builder and sets the Y-axis title text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setYAxisTitleTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> Charts.ScatterChartBuilder"
            }
        },
        "Charts.StringFilterBuilder": {
            "build": {
                "!doc": "Builds a control.",
                "!type": "fn() -> Charts.Control"
            },
            "setCaseSensitive": {
                "!doc": "Sets whether matching should be case sensitive or not.\n\n \n \n \/\/ Builds a case insensitive string filter to filter column &quot;Col1&quot;.\n var stringFilter = Charts.newStringFilter()\n   .setFilterColumnLabel(&quot;Col1&quot;)\n   .setCaseSensitive(false)\n   .build();\n ",
                "!type": "fn(caseSensitive: bool) -> Charts.StringFilterBuilder"
            },
            "setDataTable": {
                "!doc": "Sets the data table to use for the control using a DataTableBuilder.\n\n This is a convenience method for setting the data table without needing to call\n build().",
                "!type": "fn(tableBuilder: DataTableBuilder) -> Charts.StringFilterBuilder"
            },
            "setDataTable ": {
                "!doc": "Sets the control data table, which will be the control's underlying data model.",
                "!type": "fn(table: DataTableSource) -> Charts.StringFilterBuilder"
            },
            "setFilterColumnIndex": {
                "!doc": "Sets the index of the data table column to filter on.\n\n The values of that column will determine whether or not each row should be filtered.\n It is mandatory to set either this or the column label using\n setFilterColumnLabel(columnLabel).",
                "!type": "fn(columnIndex: number) -> Charts.StringFilterBuilder"
            },
            "setFilterColumnLabel": {
                "!doc": "Sets the label of the data table column to filter on.\n\n The values of that column will determine whether or not each row should be filtered.\n It is mandatory to set either this or a column index using setFilterColumnIndex(columnIndex).",
                "!type": "fn(columnLabel: string) -> Charts.StringFilterBuilder"
            },
            "setLabel": {
                "!doc": "Sets the label to display next to the slider.\n\n If unspecified, the label of the column the control operates on will be used.",
                "!type": "fn(label: string) -> Charts.StringFilterBuilder"
            },
            "setLabelSeparator": {
                "!doc": "Sets a separator string appended to the label, to visually separate the\n label from the category picker.",
                "!type": "fn(labelSeparator: string) -> Charts.StringFilterBuilder"
            },
            "setLabelStacking": {
                "!doc": "Sets whether the label should display above (vertical stacking) or beside (horizontal stacking)\n the input field.",
                "!type": "fn(orientation: Charts.Orientation) -> Charts.StringFilterBuilder"
            },
            "setMatchType": {
                "!doc": "Sets whether the control should match exact values only (MatchType.EXACT), prefixes\n starting from the beginning of the value (MatchType.PREFIX), or any substring\n (MatchType.ANY).\n\n \n \n \/\/ Builds a string filter to filter column &quot;Col1&quot; matching the prefix.\n var stringFilter = Charts.newStringFilter()\n   .setFilterColumnLabel(&quot;Col1&quot;)\n   .setMatchType(Charts.MatchType.PREFIX)\n   .build();\n ",
                "!type": "fn(matchType: Charts.MatchType) -> Charts.StringFilterBuilder"
            },
            "setRealtimeTrigger": {
                "!doc": "Sets whether the control should match any time a key is pressed or only when the input field\n 'changes' (loss of focus or pressing the Enter key).\n\n \n \n \/\/ Builds a string filter to filter column &quot;Col1&quot; that checks the match any time a key is\n \/\/ pressed.\n var stringFilter = Charts.newStringFilter()\n   .setFilterColumnLabel(&quot;Col1&quot;)\n   .setRealtimeTrigger(true)\n   .build();\n ",
                "!type": "fn(realtimeTrigger: bool) -> Charts.StringFilterBuilder"
            }
        },
        "Charts.TableChartBuilder": {
            "build": {
                "!doc": "Builds the chart.",
                "!type": "fn() -> Charts.Chart"
            },
            "enablePaging": {
                "!doc": "Sets whether to enable paging through the data.\n \n The default behavior is paging disabled. If paging is enabled the default page size is 10.",
                "!type": "fn(enablePaging: bool) -> Charts.TableChartBuilder"
            },
            "enablePaging ": {
                "!doc": "Enables paging and sets the number of rows in each page.\n \n The default page size is 10.\n\n \n \n \/\/ Creates a table chart builder and enables paging with page size of 5.\n var builder = Charts.newTableChart();\n builder.enablePaging(5);\n ",
                "!type": "fn(pageSize: number) -> Charts.TableChartBuilder"
            },
            "enablePaging  ": {
                "!doc": "Enables paging, sets the number of rows in each page and the first table page to display\n (page numbers are zero based).\n \n The default page size is 10, and the default start page is 0.\n\n \n \n \/\/ Creates a table chart builder and enables paging with page size of 5 and displays page 2\n \/\/ first.\n var builder = Charts.newTableChart();\n builder.enablePaging(5, 2);\n ",
                "!type": "fn(pageSize: number, startPage: number) -> Charts.TableChartBuilder"
            },
            "enableRtlTable": {
                "!doc": "Adds basic support for right-to-left languages (such as Arabic or Hebrew) by reversing\n the column order of the table, so that column zero is the right-most column, and the last\n column is the left-most column.\n \n This does not affect the column index in the underlying data, only the order of display.\n Full bi-directional (BiDi) language display is not supported by\n the table visualization even with this option. This option will be ignored if you enable\n paging (using the page option), or if the table has scroll bars because you have specified\n height and width options smaller than the required table size.\n The default behavior is RTL support disabled.",
                "!type": "fn(rtlEnabled: bool) -> Charts.TableChartBuilder"
            },
            "enableSorting": {
                "!doc": "Sets whether to sort columns when the user clicks a column heading.\n \n If sorting is enabled, when users click on the column header the rows will be automatically\n sorted. The default behavior is sorting enabled.",
                "!type": "fn(enableSorting: bool) -> Charts.TableChartBuilder"
            },
            "setDataSourceUrl": {
                "!doc": "Sets the data source URL that will be used to pull data in from an\n external source, such as Google Sheets.\n If a data source URL and a DataTable are provided, the data source URL is ignored.\n\n For more information about querying data sources, check out the \n Google Charts documentation.",
                "!type": "fn(url: string) -> Charts.TableChartBuilder"
            },
            "setDataTable": {
                "!doc": "Sets the data table to use for the chart using a DataTableBuilder.  This is a convenience\n method for setting the data table without needing to call build().",
                "!type": "fn(tableBuilder: DataTableBuilder) -> Charts.TableChartBuilder"
            },
            "setDataTable ": {
                "!doc": "Sets the data table which contains the lines for the chart, as well as the X-axis labels.\n The first column should be a string, and contain the horizontal axis labels. Any number of\n columns can follow, all must be numeric.  Each column is displayed as a separate line.",
                "!type": "fn(table: DataTableSource) -> Charts.TableChartBuilder"
            },
            "setDataViewDefinition": {
                "!doc": "Sets the data view definition to use for the chart.",
                "!type": "fn(dataViewDefinition: Charts.DataViewDefinition) -> Charts.TableChartBuilder"
            },
            "setDimensions": {
                "!doc": "Sets the dimensions for the chart.",
                "!type": "fn(width: number, height: number) -> Charts.TableChartBuilder"
            },
            "setFirstRowNumber": {
                "!doc": "Sets the row number for the first row in the data table.\n \n The default row number of the first row is 1.\n\n \n \n \/\/ Creates a table chart builder and sets the first row to be 2.\n var builder = Charts.newTableChart();\n builder.setFirstRowNumber(2);\n ",
                "!type": "fn(number: number) -> Charts.TableChartBuilder"
            },
            "setInitialSortingAscending": {
                "!doc": "Sets the index of the column according to which the table should be initially sorted\n (ascending).\n \n The column will be sorted in ascending order and will be marked with a small arrow\n indicating that.\n\n \n \n \/\/ Creates a table chart builder and sorts it by the second column (ascending).\n var builder = Charts.newTableChart();\n builder.setInitialSortingAscending(2);\n ",
                "!type": "fn(column: number) -> Charts.TableChartBuilder"
            },
            "setInitialSortingDescending": {
                "!doc": "Sets the index of the column according to which the table should be initially sorted\n (descending).\n \n The column will be sorted in descending order and be marked with a a small arrow\n indicating that.\n\n \n \n \/\/ Creates a table chart builder and sorts it by the second column (descending).\n var builder = Charts.newTableChart();\n builder.setInitialSortingDescending(2);\n ",
                "!type": "fn(column: number) -> Charts.TableChartBuilder"
            },
            "setOption": {
                "!doc": "Sets advanced options for this chart. See\n the available options for this chart.\n This method has no effect if the given option is invalid.\n\n \n\n \n \n \/\/ Build a table chart which renders HTML.\n var builder = Charts.newTableChart();\n builder.setOption(&#39;allowHtml&#39;, true); \n var chart = builder.build();\n ",
                "!type": "fn(option: string, value: object) -> Charts.TableChartBuilder"
            },
            "showRowNumberColumn": {
                "!doc": "Sets whether to show the row number as the first column of the table.\n \n The default behavior is not showing row numbers.",
                "!type": "fn(showRowNumber: bool) -> Charts.TableChartBuilder"
            },
            "useAlternatingRowStyle": {
                "!doc": "Sets whether alternating color style will be assigned to odd and even rows of a table\n chart.\n \n The default behavior is the rows having alternating color style.",
                "!type": "fn(alternate: bool) -> Charts.TableChartBuilder"
            }
        },
        "Charts.TextStyle": {
            "getColor": {
                "!doc": "Gets the color of the text style.\n\n \n \n \/\/ Creates a new text style that uses blue text and logs the color.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).build();\n Logger.log(textStyle.getColor());\n ",
                "!type": "fn() -> string"
            },
            "getFontName": {
                "!doc": "Gets the font name of the text style.\n\n \n \n \/\/ Creates a new text style that uses Ariel font and logs the font name.\n var textStyle = Charts.newTextStyle().setFontName(&#39;Ariel&#39;).build();\n Logger.log(textStyle.getFontName());\n ",
                "!type": "fn() -> string"
            },
            "getFontSize": {
                "!doc": "Gets the font size of the text style.\n\n \n \n \/\/ Creates a new text style that uses 18 pixel font size and logs the font size.\n var textStyle = Charts.newTextStyle().setFontSize(18).build();\n Logger.log(textStyle.getFontSize());\n ",
                "!type": "fn() -> number"
            }
        },
        "Charts.TextStyleBuilder": {
            "build": {
                "!doc": "Builds and returns a text style configuration object that was built using this builder.\n\n \n \n \/\/ Creates a new text style that uses 26-point blue font.\n var textStyleBuilder = Charts.newTextStyle().setColor(&#39;#0000FF&#39;).setFontSize(26);\n var style = textStyleBuilder.build();\n ",
                "!type": "fn() -> Charts.TextStyle"
            },
            "setColor": {
                "!doc": "Sets the color of the text style.\n\n \n \n \/\/ Creates a new text style that uses blue font.\n var textStyleBuilder = Charts.newTextStyle().setColor(&#39;#0000FF&#39;);\n var style = textStyleBuilder.build();\n ",
                "!type": "fn(cssValue: string) -> Charts.TextStyleBuilder"
            },
            "setFontName": {
                "!doc": "Sets the font name of the text style\n\n \n \n \/\/ Creates a new text style that uses Ariel font.\n var textStyleBuilder = Charts.newTextStyle().setFontName(&#39;Ariel&#39;);\n var style = textStyleBuilder.build();\n ",
                "!type": "fn(fontName: string) -> Charts.TextStyleBuilder"
            },
            "setFontSize": {
                "!doc": "Sets the font size of the text style.\n\n \n \n \/\/ Creates a new text style that uses 26-point font.\n var textStyleBuilder = Charts.newTextStyle().setFontSize(26);\n var style = textStyleBuilder.build();\n ",
                "!type": "fn(fontSize: number) -> Charts.TextStyleBuilder"
            }
        },
        "ColumnType": {
            "DATE": {
                "!doc": "Corresponds to date values.",
                "!type": "ColumnType"
            },
            "NUMBER": {
                "!doc": "Corresponds to number values.",
                "!type": "ColumnType"
            },
            "STRING": {
                "!doc": "Corresponds to string values.",
                "!type": "ColumnType"
            }
        },
        "DataTable": [

        ],
        "DataTableBuilder": {
            "addColumn": {
                "!doc": "Adds a column to the data table.  Columns will be added from 0 to n.\n\n The first column is often used by charts for labels (for instance, X-axis labels on line\n charts, or slice labels in pie charts).  The other columns are often used for data and\n therefore often require numeric values.",
                "!type": "fn(type: ColumnType, label: string) -> DataTableBuilder"
            },
            "addRow": {
                "!doc": "Adds a row to the data table.",
                "!type": "fn(values: [object]) -> DataTableBuilder"
            },
            "build": {
                "!doc": "Builds and returns a data table.",
                "!type": "fn() -> DataTable"
            },
            "setValue": {
                "!doc": "Sets a specific value in the table.\n\n You may set a value before adding the column to the data table.  However, unless the column\n is added at some point, the value will be ignored.\n\n Not all column values need to be filled in.  Those missing will be considered null.",
                "!type": "fn(row: number, column: number, value: object) -> DataTableBuilder"
            }
        },
        "DataTableSource": {
            "getDataTable": {
                "!doc": "Return the data inside this object as a DataTable.",
                "!type": "fn() -> DataTable"
            }
        },
        "DigestAlgorithm": {
            "MD2": {
                "!doc": "",
                "!type": "DigestAlgorithm"
            },
            "MD5": {
                "!doc": "",
                "!type": "DigestAlgorithm"
            },
            "SHA_1": {
                "!doc": "",
                "!type": "DigestAlgorithm"
            },
            "SHA_256": {
                "!doc": "",
                "!type": "DigestAlgorithm"
            },
            "SHA_384": {
                "!doc": "",
                "!type": "DigestAlgorithm"
            },
            "SHA_512": {
                "!doc": "",
                "!type": "DigestAlgorithm"
            }
        },
        "DriveApp.Access": {
            "ANYONE": {
                "!doc": "Anyone on the Internet can find and access. No sign-in required.\n\n Domain administrators can prohibit this setting for users of Google Apps for Business,\n Google Apps for Education, or Google Apps for Your Domain. If the setting is disabled, passing\n this value to File.setSharing(accessType, permissionType) throws an exception.",
                "!type": "DriveApp.Access"
            },
            "ANYONE_WITH_LINK": {
                "!doc": "Anyone who has the link can access. No sign-in required.\n\n Domain administrators can prohibit this setting for users of Google Apps for Business,\n Google Apps for Education, or Google Apps for Your Domain. If the setting is disabled, passing\n this value to File.setSharing(accessType, permissionType) throws an exception.",
                "!type": "DriveApp.Access"
            },
            "DOMAIN": {
                "!doc": "People in your domain can find and access. Sign-in required.\n\n This setting is available only for users of Google Apps for Business, Google Apps for\n Education, or Google Apps for Your Domain. For other types of Google accounts, passing this\n value to File.setSharing(accessType, permissionType) throws an exception.",
                "!type": "DriveApp.Access"
            },
            "DOMAIN_WITH_LINK": {
                "!doc": "People in your domain who have the link can access. Sign-in required.\n\n This setting is available only for users of Google Apps for Business, Google Apps for\n Education, or Google Apps for Your Domain. For other types of Google accounts, passing this\n value to File.setSharing(accessType, permissionType) throws an exception.",
                "!type": "DriveApp.Access"
            },
            "PRIVATE": {
                "!doc": "Only people explicitly granted permission can access. Sign-in required.",
                "!type": "DriveApp.Access"
            }
        },
        "DriveApp.File": {
            "addCommenter": {
                "!doc": "Add the given user to the list of commenters for the File. If the user was\n already on the list of viewers, this method promotes the user out of the list of viewers.",
                "!type": "fn(emailAddress: string) -> DriveApp.File"
            },
            "addCommenter ": {
                "!doc": "Add the given user to the list of commenters for the File. If the user was\n already on the list of viewers, this method promotes the user out of the list of viewers.",
                "!type": "fn(user: User) -> DriveApp.File"
            },
            "addCommenters": {
                "!doc": "Add the given array of users to the list of commenters for the File. If any\n of the users were already on the list of viewers, this method promotes them out of the list of\n viewers.",
                "!type": "fn(emailAddresses: [string]) -> DriveApp.File"
            },
            "addEditor": {
                "!doc": "Adds the given user to the list of editors for the File. If the user was already\n on the list of viewers, this method promotes the user out of the list of viewers.",
                "!type": "fn(emailAddress: string) -> DriveApp.File"
            },
            "addEditor ": {
                "!doc": "Adds the given user to the list of editors for the File. If the user was already\n on the list of viewers, this method promotes the user out of the list of viewers.",
                "!type": "fn(user: User) -> DriveApp.File"
            },
            "addEditors": {
                "!doc": "Adds the given array of users to the list of editors for the File. If any of the\n users were already on the list of viewers, this method promotes them out of the list of\n viewers.",
                "!type": "fn(emailAddresses: [string]) -> DriveApp.File"
            },
            "addViewer": {
                "!doc": "Adds the given user to the list of viewers for the File. If the user was already\n on the list of editors, this method has no effect.",
                "!type": "fn(emailAddress: string) -> DriveApp.File"
            },
            "addViewer ": {
                "!doc": "Adds the given user to the list of viewers for the File. If the user was already\n on the list of editors, this method has no effect.",
                "!type": "fn(user: User) -> DriveApp.File"
            },
            "addViewers": {
                "!doc": "Adds the given array of users to the list of viewers for the File. If any of the\n users were already on the list of editors, this method has no effect for them.",
                "!type": "fn(emailAddresses: [string]) -> DriveApp.File"
            },
            "getAccess": {
                "!doc": "Gets the permission granted to the given user.",
                "!type": "fn(email: string) -> DriveApp.Permission"
            },
            "getAccess ": {
                "!doc": "Gets the permission granted to the given user.",
                "!type": "fn(user: User) -> DriveApp.Permission"
            },
            "getAs": {
                "!doc": "Return the data inside this object as a blob converted to the specified content type. This\n method adds the appropriate extension to the filename ? for example, \"myfile.pdf\". However, it\n assumes that the part of the filename that follows the last period (if any) is an existing\n extension that should be replaced. Consequently, \"ChristmasList.12.25.2014\" will become\n \"ChristmasList.12.25.pdf\".",
                "!type": "fn(contentType: string) -> Blob"
            },
            "getBlob": {
                "!doc": "Return the data inside this object as a blob.",
                "!type": "fn() -> Blob"
            },
            "getDateCreated": {
                "!doc": "Gets the date the File was created.",
                "!type": "fn() -> Date"
            },
            "getDescription": {
                "!doc": "Gets the description for the File.",
                "!type": "fn() -> string"
            },
            "getDownloadUrl": {
                "!doc": "Gets the URL that can be used to download the file. Only users with permission to open the\n file in Google Drive can access the URL.",
                "!type": "fn() -> string"
            },
            "getEditors": {
                "!doc": "Gets the list of editors for this File. If the user who executes the script\n does not have edit access to the File, this method returns an empty array.",
                "!type": "fn() -> [DriveApp.User]"
            },
            "getId": {
                "!doc": "Gets the ID of the File.",
                "!type": "fn() -> string"
            },
            "getLastUpdated": {
                "!doc": "Gets the date the File was last updated.",
                "!type": "fn() -> Date"
            },
            "getMimeType": {
                "!doc": "Gets the MIME type of the file.",
                "!type": "fn() -> string"
            },
            "getName": {
                "!doc": "Gets the name of the File.",
                "!type": "fn() -> string"
            },
            "getOwner": {
                "!doc": "Gets the owner of the File.",
                "!type": "fn() -> DriveApp.User"
            },
            "getParents": {
                "!doc": "Gets a collection of folders that are immediate parents of the File.",
                "!type": "fn() -> DriveApp.FolderIterator"
            },
            "getSharingAccess": {
                "!doc": "Gets which class of users can access the File, besides any individual\n users who have been explicitly given access.",
                "!type": "fn() -> DriveApp.Access"
            },
            "getSharingPermission": {
                "!doc": "Gets the permission granted to those users who can access the File,\n besides any individual users who have been explicitly given access.",
                "!type": "fn() -> DriveApp.Permission"
            },
            "getSize": {
                "!doc": "Gets the number of bytes used to store the File in Drive. Note that\n Google Apps files do not count toward Drive storage limits and thus return 0 bytes.",
                "!type": "fn() -> number"
            },
            "getThumbnail": {
                "!doc": "Gets a thumbnail image for the file, or null if no thumbnail exists.",
                "!type": "fn() -> Blob"
            },
            "getUrl": {
                "!doc": "Gets the URL that can be used to open the File in a Google App like\n Drive or Docs.",
                "!type": "fn() -> string"
            },
            "getViewers": {
                "!doc": "Gets the list of viewers and commenters for this File.  If the user who\n executes the script does not have edit access to the File, this method\n returns an empty array.",
                "!type": "fn() -> [DriveApp.User]"
            },
            "isShareableByEditors": {
                "!doc": "Determines whether users with edit permissions to the File are allowed to\n share with other users or change the permissions.",
                "!type": "fn() -> bool"
            },
            "isStarred": {
                "!doc": "Determines whether the File has been starred in the user's Drive.",
                "!type": "fn() -> bool"
            },
            "isTrashed": {
                "!doc": "Determines whether the File is in the trash of the user's Drive.",
                "!type": "fn() -> bool"
            },
            "makeCopy": {
                "!doc": "Creates a copy of the file.",
                "!type": "fn() -> DriveApp.File"
            },
            "makeCopy ": {
                "!doc": "Creates a copy of the file in the destination directory.",
                "!type": "fn(destination: DriveApp.Folder) -> DriveApp.File"
            },
            "makeCopy  ": {
                "!doc": "Creates a copy of the file and names it with the name provided.",
                "!type": "fn(name: string) -> DriveApp.File"
            },
            "makeCopy   ": {
                "!doc": "Creates a copy of the file in the destination directory and names it with the name provided.",
                "!type": "fn(name: string, destination: DriveApp.Folder) -> DriveApp.File"
            },
            "removeCommenter": {
                "!doc": "Removes the given user from the list of commenters for the File.  This method\n does not block users from access the File if they belong to a class of users\n who have general access ? for example, if the File is shared with the user's\n entire domain.",
                "!type": "fn(emailAddress: string) -> DriveApp.File"
            },
            "removeCommenter ": {
                "!doc": "Removes the given user from the list of commenters for the File.  This method\n does not block users from access the File if they belong to a class of users\n who have general access ? for example, if the File is shared with the user's\n entire domain.",
                "!type": "fn(user: User) -> DriveApp.File"
            },
            "removeEditor": {
                "!doc": "Removes the given user from the list of editors for the File. This method does not\n block users from accessing the File if they belong to a class of users who have\n general access ? for example, if the File is shared with the user's entire domain.",
                "!type": "fn(emailAddress: string) -> DriveApp.File"
            },
            "removeEditor ": {
                "!doc": "Removes the given user from the list of editors for the File. This method does not\n block users from accessing the File if they belong to a class of users who have\n general access ? for example, if the File is shared with the user's entire domain.",
                "!type": "fn(user: User) -> DriveApp.File"
            },
            "removeViewer": {
                "!doc": "Removes the given user from the list of viewers and commenters for the File.  This\n method has no effect if the user is an editor, not a viewer or commenter. This method also does\n not block users from accessing the File if they belong to a class of users who\n have general access ? for example, if the File is shared with the user's entire\n domain.",
                "!type": "fn(emailAddress: string) -> DriveApp.File"
            },
            "removeViewer ": {
                "!doc": "Removes the given user from the list of viewers and commenters for the File.  This\n method has no effect if the user is an editor, not a viewer. This method also does not block\n users from accessing the File if they belong to a class of users who have general\n access ? for example, if the File is shared with the user's entire domain.",
                "!type": "fn(user: User) -> DriveApp.File"
            },
            "revokePermissions": {
                "!doc": "Revokes the access to the File granted to the given user. This method does\n not block users from accessing the File if they belong to a class of users\n who have general access ? for example, if the File is shared with the user's\n entire domain.",
                "!type": "fn(user: string) -> DriveApp.File"
            },
            "revokePermissions ": {
                "!doc": "Revokes the access to the File granted to the given user. This method does\n not block users from accessing the File if they belong to a class of users\n who have general access ? for example, if the File is shared with the user's\n entire domain.",
                "!type": "fn(user: User) -> DriveApp.File"
            },
            "setContent": {
                "!doc": "Overwrites the content of the file with a given replacement. Throws an exception if\n content is larger than 10MB.\n\n Beware: this change is irreversible.",
                "!type": "fn(content: string) -> DriveApp.File"
            },
            "setDescription": {
                "!doc": "Sets the description for the File.",
                "!type": "fn(description: string) -> DriveApp.File"
            },
            "setName": {
                "!doc": "Sets the name of the File.",
                "!type": "fn(name: string) -> DriveApp.File"
            },
            "setOwner": {
                "!doc": "Changes the owner of the File. This method also gives the previous owner\n explicit edit access to the File.",
                "!type": "fn(emailAddress: string) -> DriveApp.File"
            },
            "setOwner ": {
                "!doc": "Changes the owner of the File. This method also gives the previous owner\n explicit edit access to the File.",
                "!type": "fn(user: User) -> DriveApp.File"
            },
            "setShareableByEditors": {
                "!doc": "Sets whether users with edit permissions to the File are allowed to share\n with other users or change the permissions. The default for a new File is\n true.",
                "!type": "fn(shareable: bool) -> DriveApp.File"
            },
            "setSharing": {
                "!doc": "Sets which class of users can access the File and what permissions\n those users are granted, besides any individual users who have been explicitly given access.\n\n \n \/\/ Creates a folder that anyone on the Internet can read from and write to. (Domain\n \/\/ administrators can prohibit this setting for users of Google Apps for Business, Google Apps\n \/\/ for Education, or Google Apps for Your Domain.)\n var folder = DriveApp.createFolder('Shared Folder');\n folder.setSharing(DriveApp.Access.ANYONE, DriveApp.Permission.EDIT);\n ",
                "!type": "fn(accessType: DriveApp.Access, permissionType: DriveApp.Permission) -> DriveApp.File"
            },
            "setStarred": {
                "!doc": "Sets whether the File is starred in the user's Drive. The default for\n new Files is false.",
                "!type": "fn(starred: bool) -> DriveApp.File"
            },
            "setTrashed": {
                "!doc": "Sets whether the File is in the trash of the user's Drive. The default\n for new Files is false.",
                "!type": "fn(trashed: bool) -> DriveApp.File"
            }
        },
        "DriveApp.FileIterator": {
            "getContinuationToken": {
                "!doc": "Gets a token that can be used to resume this iteration at a later time. This method is\n useful if processing an iterator in one execution would exceed the maximum execution\n time. Continuation tokens are generally valid for one week.",
                "!type": "fn() -> string"
            },
            "hasNext": {
                "!doc": "Determines whether calling next() will return an item.",
                "!type": "fn() -> bool"
            },
            "next": {
                "!doc": "Gets the next item in the collection of files or folders. Throws an exception if no items\n remain.",
                "!type": "fn() -> DriveApp.File"
            }
        },
        "DriveApp.Folder": {
            "addEditor": {
                "!doc": "Adds the given user to the list of editors for the Folder. If the user was already\n on the list of viewers, this method promotes the user out of the list of viewers.",
                "!type": "fn(emailAddress: string) -> DriveApp.Folder"
            },
            "addEditor ": {
                "!doc": "Adds the given user to the list of editors for the Folder. If the user was already\n on the list of viewers, this method promotes the user out of the list of viewers.",
                "!type": "fn(user: User) -> DriveApp.Folder"
            },
            "addEditors": {
                "!doc": "Adds the given array of users to the list of editors for the Folder. If any of the\n users were already on the list of viewers, this method promotes them out of the list of\n viewers.",
                "!type": "fn(emailAddresses: [string]) -> DriveApp.Folder"
            },
            "addFile": {
                "!doc": "Adds the given file to the current folder. This method does not move the file out of its\n existing parent folder; a file can have more than one parent simultaneously.",
                "!type": "fn(child: DriveApp.File) -> DriveApp.Folder"
            },
            "addFolder": {
                "!doc": "Adds the given folder to the current folder. This method does not move the folder out of\n its existing parent folder; a folder can have more than one parent simultaneously.",
                "!type": "fn(child: DriveApp.Folder) -> DriveApp.Folder"
            },
            "addViewer": {
                "!doc": "Adds the given user to the list of viewers for the Folder. If the user was already\n on the list of editors, this method has no effect.",
                "!type": "fn(emailAddress: string) -> DriveApp.Folder"
            },
            "addViewer ": {
                "!doc": "Adds the given user to the list of viewers for the Folder. If the user was already\n on the list of editors, this method has no effect.",
                "!type": "fn(user: User) -> DriveApp.Folder"
            },
            "addViewers": {
                "!doc": "Adds the given array of users to the list of viewers for the Folder. If any of the\n users were already on the list of editors, this method has no effect for them.",
                "!type": "fn(emailAddresses: [string]) -> DriveApp.Folder"
            },
            "createFile": {
                "!doc": "Creates a file in the current folder from a given Blob of arbitrary data.\n\n \n \/\/ Create an image file in Google Drive using the Maps service.\n var blob = Maps.newStaticMap().setCenter('76 9th Avenue, New York NY').getBlob();\n DriveApp.getRootFolder().createFile(blob);\n ",
                "!type": "fn(blob: BlobSource) -> DriveApp.File"
            },
            "createFile ": {
                "!doc": "Creates a text file in the current folder with the given name and contents. Throws an\n exception if content is larger than 10MB.\n\n \n \/\/ Create a text file with the content \"Hello, world!\"\n DriveApp.getRootFolder().createFile('New Text File', 'Hello, world!');\n ",
                "!type": "fn(name: string, content: string) -> DriveApp.File"
            },
            "createFile  ": {
                "!doc": "Creates a file in the current folder with the given name, contents, and MIME type. Throws\n an exception if content is larger than 10MB.\n\n \n \n \/\/ Create an HTML file with the content &quot;Hello, world!&quot;\n DriveApp.getRootFolder().createFile(&#39;New HTML File&#39;, &#39;&lt;b&gt;Hello, world!&lt;\/b&gt;&#39;, MimeType.HTML);\n \n ",
                "!type": "fn(name: string, content: string, mimeType: string) -> DriveApp.File"
            },
            "createFolder": {
                "!doc": "Creates a folder in the current folder with the given name.",
                "!type": "fn(name: string) -> DriveApp.Folder"
            },
            "getAccess": {
                "!doc": "Gets the permission granted to the given user.",
                "!type": "fn(email: string) -> DriveApp.Permission"
            },
            "getAccess ": {
                "!doc": "Gets the permission granted to the given user.",
                "!type": "fn(user: User) -> DriveApp.Permission"
            },
            "getDateCreated": {
                "!doc": "Gets the date the Folder was created.",
                "!type": "fn() -> Date"
            },
            "getDescription": {
                "!doc": "Gets the description for the Folder.",
                "!type": "fn() -> string"
            },
            "getEditors": {
                "!doc": "Gets the list of editors for this Folder. If the user who executes the script\n does not have edit access to the Folder, this method returns an empty array.",
                "!type": "fn() -> [DriveApp.User]"
            },
            "getFiles": {
                "!doc": "Gets a collection of all files that are children of the current folder.",
                "!type": "fn() -> DriveApp.FileIterator"
            },
            "getFilesByName": {
                "!doc": "Gets a collection of all files that are children of the current folder and have the given name.",
                "!type": "fn(name: string) -> DriveApp.FileIterator"
            },
            "getFilesByType": {
                "!doc": "Gets a collection of all files that are children of the current folder and have the given MIME type.",
                "!type": "fn(mimeType: string) -> DriveApp.FileIterator"
            },
            "getFolders": {
                "!doc": "Gets a collection of all folders that are children of the current folder.",
                "!type": "fn() -> DriveApp.FolderIterator"
            },
            "getFoldersByName": {
                "!doc": "Gets a collection of all folders that are children of the current folder and have the given name.",
                "!type": "fn(name: string) -> DriveApp.FolderIterator"
            },
            "getId": {
                "!doc": "Gets the ID of the Folder.",
                "!type": "fn() -> string"
            },
            "getLastUpdated": {
                "!doc": "Gets the date the Folder was last updated.",
                "!type": "fn() -> Date"
            },
            "getName": {
                "!doc": "Gets the name of the Folder.",
                "!type": "fn() -> string"
            },
            "getOwner": {
                "!doc": "Gets the owner of the Folder.",
                "!type": "fn() -> DriveApp.User"
            },
            "getParents": {
                "!doc": "Gets a collection of folders that are immediate parents of the Folder.",
                "!type": "fn() -> DriveApp.FolderIterator"
            },
            "getSharingAccess": {
                "!doc": "Gets which class of users can access the Folder, besides any individual\n users who have been explicitly given access.",
                "!type": "fn() -> DriveApp.Access"
            },
            "getSharingPermission": {
                "!doc": "Gets the permission granted to those users who can access the Folder,\n besides any individual users who have been explicitly given access.",
                "!type": "fn() -> DriveApp.Permission"
            },
            "getSize": {
                "!doc": "Gets the number of bytes used to store the Folder in Drive. Note that\n Google Apps files do not count toward Drive storage limits and thus return 0 bytes.",
                "!type": "fn() -> number"
            },
            "getUrl": {
                "!doc": "Gets the URL that can be used to open the Folder in a Google App like\n Drive or Docs.",
                "!type": "fn() -> string"
            },
            "getViewers": {
                "!doc": "Gets the list of viewers and commenters for this Folder.  If the user who\n executes the script does not have edit access to the Folder, this method\n returns an empty array.",
                "!type": "fn() -> [DriveApp.User]"
            },
            "isShareableByEditors": {
                "!doc": "Determines whether users with edit permissions to the Folder are allowed to\n share with other users or change the permissions.",
                "!type": "fn() -> bool"
            },
            "isStarred": {
                "!doc": "Determines whether the Folder has been starred in the user's Drive.",
                "!type": "fn() -> bool"
            },
            "isTrashed": {
                "!doc": "Determines whether the Folder is in the trash of the user's Drive.",
                "!type": "fn() -> bool"
            },
            "removeEditor": {
                "!doc": "Removes the given user from the list of editors for the Folder. This method does not\n block users from accessing the Folder if they belong to a class of users who have\n general access ? for example, if the Folder is shared with the user's entire domain.",
                "!type": "fn(emailAddress: string) -> DriveApp.Folder"
            },
            "removeEditor ": {
                "!doc": "Removes the given user from the list of editors for the Folder. This method does not\n block users from accessing the Folder if they belong to a class of users who have\n general access ? for example, if the Folder is shared with the user's entire domain.",
                "!type": "fn(user: User) -> DriveApp.Folder"
            },
            "removeFile": {
                "!doc": "Removes the given file from the current folder. This method does not delete the file, but\n if a file is removed from all of its parents, it cannot be seen in Drive except by searching\n for it or using the \"All items\" view.",
                "!type": "fn(child: DriveApp.File) -> DriveApp.Folder"
            },
            "removeFolder": {
                "!doc": "Removes the given folder from the current folder. This method does not delete the folder\n or its contents, but if a folder is removed from all of its parents, it cannot be seen in Drive\n except by searching for it or using the \"All items\" view.",
                "!type": "fn(child: DriveApp.Folder) -> DriveApp.Folder"
            },
            "removeViewer": {
                "!doc": "Removes the given user from the list of viewers and commenters for the Folder.  This\n method has no effect if the user is an editor, not a viewer or commenter. This method also does\n not block users from accessing the Folder if they belong to a class of users who\n have general access ? for example, if the Folder is shared with the user's entire\n domain.",
                "!type": "fn(emailAddress: string) -> DriveApp.Folder"
            },
            "removeViewer ": {
                "!doc": "Removes the given user from the list of viewers and commenters for the Folder.  This\n method has no effect if the user is an editor, not a viewer. This method also does not block\n users from accessing the Folder if they belong to a class of users who have general\n access ? for example, if the Folder is shared with the user's entire domain.",
                "!type": "fn(user: User) -> DriveApp.Folder"
            },
            "revokePermissions": {
                "!doc": "Revokes the access to the Folder granted to the given user. This method does\n not block users from accessing the Folder if they belong to a class of users\n who have general access ? for example, if the Folder is shared with the user's\n entire domain.",
                "!type": "fn(user: string) -> DriveApp.Folder"
            },
            "revokePermissions ": {
                "!doc": "Revokes the access to the Folder granted to the given user. This method does\n not block users from accessing the Folder if they belong to a class of users\n who have general access ? for example, if the Folder is shared with the user's\n entire domain.",
                "!type": "fn(user: User) -> DriveApp.Folder"
            },
            "searchFiles": {
                "!doc": "Gets a collection of all files that are children of the current folder and match the given search\n criteria. The search criteria are detailed the Google Drive\n SDK documentation. Note that the params argument is a query string that may\n contain string values, so take care to escape quotation marks correctly (for example\n &quot;title contains &#39;Gulliver\\\\&#39;s Travels&#39;&quot; or &#39;title contains &quot;Gulliver\\&#39;s\n Travels&quot;&#39;).\n\n \n \/\/ Log the name of every file that are children of the current folder and modified after February 28,\n \/\/ 2013 whose name contains \"untitled\".\n var files = DriveApp.getRootFolder().searchFiles(\n     'modifiedDate > \"2013-02-28\" and title contains \"untitled\"');\n while (files.hasNext()) {\n   var file = files.next();\n   Logger.log(file.getName());\n }\n ",
                "!type": "fn(params: string) -> DriveApp.FileIterator"
            },
            "searchFolders": {
                "!doc": "Gets a collection of all folders that are children of the current folder and match the given search\n criteria. The search criteria are detailed the Google Drive\n SDK documentation. Note that the params argument is a query string that may\n contain string values, so take care to escape quotation marks correctly (for example\n &quot;title contains &#39;Gulliver\\\\&#39;s Travels&#39;&quot; or &#39;title contains &quot;Gulliver\\&#39;s\n Travels&quot;&#39;).\n\n \n \/\/ Log the name of every folder that are children of the current folder and you own and is starred.\n var folders = DriveApp.getRootFolder().searchFolders('starred = true and \"me\" in owners');\n while (folders.hasNext()) {\n   var folder = folders.next();\n   Logger.log(folder.getName());\n }\n ",
                "!type": "fn(params: string) -> DriveApp.FolderIterator"
            },
            "setDescription": {
                "!doc": "Sets the description for the Folder.",
                "!type": "fn(description: string) -> DriveApp.Folder"
            },
            "setName": {
                "!doc": "Sets the name of the Folder.",
                "!type": "fn(name: string) -> DriveApp.Folder"
            },
            "setOwner": {
                "!doc": "Changes the owner of the Folder. This method also gives the previous owner\n explicit edit access to the Folder.",
                "!type": "fn(emailAddress: string) -> DriveApp.Folder"
            },
            "setOwner ": {
                "!doc": "Changes the owner of the Folder. This method also gives the previous owner\n explicit edit access to the Folder.",
                "!type": "fn(user: User) -> DriveApp.Folder"
            },
            "setShareableByEditors": {
                "!doc": "Sets whether users with edit permissions to the Folder are allowed to share\n with other users or change the permissions. The default for a new Folder is\n true.",
                "!type": "fn(shareable: bool) -> DriveApp.Folder"
            },
            "setSharing": {
                "!doc": "Sets which class of users can access the Folder and what permissions\n those users are granted, besides any individual users who have been explicitly given access.\n\n \n \/\/ Creates a folder that anyone on the Internet can read from and write to. (Domain\n \/\/ administrators can prohibit this setting for users of Google Apps for Business, Google Apps\n \/\/ for Education, or Google Apps for Your Domain.)\n var folder = DriveApp.createFolder('Shared Folder');\n folder.setSharing(DriveApp.Access.ANYONE, DriveApp.Permission.EDIT);\n ",
                "!type": "fn(accessType: DriveApp.Access, permissionType: DriveApp.Permission) -> DriveApp.Folder"
            },
            "setStarred": {
                "!doc": "Sets whether the Folder is starred in the user's Drive. The default for\n new Folders is false.",
                "!type": "fn(starred: bool) -> DriveApp.Folder"
            },
            "setTrashed": {
                "!doc": "Sets whether the Folder is in the trash of the user's Drive. The default\n for new Folders is false.",
                "!type": "fn(trashed: bool) -> DriveApp.Folder"
            }
        },
        "DriveApp.FolderIterator": {
            "getContinuationToken": {
                "!doc": "Gets a token that can be used to resume this iteration at a later time. This method is\n useful if processing an iterator in one execution would exceed the maximum execution\n time. Continuation tokens are generally valid for one week.",
                "!type": "fn() -> string"
            },
            "hasNext": {
                "!doc": "Determines whether calling next() will return an item.",
                "!type": "fn() -> bool"
            },
            "next": {
                "!doc": "Gets the next item in the collection of files or folders. Throws an exception if no items\n remain.",
                "!type": "fn() -> DriveApp.Folder"
            }
        },
        "DriveApp.Permission": {
            "COMMENT": {
                "!doc": "Users who can access the file or folder are able only to view it, copy it, or comment on it.\n Passing this value to File.setSharing(accessType, permissionType) throws an exception if\n the type of file does not support it.",
                "!type": "DriveApp.Permission"
            },
            "EDIT": {
                "!doc": "Users who can access the file or folder are able to edit it. Unless\n File.setShareableByEditors(shareable) is set to false, users can also change the\n sharing settings.  Passing this value to File.setSharing(accessType, permissionType)\n throws an exception if the type of file does not support it.",
                "!type": "DriveApp.Permission"
            },
            "NONE": {
                "!doc": "The user does not have any permissions for the file or folder. This value can be returned, but\n passing it to File.setSharing(accessType, permissionType) throws an exception unless it\n is set in combination with Access.ANYONE.",
                "!type": "DriveApp.Permission"
            },
            "OWNER": {
                "!doc": "The user owns the file or folder. This value can be returned, but passing it to\n File.setSharing(accessType, permissionType) throws an exception.",
                "!type": "DriveApp.Permission"
            },
            "VIEW": {
                "!doc": "Users who can access the file or folder are able only to view it or copy it. Passing this value\n to File.setSharing(accessType, permissionType) throws an exception if the type of file\n does not support it.",
                "!type": "DriveApp.Permission"
            }
        },
        "DriveApp.User": {
            "getDomain": {
                "!doc": "Gets the domain name associated with the user's account.\n\n \n \n \/\/ Log the domain names associated with all users who have edit access to a file.\n var file = DriveApp.getFileById(&#39;1234567890abcdefghijklmnopqrstuvwxyz&#39;);\n var editors = file.getEditors();\n for (var i = 0; i &lt; editors.length; i++) {\n   Logger.log(editors[i].getDomain());\n }\n ",
                "!type": "fn() -> string"
            },
            "getEmail": {
                "!doc": "Gets the user's email address. The user's email address is only available if the user has\n chosen to share the address from the Google+ account settings page, or if the user belongs to\n the same domain as the user running the script and the domain administrator has allowed all\n users within the domain to see other users' email addresses.\n\n \n \n \/\/ Log the email address of all users who have edit access to a file.\n var file = DriveApp.getFileById(&#39;1234567890abcdefghijklmnopqrstuvwxyz&#39;);\n var editors = file.getEditors();\n for (var i = 0; i &lt; editors.length; i++) {\n   Logger.log(editors[i].getEmail());\n }\n ",
                "!type": "fn() -> string"
            },
            "getName": {
                "!doc": "Gets the user's name. This method returns null if the user's name is not available.\n\n \n \n \/\/ Log the names of all users who have edit access to a file.\n var file = DriveApp.getFileById(&#39;1234567890abcdefghijklmnopqrstuvwxyz&#39;);\n var editors = file.getEditors();\n for (var i = 0; i &lt; editors.length; i++) {\n   Logger.log(editors[i].getName());\n }\n ",
                "!type": "fn() -> string"
            },
            "getPhotoUrl": {
                "!doc": "Gets the URL for the user's photo. This method returns null if the user's photo is not\n available.\n\n \n \n \/\/ Log the URLs for the photos of all users who have edit access to a file.\n var file = DriveApp.getFileById(&#39;1234567890abcdefghijklmnopqrstuvwxyz&#39;);\n var editors = file.getEditors();\n for (var i = 0; i &lt; editors.length; i++) {\n   Logger.log(editors[i].getPhotoUrl());\n }\n ",
                "!type": "fn() -> string"
            },
            "getUserLoginId": {
                "!doc": "Gets the user's email address.\n\n \n \/\/ Log the email address of the person running the script.\n Logger.log(Session.getActiveUser().getUserLoginId());\n ",
                "!type": "fn() -> string"
            }
        },
        "Fusiontables.Collection.ColumnCollection": {
            "get": {
                "!type": "fn(tableId: string, columnId: string) -> Fusiontables.Schema.Column"
            },
            "insert": {
                "!type": "fn(resource: Fusiontables.Schema.Column, tableId: string) -> Fusiontables.Schema.Column"
            },
            "list": {
                "!type": "fn(tableId: string) -> Fusiontables.Schema.ColumnList"
            },
            "list ": {
                "!type": "fn(tableId: string, optionalArgs: object) -> Fusiontables.Schema.ColumnList"
            },
            "patch": {
                "!type": "fn(resource: Fusiontables.Schema.Column, tableId: string, columnId: string) -> Fusiontables.Schema.Column"
            },
            "remove": {
                "!type": "fn(tableId: string, columnId: string)"
            },
            "update": {
                "!type": "fn(resource: Fusiontables.Schema.Column, tableId: string, columnId: string) -> Fusiontables.Schema.Column"
            }
        },
        "Fusiontables.Collection.QueryCollection": {
            "sql": {
                "!type": "fn(sql: string) -> Fusiontables.Schema.Sqlresponse"
            },
            "sql ": {
                "!type": "fn(sql: string, optionalArgs: object) -> Fusiontables.Schema.Sqlresponse"
            },
            "sqlGet": {
                "!type": "fn(sql: string) -> Fusiontables.Schema.Sqlresponse"
            },
            "sqlGet ": {
                "!type": "fn(sql: string, optionalArgs: object) -> Fusiontables.Schema.Sqlresponse"
            }
        },
        "Fusiontables.Collection.StyleCollection": {
            "get": {
                "!type": "fn(tableId: string, styleId: number) -> Fusiontables.Schema.StyleSetting"
            },
            "insert": {
                "!type": "fn(resource: Fusiontables.Schema.StyleSetting, tableId: string) -> Fusiontables.Schema.StyleSetting"
            },
            "list": {
                "!type": "fn(tableId: string) -> Fusiontables.Schema.StyleSettingList"
            },
            "list ": {
                "!type": "fn(tableId: string, optionalArgs: object) -> Fusiontables.Schema.StyleSettingList"
            },
            "patch": {
                "!type": "fn(resource: Fusiontables.Schema.StyleSetting, tableId: string, styleId: number) -> Fusiontables.Schema.StyleSetting"
            },
            "remove": {
                "!type": "fn(tableId: string, styleId: number)"
            },
            "update": {
                "!type": "fn(resource: Fusiontables.Schema.StyleSetting, tableId: string, styleId: number) -> Fusiontables.Schema.StyleSetting"
            }
        },
        "Fusiontables.Collection.TableCollection": {
            "copy": {
                "!type": "fn(tableId: string) -> Fusiontables.Schema.Table"
            },
            "copy ": {
                "!type": "fn(tableId: string, optionalArgs: object) -> Fusiontables.Schema.Table"
            },
            "get": {
                "!type": "fn(tableId: string) -> Fusiontables.Schema.Table"
            },
            "importRows": {
                "!type": "fn(tableId: string) -> Fusiontables.Schema.Import"
            },
            "importRows ": {
                "!type": "fn(tableId: string, mediaData: Blob) -> Fusiontables.Schema.Import"
            },
            "importRows  ": {
                "!type": "fn(tableId: string, mediaData: Blob, optionalArgs: object) -> Fusiontables.Schema.Import"
            },
            "importTable": {
                "!type": "fn(name: string) -> Fusiontables.Schema.Table"
            },
            "importTable ": {
                "!type": "fn(name: string, mediaData: Blob) -> Fusiontables.Schema.Table"
            },
            "importTable  ": {
                "!type": "fn(name: string, mediaData: Blob, optionalArgs: object) -> Fusiontables.Schema.Table"
            },
            "insert": {
                "!type": "fn(resource: Fusiontables.Schema.Table) -> Fusiontables.Schema.Table"
            },
            "list": {
                "!type": "fn() -> Fusiontables.Schema.TableList"
            },
            "list ": {
                "!type": "fn(optionalArgs: object) -> Fusiontables.Schema.TableList"
            },
            "patch": {
                "!type": "fn(resource: Fusiontables.Schema.Table, tableId: string) -> Fusiontables.Schema.Table"
            },
            "patch ": {
                "!type": "fn(resource: Fusiontables.Schema.Table, tableId: string, optionalArgs: object) -> Fusiontables.Schema.Table"
            },
            "remove": {
                "!type": "fn(tableId: string)"
            },
            "update": {
                "!type": "fn(resource: Fusiontables.Schema.Table, tableId: string) -> Fusiontables.Schema.Table"
            },
            "update ": {
                "!type": "fn(resource: Fusiontables.Schema.Table, tableId: string, optionalArgs: object) -> Fusiontables.Schema.Table"
            }
        },
        "Fusiontables.Collection.TaskCollection": {
            "get": {
                "!type": "fn(tableId: string, taskId: string) -> Fusiontables.Schema.Task"
            },
            "list": {
                "!type": "fn(tableId: string) -> Fusiontables.Schema.TaskList"
            },
            "list ": {
                "!type": "fn(tableId: string, optionalArgs: object) -> Fusiontables.Schema.TaskList"
            },
            "remove": {
                "!type": "fn(tableId: string, taskId: string)"
            }
        },
        "Fusiontables.Collection.TemplateCollection": {
            "get": {
                "!type": "fn(tableId: string, templateId: number) -> Fusiontables.Schema.Template"
            },
            "insert": {
                "!type": "fn(resource: Fusiontables.Schema.Template, tableId: string) -> Fusiontables.Schema.Template"
            },
            "list": {
                "!type": "fn(tableId: string) -> Fusiontables.Schema.TemplateList"
            },
            "list ": {
                "!type": "fn(tableId: string, optionalArgs: object) -> Fusiontables.Schema.TemplateList"
            },
            "patch": {
                "!type": "fn(resource: Fusiontables.Schema.Template, tableId: string, templateId: number) -> Fusiontables.Schema.Template"
            },
            "remove": {
                "!type": "fn(tableId: string, templateId: number)"
            },
            "update": {
                "!type": "fn(resource: Fusiontables.Schema.Template, tableId: string, templateId: number) -> Fusiontables.Schema.Template"
            }
        },
        "Fusiontables.Schema.Bucket": {
            "color": {
                "!type": "string"
            },
            "icon": {
                "!type": "string"
            },
            "max": {
                "!type": "number"
            },
            "min": {
                "!type": "number"
            },
            "opacity": {
                "!type": "number"
            },
            "weight": {
                "!type": "number"
            }
        },
        "Fusiontables.Schema.Column": {
            "baseColumn": {
                "!type": "Fusiontables.Schema.ColumnBaseColumn"
            },
            "columnId": {
                "!type": "number"
            },
            "description": {
                "!type": "string"
            },
            "graph_predicate": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "name": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            }
        },
        "Fusiontables.Schema.ColumnBaseColumn": {
            "columnId": {
                "!type": "number"
            },
            "tableIndex": {
                "!type": "number"
            }
        },
        "Fusiontables.Schema.ColumnList": {
            "items": {
                "!type": "[Fusiontables.Schema.Column]"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "totalItems": {
                "!type": "number"
            }
        },
        "Fusiontables.Schema.Geometry": {
            "geometries": {
                "!type": "[object]"
            },
            "geometry": {
                "!type": "object"
            },
            "type": {
                "!type": "string"
            }
        },
        "Fusiontables.Schema.Import": {
            "kind": {
                "!type": "string"
            },
            "numRowsReceived": {
                "!type": "string"
            }
        },
        "Fusiontables.Schema.Line": {
            "coordinates": {
                "!type": "[[number]]"
            },
            "type": {
                "!type": "string"
            }
        },
        "Fusiontables.Schema.LineStyle": {
            "strokeColor": {
                "!type": "string"
            },
            "strokeColorStyler": {
                "!type": "Fusiontables.Schema.StyleFunction"
            },
            "strokeOpacity": {
                "!type": "number"
            },
            "strokeWeight": {
                "!type": "number"
            },
            "strokeWeightStyler": {
                "!type": "Fusiontables.Schema.StyleFunction"
            }
        },
        "Fusiontables.Schema.Point": {
            "coordinates": {
                "!type": "[number]"
            },
            "type": {
                "!type": "string"
            }
        },
        "Fusiontables.Schema.PointStyle": {
            "iconName": {
                "!type": "string"
            },
            "iconStyler": {
                "!type": "Fusiontables.Schema.StyleFunction"
            }
        },
        "Fusiontables.Schema.Polygon": {
            "coordinates": {
                "!type": "[[[number]]]"
            },
            "type": {
                "!type": "string"
            }
        },
        "Fusiontables.Schema.PolygonStyle": {
            "fillColor": {
                "!type": "string"
            },
            "fillColorStyler": {
                "!type": "Fusiontables.Schema.StyleFunction"
            },
            "fillOpacity": {
                "!type": "number"
            },
            "strokeColor": {
                "!type": "string"
            },
            "strokeColorStyler": {
                "!type": "Fusiontables.Schema.StyleFunction"
            },
            "strokeOpacity": {
                "!type": "number"
            },
            "strokeWeight": {
                "!type": "number"
            },
            "strokeWeightStyler": {
                "!type": "Fusiontables.Schema.StyleFunction"
            }
        },
        "Fusiontables.Schema.Sqlresponse": {
            "columns": {
                "!type": "[string]"
            },
            "kind": {
                "!type": "string"
            },
            "rows": {
                "!type": "[[object]]"
            }
        },
        "Fusiontables.Schema.StyleFunction": {
            "buckets": {
                "!type": "[Fusiontables.Schema.Bucket]"
            },
            "columnName": {
                "!type": "string"
            },
            "gradient": {
                "!type": "Fusiontables.Schema.StyleFunctionGradient"
            },
            "kind": {
                "!type": "string"
            }
        },
        "Fusiontables.Schema.StyleFunctionGradient": {
            "colors": {
                "!type": "[Fusiontables.Schema.StyleFunctionGradientColors]"
            },
            "max": {
                "!type": "number"
            },
            "min": {
                "!type": "number"
            }
        },
        "Fusiontables.Schema.StyleFunctionGradientColors": {
            "color": {
                "!type": "string"
            },
            "opacity": {
                "!type": "number"
            }
        },
        "Fusiontables.Schema.StyleSetting": {
            "kind": {
                "!type": "string"
            },
            "markerOptions": {
                "!type": "Fusiontables.Schema.PointStyle"
            },
            "name": {
                "!type": "string"
            },
            "polygonOptions": {
                "!type": "Fusiontables.Schema.PolygonStyle"
            },
            "polylineOptions": {
                "!type": "Fusiontables.Schema.LineStyle"
            },
            "styleId": {
                "!type": "number"
            },
            "tableId": {
                "!type": "string"
            }
        },
        "Fusiontables.Schema.StyleSettingList": {
            "items": {
                "!type": "[Fusiontables.Schema.StyleSetting]"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "totalItems": {
                "!type": "number"
            }
        },
        "Fusiontables.Schema.Table": {
            "attribution": {
                "!type": "string"
            },
            "attributionLink": {
                "!type": "string"
            },
            "baseTableIds": {
                "!type": "[string]"
            },
            "columns": {
                "!type": "[Fusiontables.Schema.Column]"
            },
            "description": {
                "!type": "string"
            },
            "isExportable": {
                "!type": "bool"
            },
            "kind": {
                "!type": "string"
            },
            "name": {
                "!type": "string"
            },
            "sql": {
                "!type": "string"
            },
            "tableId": {
                "!type": "string"
            }
        },
        "Fusiontables.Schema.TableList": {
            "items": {
                "!type": "[Fusiontables.Schema.Table]"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            }
        },
        "Fusiontables.Schema.Task": {
            "kind": {
                "!type": "string"
            },
            "progress": {
                "!type": "string"
            },
            "started": {
                "!type": "bool"
            },
            "taskId": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            }
        },
        "Fusiontables.Schema.TaskList": {
            "items": {
                "!type": "[Fusiontables.Schema.Task]"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "totalItems": {
                "!type": "number"
            }
        },
        "Fusiontables.Schema.Template": {
            "automaticColumnNames": {
                "!type": "[string]"
            },
            "body": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "name": {
                "!type": "string"
            },
            "tableId": {
                "!type": "string"
            },
            "templateId": {
                "!type": "number"
            }
        },
        "Fusiontables.Schema.TemplateList": {
            "items": {
                "!type": "[Fusiontables.Schema.Template]"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "totalItems": {
                "!type": "number"
            }
        },
        "Jdbc.JdbcArray": {
            "free": {
                "!doc": "For documentation of this method, see java.sql.Array#free().",
                "!type": "fn()"
            },
            "getArray": {
                "!doc": "For documentation of this method, see java.sql.Array#getArray().",
                "!type": "fn() -> object"
            },
            "getArray ": {
                "!doc": "For documentation of this method, see java.sql.Array#getArray(long, int).",
                "!type": "fn(index: number, count: number) -> object"
            },
            "getBaseType": {
                "!doc": "For documentation of this method, see java.sql.Array#getBaseType().",
                "!type": "fn() -> number"
            },
            "getBaseTypeName": {
                "!doc": "For documentation of this method, see java.sql.Array#getBaseTypeName().",
                "!type": "fn() -> string"
            },
            "getResultSet": {
                "!doc": "For documentation of this method, see java.sql.Array#getResultSet().",
                "!type": "fn() -> Jdbc.JdbcResultSet"
            },
            "getResultSet ": {
                "!doc": "For documentation of this method, see java.sql.Array#getResultSet(long, int).",
                "!type": "fn(index: number, count: number) -> Jdbc.JdbcResultSet"
            }
        },
        "Jdbc.JdbcBlob": {
            "free": {
                "!doc": "For documentation of this method, see java.sql.Blob#free().",
                "!type": "fn()"
            },
            "getAppsScriptBlob": {
                "!doc": "Gets the content of this JdbcBlob as an Apps Script blob.",
                "!type": "fn() -> Blob"
            },
            "getAs": {
                "!doc": "Return the data inside this object as a blob converted to the specified content type. This\n method adds the appropriate extension to the filename ? for example, \"myfile.pdf\". However, it\n assumes that the part of the filename that follows the last period (if any) is an existing\n extension that should be replaced. Consequently, \"ChristmasList.12.25.2014\" will become\n \"ChristmasList.12.25.pdf\".",
                "!type": "fn(contentType: string) -> Blob"
            },
            "getBytes": {
                "!doc": "For documentation of this method, see java.sql.Blob#getBytes(long, int).",
                "!type": "fn(position: number, length: number) -> [number]"
            },
            "length": {
                "!doc": "For documentation of this method, see java.sql.Blob#length().",
                "!type": "fn() -> number"
            },
            "position": {
                "!doc": "For documentation of this method, see java.sql.Blob#position(byte[], long).",
                "!type": "fn(pattern: [number], start: number) -> number"
            },
            "position ": {
                "!doc": "For documentation of this method, see java.sql.Blob#position(java.sql.Blob, long).",
                "!type": "fn(pattern: Jdbc.JdbcBlob, start: number) -> number"
            },
            "setBytes": {
                "!doc": "Convenience method for BlobSources.",
                "!type": "fn(position: number, blobSource: BlobSource) -> number"
            },
            "setBytes ": {
                "!doc": "Convenience method for BlobSources.",
                "!type": "fn(position: number, blobSource: BlobSource, offset: number, length: number) -> number"
            },
            "setBytes  ": {
                "!doc": "For documentation of this method, see java.sql.Blob#setBytes(long, byte[]).",
                "!type": "fn(position: number, bytes: [number]) -> number"
            },
            "setBytes   ": {
                "!doc": "For documentation of this method, see java.sql.Blob#setBytes(long, byte[], int, int).",
                "!type": "fn(position: number, bytes: [number], offset: number, length: number) -> number"
            },
            "truncate": {
                "!doc": "For documentation of this method, see java.sql.Blob#truncate(long).",
                "!type": "fn(length: number)"
            }
        },
        "Jdbc.JdbcCallableStatement": {
            "addBatch": {
                "!doc": "For documentation of this method, see java.sql.PreparedStatement#addBatch().",
                "!type": "fn()"
            },
            "addBatch ": {
                "!doc": "For documentation of this method, see java.sql.Statement#addBatch(String).",
                "!type": "fn(sql: string)"
            },
            "cancel": {
                "!doc": "For documentation of this method, see java.sql.Statement#cancel().",
                "!type": "fn()"
            },
            "clearBatch": {
                "!doc": "For documentation of this method, see java.sql.Statement#clearBatch().",
                "!type": "fn()"
            },
            "clearParameters": {
                "!doc": "For documentation of this method, see java.sql.PreparedStatement#clearParameters().",
                "!type": "fn()"
            },
            "clearWarnings": {
                "!doc": "For documentation of this method, see java.sql.Statement#clearWarnings().",
                "!type": "fn()"
            },
            "close": {
                "!doc": "For documentation of this method, see java.sql.Statement#close().",
                "!type": "fn()"
            },
            "execute": {
                "!doc": "For documentation of this method, see java.sql.PreparedStatement#execute().",
                "!type": "fn() -> bool"
            },
            "execute ": {
                "!doc": "For documentation of this method, see java.sql.Statement#execute(String).",
                "!type": "fn(sql: string) -> bool"
            },
            "execute  ": {
                "!doc": "For documentation of this method, see java.sql.Statement#execute(String, int).",
                "!type": "fn(sql: string, autoGeneratedKeys: number) -> bool"
            },
            "execute   ": {
                "!doc": "For documentation of this method, see java.sql.Statement#execute(String, int[]).",
                "!type": "fn(sql: string, columnIndexes: [number]) -> bool"
            },
            "execute    ": {
                "!doc": "For documentation of this method, see java.sql.Statement#execute(String, String[]).",
                "!type": "fn(sql: string, columnNames: [string]) -> bool"
            },
            "executeBatch": {
                "!doc": "For documentation of this method, see java.sql.Statement#executeBatch().",
                "!type": "fn() -> [number]"
            },
            "executeQuery": {
                "!doc": "For documentation of this method, see java.sql.PreparedStatement#executeQuery().",
                "!type": "fn() -> Jdbc.JdbcResultSet"
            },
            "executeQuery ": {
                "!doc": "For documentation of this method, see java.sql.Statement#executeQuery(String).",
                "!type": "fn(sql: string) -> Jdbc.JdbcResultSet"
            },
            "executeUpdate": {
                "!doc": "For documentation of this method, see java.sql.PreparedStatement#executeUpdate().",
                "!type": "fn() -> number"
            },
            "executeUpdate ": {
                "!doc": "For documentation of this method, see java.sql.Statement#executeUpdate(String).",
                "!type": "fn(sql: string) -> number"
            },
            "executeUpdate  ": {
                "!doc": "For documentation of this method, see java.sql.Statement#executeUpdate(String, int).",
                "!type": "fn(sql: string, autoGeneratedKeys: number) -> number"
            },
            "executeUpdate   ": {
                "!doc": "For documentation of this method, see java.sql.Statement#executeUpdate(String, int).",
                "!type": "fn(sql: string, columnIndexes: [number]) -> number"
            },
            "executeUpdate    ": {
                "!doc": "For documentation of this method, see\n java.sql.Statement#executeUpdate(String, String[]).",
                "!type": "fn(sql: string, columnNames: [string]) -> number"
            },
            "getArray": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getArray(int).",
                "!type": "fn(parameterIndex: number) -> Jdbc.JdbcArray"
            },
            "getArray ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getArray(String).",
                "!type": "fn(parameterName: string) -> Jdbc.JdbcArray"
            },
            "getBigDecimal": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getBigDecimal(int).",
                "!type": "fn(parameterIndex: number) -> BigNumber"
            },
            "getBigDecimal ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getBigDecimal(String).",
                "!type": "fn(parameterName: string) -> BigNumber"
            },
            "getBlob": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getBlob(int).",
                "!type": "fn(parameterIndex: number) -> Jdbc.JdbcBlob"
            },
            "getBlob ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getBlob(String).",
                "!type": "fn(parameterName: string) -> Jdbc.JdbcBlob"
            },
            "getBoolean": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getBoolean(int).",
                "!type": "fn(parameterIndex: number) -> bool"
            },
            "getBoolean ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getBoolean(String).",
                "!type": "fn(parameterName: string) -> bool"
            },
            "getByte": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getByte(int).",
                "!type": "fn(parameterIndex: number) -> number"
            },
            "getByte ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getByte(String).",
                "!type": "fn(parameterName: string) -> number"
            },
            "getBytes": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getBytes(int).",
                "!type": "fn(parameterIndex: number) -> [number]"
            },
            "getBytes ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getBytes(String).",
                "!type": "fn(parameterName: string) -> [number]"
            },
            "getClob": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getClob(int).",
                "!type": "fn(parameterIndex: number) -> Jdbc.JdbcClob"
            },
            "getClob ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getClob(String).",
                "!type": "fn(parameterName: string) -> Jdbc.JdbcClob"
            },
            "getConnection": {
                "!doc": "For documentation of this method, see java.sql.Statement#getConnection().",
                "!type": "fn() -> Jdbc.JdbcConnection"
            },
            "getDate": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getDate(int).",
                "!type": "fn(parameterIndex: number) -> Jdbc.JdbcDate"
            },
            "getDate ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getDate(int, java.util.Calendar).",
                "!type": "fn(parameterIndex: number, timeZone: string) -> Jdbc.JdbcDate"
            },
            "getDate  ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getDate(String).",
                "!type": "fn(parameterName: string) -> Jdbc.JdbcDate"
            },
            "getDate   ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getDate(String, java.util.Calendar).",
                "!type": "fn(parameterName: string, timeZone: string) -> Jdbc.JdbcDate"
            },
            "getDouble": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getDouble(int).",
                "!type": "fn(parameterIndex: number) -> number"
            },
            "getDouble ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getDouble(String).",
                "!type": "fn(parameterName: string) -> number"
            },
            "getFetchDirection": {
                "!doc": "For documentation of this method, see java.sql.Statement#getFetchDirection().",
                "!type": "fn() -> number"
            },
            "getFetchSize": {
                "!doc": "For documentation of this method, see java.sql.Statement#getFetchSize().",
                "!type": "fn() -> number"
            },
            "getFloat": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getFloat(int).",
                "!type": "fn(parameterIndex: number) -> number"
            },
            "getFloat ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getFloat(String).",
                "!type": "fn(parameterName: string) -> number"
            },
            "getGeneratedKeys": {
                "!doc": "For documentation of this method, see java.sql.Statement#getGeneratedKeys().",
                "!type": "fn() -> Jdbc.JdbcResultSet"
            },
            "getInt": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getInt(int).",
                "!type": "fn(parameterIndex: number) -> number"
            },
            "getInt ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getInt(String).",
                "!type": "fn(parameterName: string) -> number"
            },
            "getLong": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getLong(int).",
                "!type": "fn(parameterIndex: number) -> number"
            },
            "getLong ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getLong(String).",
                "!type": "fn(parameterName: string) -> number"
            },
            "getMaxFieldSize": {
                "!doc": "For documentation of this method, see java.sql.Statement#getMaxFieldSize().",
                "!type": "fn() -> number"
            },
            "getMaxRows": {
                "!doc": "For documentation of this method, see java.sql.Statement#getMaxRows().",
                "!type": "fn() -> number"
            },
            "getMetaData": {
                "!doc": "For documentation of this method, see java.sql.PreparedStatement#getMetaData().",
                "!type": "fn() -> Jdbc.JdbcResultSetMetaData"
            },
            "getMoreResults": {
                "!doc": "For documentation of this method, see java.sql.Statement#getMoreResults().",
                "!type": "fn() -> bool"
            },
            "getMoreResults ": {
                "!doc": "For documentation of this method, see java.sql.Statement#getMoreResults(int).",
                "!type": "fn(current: number) -> bool"
            },
            "getNClob": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getNClob(int).",
                "!type": "fn(parameterIndex: number) -> Jdbc.JdbcClob"
            },
            "getNClob ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getNClob(String).",
                "!type": "fn(parameterName: string) -> Jdbc.JdbcClob"
            },
            "getNString": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getNString(int).",
                "!type": "fn(parameterIndex: number) -> string"
            },
            "getNString ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getNString(String).",
                "!type": "fn(parameterName: string) -> string"
            },
            "getObject": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getObject(int).",
                "!type": "fn(parameterIndex: number) -> object"
            },
            "getObject ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getObject(String).",
                "!type": "fn(parameterName: string) -> object"
            },
            "getParameterMetaData": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#getParameterMetaData().",
                "!type": "fn() -> Jdbc.JdbcParameterMetaData"
            },
            "getQueryTimeout": {
                "!doc": "For documentation of this method, see java.sql.Statement#getQueryTimeout().",
                "!type": "fn() -> number"
            },
            "getRef": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getRef(int).",
                "!type": "fn(parameterIndex: number) -> Jdbc.JdbcRef"
            },
            "getRef ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getRef(String).",
                "!type": "fn(parameterName: string) -> Jdbc.JdbcRef"
            },
            "getResultSet": {
                "!doc": "For documentation of this method, see java.sql.Statement#getResultSet().",
                "!type": "fn() -> Jdbc.JdbcResultSet"
            },
            "getResultSetConcurrency": {
                "!doc": "For documentation of this method, see java.sql.Statement#getResultSetConcurrency().",
                "!type": "fn() -> number"
            },
            "getResultSetHoldability": {
                "!doc": "For documentation of this method, see java.sql.Statement#getResultSetHoldability().",
                "!type": "fn() -> number"
            },
            "getResultSetType": {
                "!doc": "For documentation of this method, see java.sql.Statement#getResultSetType().",
                "!type": "fn() -> number"
            },
            "getRowId": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getRowId(int).",
                "!type": "fn(parameterIndex: number) -> Jdbc.JdbcRowId"
            },
            "getRowId ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getRowId(String).",
                "!type": "fn(parameterName: string) -> Jdbc.JdbcRowId"
            },
            "getSQLXML": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getSQLXML(int).",
                "!type": "fn(parameterIndex: number) -> Jdbc.JdbcSQLXML"
            },
            "getSQLXML ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getSQLXML(String).",
                "!type": "fn(parameterName: string) -> Jdbc.JdbcSQLXML"
            },
            "getShort": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getShort(int).",
                "!type": "fn(parameterIndex: number) -> number"
            },
            "getShort ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getShort(String).",
                "!type": "fn(parameterName: string) -> number"
            },
            "getString": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getString(int).",
                "!type": "fn(parameterIndex: number) -> string"
            },
            "getString ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getString(String).",
                "!type": "fn(parameterName: string) -> string"
            },
            "getTime": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getTime(int).",
                "!type": "fn(parameterIndex: number) -> Jdbc.JdbcTime"
            },
            "getTime ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getTime(int, java.util.Calendar).",
                "!type": "fn(parameterIndex: number, timeZone: string) -> Jdbc.JdbcTime"
            },
            "getTime  ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getTime(String).",
                "!type": "fn(parameterName: string) -> Jdbc.JdbcTime"
            },
            "getTime   ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getTime(String, java.util.Calendar).",
                "!type": "fn(parameterName: string, timeZone: string) -> Jdbc.JdbcTime"
            },
            "getTimestamp": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getTimestamp(int).",
                "!type": "fn(parameterIndex: number) -> Jdbc.JdbcTimestamp"
            },
            "getTimestamp ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getTimestamp(int, java.util.Calendar).",
                "!type": "fn(parameterIndex: number, timeZone: string) -> Jdbc.JdbcTimestamp"
            },
            "getTimestamp  ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getTimestamp(String).",
                "!type": "fn(parameterName: string) -> Jdbc.JdbcTimestamp"
            },
            "getTimestamp   ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getTimestamp(String, java.util.Calendar).",
                "!type": "fn(parameterName: string, timeZone: string) -> Jdbc.JdbcTimestamp"
            },
            "getURL": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getURL(int).",
                "!type": "fn(parameterIndex: number) -> string"
            },
            "getURL ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#getURL(String).",
                "!type": "fn(parameterName: string) -> string"
            },
            "getUpdateCount": {
                "!doc": "For documentation of this method, see java.sql.Statement#getUpdateCount().",
                "!type": "fn() -> number"
            },
            "getWarnings": {
                "!doc": "Returns the current set of warnings reported by the driver. For documentation of this method,\n see java.sql.Statement#getWarnings()",
                "!type": "fn() -> [string]"
            },
            "isClosed": {
                "!doc": "For documentation of this method, see java.sql.Statement#isClosed().",
                "!type": "fn() -> bool"
            },
            "isPoolable": {
                "!doc": "For documentation of this method, see java.sql.Statement#isPoolable().",
                "!type": "fn() -> bool"
            },
            "registerOutParameter": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#registerOutParameter(int, int).",
                "!type": "fn(parameterIndex: number, sqlType: number)"
            },
            "registerOutParameter ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#registerOutParameter(int, int, int).",
                "!type": "fn(parameterIndex: number, sqlType: number, scale: number)"
            },
            "registerOutParameter  ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#registerOutParameter(int, int, String).",
                "!type": "fn(parameterIndex: number, sqlType: number, typeName: string)"
            },
            "registerOutParameter   ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#registerOutParameter(String, int).",
                "!type": "fn(parameterName: string, sqlType: number)"
            },
            "registerOutParameter    ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#registerOutParameter(String, int, int).",
                "!type": "fn(parameterName: string, sqlType: number, scale: number)"
            },
            "registerOutParameter     ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#registerOutParameter(String, int, String).",
                "!type": "fn(parameterName: string, sqlType: number, typeName: string)"
            },
            "setArray": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setArray(int, java.sql.Array).",
                "!type": "fn(parameterIndex: number, x: Jdbc.JdbcArray)"
            },
            "setBigDecimal": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setBigDecimal(int, java.math.BigDecimal).",
                "!type": "fn(parameterIndex: number, x: BigNumber)"
            },
            "setBigDecimal ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#setBigDecimal(String, java.math.BigDecimal).",
                "!type": "fn(parameterName: string, x: BigNumber)"
            },
            "setBlob": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setBlob(int, java.sql.Blob).",
                "!type": "fn(parameterIndex: number, x: Jdbc.JdbcBlob)"
            },
            "setBlob ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#setBlob(String, java.sql.Blob).",
                "!type": "fn(parameterName: string, x: Jdbc.JdbcBlob)"
            },
            "setBoolean": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setBoolean(int, boolean).",
                "!type": "fn(parameterIndex: number, x: bool)"
            },
            "setBoolean ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#setBoolean(String, boolean).",
                "!type": "fn(parameterName: string, x: bool)"
            },
            "setByte": {
                "!doc": "For documentation of this method, see java.sql.PreparedStatement#setByte(int, byte).",
                "!type": "fn(parameterIndex: number, x: number)"
            },
            "setByte ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#setByte(String, byte).",
                "!type": "fn(parameterName: string, x: number)"
            },
            "setBytes": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setBytes(int, byte[]).",
                "!type": "fn(parameterIndex: number, x: [number])"
            },
            "setBytes ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#setBytes(String, byte[]).",
                "!type": "fn(parameterName: string, x: [number])"
            },
            "setClob": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setClob(int, java.sql.Clob).",
                "!type": "fn(parameterIndex: number, x: Jdbc.JdbcClob)"
            },
            "setClob ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#setClob(String, java.sql.Clob).",
                "!type": "fn(parameterName: string, x: Jdbc.JdbcClob)"
            },
            "setCursorName": {
                "!doc": "For documentation of this method, see java.sql.Statement#setCursorName(String).",
                "!type": "fn(name: string)"
            },
            "setDate": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setDate(int, java.sql.Date).",
                "!type": "fn(parameterIndex: number, x: Jdbc.JdbcDate)"
            },
            "setDate ": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setDate(int, java.sql.Date, java.util.Calendar).",
                "!type": "fn(parameterIndex: number, x: Jdbc.JdbcDate, timeZone: string)"
            },
            "setDate  ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#setDate(String, java.sql.Date).",
                "!type": "fn(parameterName: string, x: Jdbc.JdbcDate)"
            },
            "setDate   ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#setDate(String, java.sql.Date, java.util.Calendar).",
                "!type": "fn(parameterName: string, x: Jdbc.JdbcDate, timeZone: string)"
            },
            "setDouble": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setDouble(int, double).",
                "!type": "fn(parameterIndex: number, x: number)"
            },
            "setDouble ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#setDouble(String, double).",
                "!type": "fn(parameterName: string, x: number)"
            },
            "setEscapeProcessing": {
                "!doc": "For documentation of this method, see java.sql.Statement#setEscapeProcessing(boolean).",
                "!type": "fn(enable: bool)"
            },
            "setFetchDirection": {
                "!doc": "For documentation of this method, see java.sql.Statement#setFetchDirection(int).",
                "!type": "fn(direction: number)"
            },
            "setFetchSize": {
                "!doc": "For documentation of this method, see java.sql.Statement#setFetchSize(int).",
                "!type": "fn(rows: number)"
            },
            "setFloat": {
                "!doc": "For documentation of this method, see java.sql.PreparedStatement#setFloat(int, float).",
                "!type": "fn(parameterIndex: number, x: number)"
            },
            "setFloat ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#setFloat(String, float).",
                "!type": "fn(parameterName: string, x: number)"
            },
            "setInt": {
                "!doc": "For documentation of this method, see java.sql.PreparedStatement#setInt(int, int).",
                "!type": "fn(parameterIndex: number, x: number)"
            },
            "setInt ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#setInt(String, int).",
                "!type": "fn(parameterName: string, x: number)"
            },
            "setLong": {
                "!doc": "For documentation of this method, see java.sql.PreparedStatement#setLong(int, long).",
                "!type": "fn(parameterIndex: number, x: number)"
            },
            "setLong ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#setLong(String, long).",
                "!type": "fn(parameterName: string, x: number)"
            },
            "setMaxFieldSize": {
                "!doc": "For documentation of this method, see java.sql.Statement#setMaxFieldSize(int).",
                "!type": "fn(max: number)"
            },
            "setMaxRows": {
                "!doc": "For documentation of this method, see java.sql.Statement#setMaxRows(int).",
                "!type": "fn(max: number)"
            },
            "setNClob": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setNClob(int, java.sql.NClob).",
                "!type": "fn(parameterIndex: number, x: Jdbc.JdbcClob)"
            },
            "setNClob ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#setNClob(String, java.sql.NClob).",
                "!type": "fn(parameterName: string, value: Jdbc.JdbcClob)"
            },
            "setNString": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setNString(int, String).",
                "!type": "fn(parameterIndex: number, x: string)"
            },
            "setNString ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#setNString(String, String).",
                "!type": "fn(parameterName: string, value: string)"
            },
            "setNull": {
                "!doc": "For documentation of this method, see java.sql.PreparedStatement#setNull(int, int).",
                "!type": "fn(parameterIndex: number, sqlType: number)"
            },
            "setNull ": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setNull(int, int, String).",
                "!type": "fn(parameterIndex: number, sqlType: number, typeName: string)"
            },
            "setNull  ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#setNull(String, int).",
                "!type": "fn(parameterName: string, sqlType: number)"
            },
            "setNull   ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#setNull(String, int, String).",
                "!type": "fn(parameterName: string, sqlType: number, typeName: string)"
            },
            "setObject": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setObject(int, Object).",
                "!type": "fn(index: number, x: object)"
            },
            "setObject ": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setObject(int, Object, int).",
                "!type": "fn(parameterIndex: number, x: object, targetSqlType: number)"
            },
            "setObject  ": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setObject(int, Object, int, int).",
                "!type": "fn(parameterIndex: number, x: object, targetSqlType: number, scaleOrLength: number)"
            },
            "setObject   ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#setObject(String, Object).",
                "!type": "fn(parameterName: string, x: object)"
            },
            "setObject    ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#setObject(String, Object, int).",
                "!type": "fn(parameterName: string, x: object, targetSqlType: number)"
            },
            "setObject     ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#setObject(String, Object, int, int).",
                "!type": "fn(parameterName: string, x: object, targetSqlType: number, scale: number)"
            },
            "setPoolable": {
                "!doc": "For documentation of this method, see java.sql.Statement#setPoolable(boolean).",
                "!type": "fn(poolable: bool)"
            },
            "setQueryTimeout": {
                "!doc": "For documentation of this method, see java.sql.Statement#setQueryTimeout(int).",
                "!type": "fn(seconds: number)"
            },
            "setRef": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setRef(int, java.sql.Ref).",
                "!type": "fn(parameterIndex: number, x: Jdbc.JdbcRef)"
            },
            "setRowId": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setRowId(int, java.sql.RowId).",
                "!type": "fn(parameterIndex: number, x: Jdbc.JdbcRowId)"
            },
            "setRowId ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#setRowId(String, java.sql.RowId).",
                "!type": "fn(parameterName: string, x: Jdbc.JdbcRowId)"
            },
            "setSQLXML": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setSQLXML(int, java.sql.SQLXML).",
                "!type": "fn(parameterIndex: number, x: Jdbc.JdbcSQLXML)"
            },
            "setSQLXML ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#setSQLXML(String, java.sql.SQLXML).",
                "!type": "fn(parameterName: string, xmlObject: Jdbc.JdbcSQLXML)"
            },
            "setShort": {
                "!doc": "For documentation of this method, see java.sql.PreparedStatement#setShort(int, short).",
                "!type": "fn(parameterIndex: number, x: number)"
            },
            "setShort ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#setShort(String, short).",
                "!type": "fn(parameterName: string, x: number)"
            },
            "setString": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setString(int, String).",
                "!type": "fn(parameterIndex: number, x: string)"
            },
            "setString ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#setString(String, String).",
                "!type": "fn(parameterName: string, x: string)"
            },
            "setTime": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setTime(int, java.sql.Time).",
                "!type": "fn(parameterIndex: number, x: Jdbc.JdbcTime)"
            },
            "setTime ": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setTime(int, java.sql.Time, java.util.Calendar).",
                "!type": "fn(parameterIndex: number, x: Jdbc.JdbcTime, timeZone: string)"
            },
            "setTime  ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#setTime(String, java.sql.Time).",
                "!type": "fn(parameterName: string, x: Jdbc.JdbcTime)"
            },
            "setTime   ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#setTime(String, java.sql.Time, java.util.Calendar).",
                "!type": "fn(parameterName: string, x: Jdbc.JdbcTime, timeZone: string)"
            },
            "setTimestamp": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setTimestamp(int, java.sql.Timestamp).",
                "!type": "fn(parameterIndex: number, x: Jdbc.JdbcTimestamp)"
            },
            "setTimestamp ": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setTimestamp(int, java.sql.Timestamp, java.util.Calendar).",
                "!type": "fn(parameterIndex: number, x: Jdbc.JdbcTimestamp, timeZone: string)"
            },
            "setTimestamp  ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#setTimestamp(String, java.sql.Timestamp).",
                "!type": "fn(parameterName: string, x: Jdbc.JdbcTimestamp)"
            },
            "setTimestamp   ": {
                "!doc": "For documentation of this method, see java.sql.CallableStatement#setTimestamp(String, java.sql.Timestamp, java.util.Calendar).",
                "!type": "fn(parameterName: string, x: Jdbc.JdbcTimestamp, timeZone: string)"
            },
            "setURL": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setURL(int, java.net.URL).",
                "!type": "fn(parameterIndex: number, x: string)"
            },
            "setURL ": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#setURL(String, java.net.URL).",
                "!type": "fn(parameterName: string, val: string)"
            },
            "wasNull": {
                "!doc": "For documentation of this method, see\n java.sql.CallableStatement#wasNull().",
                "!type": "fn() -> bool"
            }
        },
        "Jdbc.JdbcClob": {
            "free": {
                "!doc": "For documentation of this method, see java.sql.Clob#free().",
                "!type": "fn()"
            },
            "getAppsScriptBlob": {
                "!doc": "Gets the content of this JdbcClob as an Apps Script blob.",
                "!type": "fn() -> Blob"
            },
            "getAs": {
                "!doc": "Return the data inside this object as a blob converted to the specified content type. This\n method adds the appropriate extension to the filename ? for example, \"myfile.pdf\". However, it\n assumes that the part of the filename that follows the last period (if any) is an existing\n extension that should be replaced. Consequently, \"ChristmasList.12.25.2014\" will become\n \"ChristmasList.12.25.pdf\".",
                "!type": "fn(contentType: string) -> Blob"
            },
            "getSubString": {
                "!doc": "For documentation of this method, see java.sql.Clob#getSubString(long, int).",
                "!type": "fn(position: number, length: number) -> string"
            },
            "length": {
                "!doc": "For documentation of this method, see java.sql.Clob#length().",
                "!type": "fn() -> number"
            },
            "position": {
                "!doc": "For documentation of this method, see java.sql.Clob#position(java.sql.Clob, long).",
                "!type": "fn(search: Jdbc.JdbcClob, start: number) -> number"
            },
            "position ": {
                "!doc": "For documentation of this method, see java.sql.Clob#position(String, long).",
                "!type": "fn(search: string, start: number) -> number"
            },
            "setString": {
                "!doc": "Convenience method for BlobSources.",
                "!type": "fn(position: number, blobSource: BlobSource) -> number"
            },
            "setString ": {
                "!doc": "Convenience method for BlobSources.",
                "!type": "fn(position: number, blobSource: BlobSource, offset: number, len: number) -> number"
            },
            "setString  ": {
                "!doc": "For documentation of this method, see java.sql.Clob#setString(long, String).",
                "!type": "fn(position: number, value: string) -> number"
            },
            "setString   ": {
                "!doc": "For documentation of this method, see java.sql.Clob#setString(long, String, int, int).",
                "!type": "fn(position: number, value: string, offset: number, len: number) -> number"
            },
            "truncate": {
                "!doc": "For documentation of this method, see java.sql.Clob#truncate(long).",
                "!type": "fn(length: number)"
            }
        },
        "Jdbc.JdbcConnection": {
            "TRANSACTION_NONE": {
                "!type": "number"
            },
            "TRANSACTION_READ_COMMITTED": {
                "!type": "number"
            },
            "TRANSACTION_READ_UNCOMMITTED": {
                "!type": "number"
            },
            "TRANSACTION_REPEATABLE_READ": {
                "!type": "number"
            },
            "TRANSACTION_SERIALIZABLE": {
                "!type": "number"
            },
            "clearWarnings": {
                "!doc": "For documentation of this method, see java.sql.Connection#clearWarnings().",
                "!type": "fn()"
            },
            "close": {
                "!doc": "Release the JdbcConnection's database and all associated resources.\n\n \n \n var conn = Jdbc.getConnection(&quot;jdbc:mysql:\/\/&lt;host&gt;:&lt;port&gt;\/&lt;instance&gt;&quot;, &quot;user&quot;, &quot;password&quot;);\n conn.close();\n ",
                "!type": "fn()"
            },
            "commit": {
                "!doc": "Makes all pending changes permanent, releases database locks held by this JdbcConnection.\n\n \n \n var conn = Jdbc.getConnection(&quot;jdbc:mysql:\/\/&lt;host&gt;:&lt;port&gt;\/&lt;instance&gt;&quot;, &quot;user&quot;, &quot;password&quot;);\n conn.setAutoCommit(false);\n var stmt = conn.prepareStatement(&quot;insert into person (lname,fname) values (?,?)&quot;);\n var start = new Date();\n for (var i = 0; i &lt; 5000; i++) {\n   \/\/ Objects are accessed using 1-based indexing\n   stmt.setObject(1, &#39;firstName&#39; + i);\n   stmt.setObject(2, &#39;lastName&#39; + i);\n   stmt.addBatch();\n }\n var res = stmt.executeBatch();\n conn.commit(); \/\/ When this returns, this is when changes are actually commited\n conn.close();\n ",
                "!type": "fn()"
            },
            "createArrayOf": {
                "!doc": "For documentation of this method, see\n java.sql.Connection#createArrayOf(String, Object[]).",
                "!type": "fn(typeName: string, elements: [object]) -> Jdbc.JdbcArray"
            },
            "createBlob": {
                "!doc": "Constructs a JdbcBlob instance\n\n The object returned initially contains no data. The setBytes methods of JdbcBlob may\n be used to set the data it should contain. Note that the blob used here is not the same\n as the blob created with\n Utilities.newBlob(data). To\n convert between the two formats, use the defined getBytes() and setBytes() methods.\n Alternatively, both JdbcBlob and JdbcClob provide a getAppsScriptBlob()\n convenience method for converting to a format that can be used by Apps Script.",
                "!type": "fn() -> Jdbc.JdbcBlob"
            },
            "createClob": {
                "!doc": "For documentation of this method, see java.sql.Connection#createClob().",
                "!type": "fn() -> Jdbc.JdbcClob"
            },
            "createNClob": {
                "!doc": "For documentation of this method, see java.sql.Connection#createNClob().",
                "!type": "fn() -> Jdbc.JdbcClob"
            },
            "createSQLXML": {
                "!doc": "For documentation of this method, see java.sql.Connection#createSQLXML().",
                "!type": "fn() -> Jdbc.JdbcSQLXML"
            },
            "createStatement": {
                "!doc": "Creates a JdbcStatement object for sending SQL statements to the database.\n\n \n \n \/\/ This sample code assumes authentication is off\n var conn = Jdbc.getConnection(&quot;jdbc:mysql:\/\/&lt;host&gt;:3306\/&lt;instance&gt;&quot;)\n var stmt = conn.createStatement();\n\n stmt.setMaxRows(100);\n var rs = stmt.execute(&quot;select * from person&quot;);\n\n while(rs.next()) {\n   \/\/ Do something\n }\n\n rs.close();\n stmt.close();\n conn.close();\n",
                "!type": "fn() -> Jdbc.JdbcStatement"
            },
            "createStatement ": {
                "!doc": "Creates a JdbcStatement object for sending SQL statements to the database.\n\n This version allows the result set type and concurrency to be overridden.\n\n \n \n \/\/ This sample code assumes authentication is off\n \/\/ For more information about this method, see documentation here:\n \/\/  http:\/\/docs.oracle.com\/javase\/6\/docs\/api\/java\/sql\/Connection.html#createStatement(int, int)\n var conn = Jdbc.getConnection(&quot;jdbc:mysql:\/\/&lt;host&gt;:3306\/&lt;instance&gt;&quot;)\n var stmt = conn.createStatement(Jdbc.ResultSet.TYPE_FORWARD_ONLY,\n                                 Jdbc.ResultSet.CONCUR_READ_ONLY);\n\n stmt.setMaxRows(100);\n var rs = stmt.execute(&quot;select * from person&quot;);\n\n while(rs.next()) {\n   \/\/ Do something\n }\n\n rs.close();\n stmt.close();\n conn.close();\n",
                "!type": "fn(resultSetType: number, resultSetConcurrency: number) -> Jdbc.JdbcStatement"
            },
            "createStatement  ": {
                "!doc": "Creates a JdbcStatement object for sending SQL statements to the database.\n\n This version allows the result set type, concurrency and holdability to be overridden.\n\n \n \n \/\/ This sample code assumes authentication is off\n \/\/ For more information about this method, see documentation here:\n \/\/  http:\/\/docs.oracle.com\/javase\/6\/docs\/api\/java\/sql\/Connection.html#createStatement(int, int)\n var conn = Jdbc.getConnection(&quot;jdbc:mysql:\/\/&lt;host&gt;:3306\/&lt;instance&gt;&quot;)\n var stmt = conn.createStatement(Jdbc.ResultSet.TYPE_FORWARD_ONLY,\n                                 Jdbc.ResultSet.CONCUR_READ_ONLY,\n                                 Jdbc.ResultSet.HOLD_CURSORS_OVER_COMMIT);\n\n stmt.setMaxRows(100);\n var rs = stmt.execute(&quot;select * from person&quot;);\n\n while(rs.next()) {\n   \/\/ Do something\n }\n\n rs.close();\n stmt.close();\n conn.close();\n",
                "!type": "fn(resultSetType: number, resultSetConcurrency: number, resultSetHoldability: number) -> Jdbc.JdbcStatement"
            },
            "createStruct": {
                "!doc": "For documentation of this method, see\n java.sql.Connection#createStruct(String, Object[]).",
                "!type": "fn(typeName: string, attributes: [object]) -> Jdbc.JdbcStruct"
            },
            "getAutoCommit": {
                "!doc": "For documentation of this method, see java.sql.Connection#getAutoCommit().",
                "!type": "fn() -> bool"
            },
            "getCatalog": {
                "!doc": "For documentation of this method, see java.sql.Connection#getCatalog().",
                "!type": "fn() -> string"
            },
            "getHoldability": {
                "!doc": "For documentation of this method, see java.sql.Connection#getHoldability().",
                "!type": "fn() -> number"
            },
            "getMetaData": {
                "!doc": "For documentation of this method, see java.sql.Connection#getMetaData().",
                "!type": "fn() -> Jdbc.JdbcDatabaseMetaData"
            },
            "getTransactionIsolation": {
                "!doc": "For documentation of this method, see java.sql.Connection#getTransactionIsolation().",
                "!type": "fn() -> number"
            },
            "getWarnings": {
                "!doc": "For documentation of this method, see java.sql.Connection#getWarnings().",
                "!type": "fn() -> [string]"
            },
            "isClosed": {
                "!doc": "For documentation of this method, see java.sql.Connection#isClosed().",
                "!type": "fn() -> bool"
            },
            "isReadOnly": {
                "!doc": "For documentation of this method, see java.sql.Connection#isReadOnly().",
                "!type": "fn() -> bool"
            },
            "isValid": {
                "!doc": "For documentation of this method, see java.sql.Connection#isValid(int).",
                "!type": "fn(timeout: number) -> bool"
            },
            "nativeSQL": {
                "!doc": "For documentation of this method, see java.sql.Connection#nativeSQL(String).",
                "!type": "fn(sql: string) -> string"
            },
            "prepareCall": {
                "!doc": "For documentation of this method, see java.sql.Connection#prepareCall(String).",
                "!type": "fn(sql: string) -> Jdbc.JdbcCallableStatement"
            },
            "prepareCall ": {
                "!doc": "For documentation of this method, see\n java.sql.Connection#prepareCall(String, int, int).",
                "!type": "fn(sql: string, resultSetType: number, resultSetConcurrency: number) -> Jdbc.JdbcCallableStatement"
            },
            "prepareCall  ": {
                "!doc": "For documentation of this method, see\n java.sql.Connection#prepareCall(String, int, int, int).",
                "!type": "fn(sql: string, resultSetType: number, resultSetConcurrency: number, resultSetHoldability: number) -> Jdbc.JdbcCallableStatement"
            },
            "prepareStatement": {
                "!doc": "For documentation of this method, see java.sql.Connection#prepareStatement(String).",
                "!type": "fn(sql: string) -> Jdbc.JdbcPreparedStatement"
            },
            "prepareStatement ": {
                "!doc": "For documentation of this method, see\n java.sql.Connection#prepareStatement(String, int).",
                "!type": "fn(sql: string, autoGeneratedKeys: number) -> Jdbc.JdbcPreparedStatement"
            },
            "prepareStatement  ": {
                "!doc": "For documentation of this method, see\n java.sql.Connection#prepareStatement(String, int, int).",
                "!type": "fn(sql: string, resultSetType: number, resultSetConcurrency: number) -> Jdbc.JdbcPreparedStatement"
            },
            "prepareStatement   ": {
                "!doc": "For documentation of this method, see\n java.sql.Connection#prepareStatement(String, int, int, int).",
                "!type": "fn(sql: string, resultSetType: number, resultSetConcurrency: number, resultSetHoldability: number) -> Jdbc.JdbcPreparedStatement"
            },
            "prepareStatementByIndex": {
                "!doc": "For documentation of this method, see\n java.sql.Connection#prepareStatement(String, int[]).",
                "!type": "fn(sql: string, indices: [number]) -> Jdbc.JdbcPreparedStatement"
            },
            "prepareStatementByName": {
                "!doc": "For documentation of this method, see\n java.sql.Connection#prepareStatement(String, String[]).",
                "!type": "fn(sql: string, columnNames: [string]) -> Jdbc.JdbcPreparedStatement"
            },
            "releaseSavepoint": {
                "!doc": "For documentation of this method, see\n java.sql.Connection#releaseSavepoint(java.sql.Savepoint).",
                "!type": "fn(savepoint: Jdbc.JdbcSavepoint)"
            },
            "rollback": {
                "!doc": "For documentation of this method, see java.sql.Connection#rollback().",
                "!type": "fn()"
            },
            "rollback ": {
                "!doc": "For documentation of this method, see\n java.sql.Connection#rollback(java.sql.Savepoint).",
                "!type": "fn(savepoint: Jdbc.JdbcSavepoint)"
            },
            "setAutoCommit": {
                "!doc": "For documentation of this method, see java.sql.Connection#setAutoCommit(boolean).",
                "!type": "fn(autoCommit: bool)"
            },
            "setCatalog": {
                "!doc": "For documentation of this method, see java.sql.Connection#setCatalog(String).",
                "!type": "fn(catalog: string)"
            },
            "setHoldability": {
                "!doc": "For documentation of this method, see java.sql.Connection#setHoldability(int).",
                "!type": "fn(holdability: number)"
            },
            "setReadOnly": {
                "!doc": "For documentation of this method, see java.sql.Connection#setReadOnly(boolean).",
                "!type": "fn(readOnly: bool)"
            },
            "setSavepoint": {
                "!doc": "For documentation of this method, see java.sql.Connection#setSavepoint().",
                "!type": "fn() -> Jdbc.JdbcSavepoint"
            },
            "setSavepoint ": {
                "!doc": "For documentation of this method, see java.sql.Connection#setSavepoint(String).",
                "!type": "fn(name: string) -> Jdbc.JdbcSavepoint"
            },
            "setTransactionIsolation": {
                "!doc": "For documentation of this method, see\n java.sql.Connection#setTransactionIsolation(int).",
                "!type": "fn(level: number)"
            }
        },
        "Jdbc.JdbcDatabaseMetaData": {
            "allProceduresAreCallable": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#allProceduresAreCallable().",
                "!type": "fn() -> bool"
            },
            "allTablesAreSelectable": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#allTablesAreSelectable().",
                "!type": "fn() -> bool"
            },
            "attributeNoNulls": {
                "!type": "number"
            },
            "attributeNullable": {
                "!type": "number"
            },
            "attributeNullableUnknown": {
                "!type": "number"
            },
            "autoCommitFailureClosesAllResultSets": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#autoCommitFailureClosesAllResultSets().",
                "!type": "fn() -> bool"
            },
            "bestRowNotPseudo": {
                "!type": "number"
            },
            "bestRowPseudo": {
                "!type": "number"
            },
            "bestRowSession": {
                "!type": "number"
            },
            "bestRowTemporary": {
                "!type": "number"
            },
            "bestRowTransaction": {
                "!type": "number"
            },
            "bestRowUnknown": {
                "!type": "number"
            },
            "columnNoNulls": {
                "!type": "number"
            },
            "columnNullable": {
                "!type": "number"
            },
            "columnNullableUnknown": {
                "!type": "number"
            },
            "dataDefinitionCausesTransactionCommit": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#dataDefinitionCausesTransactionCommit().",
                "!type": "fn() -> bool"
            },
            "dataDefinitionIgnoredInTransactions": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#dataDefinitionIgnoredInTransactions().",
                "!type": "fn() -> bool"
            },
            "deletesAreDetected": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#deletesAreDetected(int).",
                "!type": "fn(type: number) -> bool"
            },
            "doesMaxRowSizeIncludeBlobs": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#doesMaxRowSizeIncludeBlobs().",
                "!type": "fn() -> bool"
            },
            "functionColumnIn": {
                "!type": "number"
            },
            "functionColumnInOut": {
                "!type": "number"
            },
            "functionColumnOut": {
                "!type": "number"
            },
            "functionColumnResult": {
                "!type": "number"
            },
            "functionColumnUnknown": {
                "!type": "number"
            },
            "functionNoNulls": {
                "!type": "number"
            },
            "functionNoTable": {
                "!type": "number"
            },
            "functionNullable": {
                "!type": "number"
            },
            "functionNullableUnknown": {
                "!type": "number"
            },
            "functionResultUnknown": {
                "!type": "number"
            },
            "functionReturn": {
                "!type": "number"
            },
            "functionReturnsTable": {
                "!type": "number"
            },
            "getAttributes": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getAttributes(String, String, String, String).",
                "!type": "fn(catalog: string, schemaPattern: string, typeNamePattern: string, attributeNamePattern: string) -> Jdbc.JdbcResultSet"
            },
            "getBestRowIdentifier": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getBestRowIdentifier(String, String, String, int, boolean).",
                "!type": "fn(catalog: string, schema: string, table: string, scope: number, nullable: bool) -> Jdbc.JdbcResultSet"
            },
            "getCatalogSeparator": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getCatalogSeparator().",
                "!type": "fn() -> string"
            },
            "getCatalogTerm": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getCatalogTerm().",
                "!type": "fn() -> string"
            },
            "getCatalogs": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getCatalogs().",
                "!type": "fn() -> Jdbc.JdbcResultSet"
            },
            "getClientInfoProperties": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getClientInfoProperties().",
                "!type": "fn() -> Jdbc.JdbcResultSet"
            },
            "getColumnPrivileges": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getColumnPrivileges(String, String, String, String).",
                "!type": "fn(catalog: string, schema: string, table: string, columnNamePattern: string) -> Jdbc.JdbcResultSet"
            },
            "getColumns": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getColumns(String, String, String, String).",
                "!type": "fn(catalog: string, schemaPattern: string, tableNamePattern: string, columnNamePattern: string) -> Jdbc.JdbcResultSet"
            },
            "getConnection": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getConnection().",
                "!type": "fn() -> Jdbc.JdbcConnection"
            },
            "getCrossReference": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getCrossReference(String, String, String, String, String,\n String).",
                "!type": "fn(parentCatalog: string, parentSchema: string, parentTable: string, foreignCatalog: string, foreignSchema: string, foreignTable: string) -> Jdbc.JdbcResultSet"
            },
            "getDatabaseMajorVersion": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getDatabaseMajorVersion().",
                "!type": "fn() -> number"
            },
            "getDatabaseMinorVersion": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getDatabaseMinorVersion().",
                "!type": "fn() -> number"
            },
            "getDatabaseProductName": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getDatabaseProductName().",
                "!type": "fn() -> string"
            },
            "getDatabaseProductVersion": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getDatabaseProductVersion().",
                "!type": "fn() -> string"
            },
            "getDefaultTransactionIsolation": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getDefaultTransactionIsolation().",
                "!type": "fn() -> number"
            },
            "getDriverMajorVersion": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getDriverMajorVersion().",
                "!type": "fn() -> number"
            },
            "getDriverMinorVersion": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getDriverMinorVersion().",
                "!type": "fn() -> number"
            },
            "getDriverName": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getDriverName().",
                "!type": "fn() -> string"
            },
            "getDriverVersion": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getDriverVersion().",
                "!type": "fn() -> string"
            },
            "getExportedKeys": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getExportedKeys(String, String, String).",
                "!type": "fn(catalog: string, schema: string, table: string) -> Jdbc.JdbcResultSet"
            },
            "getExtraNameCharacters": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getExtraNameCharacters().",
                "!type": "fn() -> string"
            },
            "getFunctionColumns": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getFunctionColumns(String, String, String, String).",
                "!type": "fn(catalog: string, schemaPattern: string, functionNamePattern: string, columnNamePattern: string) -> Jdbc.JdbcResultSet"
            },
            "getFunctions": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getFunctions(String, String, String).",
                "!type": "fn(catalog: string, schemaPattern: string, functionNamePattern: string) -> Jdbc.JdbcResultSet"
            },
            "getIdentifierQuoteString": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getIdentifierQuoteString().",
                "!type": "fn() -> string"
            },
            "getImportedKeys": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getImportedKeys(String, String, String).",
                "!type": "fn(catalog: string, schema: string, table: string) -> Jdbc.JdbcResultSet"
            },
            "getIndexInfo": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getIndexInfo(String, String, String, boolean, boolean).",
                "!type": "fn(catalog: string, schema: string, table: string, unique: bool, approximate: bool) -> Jdbc.JdbcResultSet"
            },
            "getJDBCMajorVersion": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getJDBCMajorVersion().",
                "!type": "fn() -> number"
            },
            "getJDBCMinorVersion": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getJDBCMinorVersion().",
                "!type": "fn() -> number"
            },
            "getMaxBinaryLiteralLength": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getMaxBinaryLiteralLength().",
                "!type": "fn() -> number"
            },
            "getMaxCatalogNameLength": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getMaxCatalogNameLength().",
                "!type": "fn() -> number"
            },
            "getMaxCharLiteralLength": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getMaxCharLiteralLength().",
                "!type": "fn() -> number"
            },
            "getMaxColumnNameLength": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getMaxColumnNameLength().",
                "!type": "fn() -> number"
            },
            "getMaxColumnsInGroupBy": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getMaxColumnsInGroupBy().",
                "!type": "fn() -> number"
            },
            "getMaxColumnsInIndex": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getMaxColumnsInIndex().",
                "!type": "fn() -> number"
            },
            "getMaxColumnsInOrderBy": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getMaxColumnsInOrderBy().",
                "!type": "fn() -> number"
            },
            "getMaxColumnsInSelect": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getMaxColumnsInSelect().",
                "!type": "fn() -> number"
            },
            "getMaxColumnsInTable": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getMaxColumnsInTable().",
                "!type": "fn() -> number"
            },
            "getMaxConnections": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getMaxConnections().",
                "!type": "fn() -> number"
            },
            "getMaxCursorNameLength": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getMaxCursorNameLength().",
                "!type": "fn() -> number"
            },
            "getMaxIndexLength": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getMaxIndexLength().",
                "!type": "fn() -> number"
            },
            "getMaxProcedureNameLength": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getMaxProcedureNameLength().",
                "!type": "fn() -> number"
            },
            "getMaxRowSize": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getMaxRowSize().",
                "!type": "fn() -> number"
            },
            "getMaxSchemaNameLength": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getMaxSchemaNameLength().",
                "!type": "fn() -> number"
            },
            "getMaxStatementLength": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getMaxStatementLength().",
                "!type": "fn() -> number"
            },
            "getMaxStatements": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getMaxStatements().",
                "!type": "fn() -> number"
            },
            "getMaxTableNameLength": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getMaxTableNameLength().",
                "!type": "fn() -> number"
            },
            "getMaxTablesInSelect": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getMaxTablesInSelect().",
                "!type": "fn() -> number"
            },
            "getMaxUserNameLength": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getMaxUserNameLength().",
                "!type": "fn() -> number"
            },
            "getNumericFunctions": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getNumericFunctions().",
                "!type": "fn() -> string"
            },
            "getPrimaryKeys": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getPrimaryKeys(String, String, String).",
                "!type": "fn(catalog: string, schema: string, table: string) -> Jdbc.JdbcResultSet"
            },
            "getProcedureColumns": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getProcedureColumns(String, String, String, String).",
                "!type": "fn(catalog: string, schemaPattern: string, procedureNamePattern: string, columnNamePattern: string) -> Jdbc.JdbcResultSet"
            },
            "getProcedureTerm": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getProcedureTerm().",
                "!type": "fn() -> string"
            },
            "getProcedures": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getProcedures(String, String, String).",
                "!type": "fn(catalog: string, schemaPattern: string, procedureNamePattern: string) -> Jdbc.JdbcResultSet"
            },
            "getResultSetHoldability": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getResultSetHoldability().",
                "!type": "fn() -> number"
            },
            "getRowIdLifetime": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getRowIdLifetime().",
                "!type": "fn() -> number"
            },
            "getSQLKeywords": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getSQLKeywords().",
                "!type": "fn() -> string"
            },
            "getSQLStateType": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getSQLStateType().",
                "!type": "fn() -> number"
            },
            "getSchemaTerm": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getSchemaTerm().",
                "!type": "fn() -> string"
            },
            "getSchemas": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getSchemas().",
                "!type": "fn() -> Jdbc.JdbcResultSet"
            },
            "getSchemas ": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getSchemas(String, String).",
                "!type": "fn(catalog: string, schemaPattern: string) -> Jdbc.JdbcResultSet"
            },
            "getSearchStringEscape": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getSearchStringEscape().",
                "!type": "fn() -> string"
            },
            "getStringFunctions": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getStringFunctions().",
                "!type": "fn() -> string"
            },
            "getSuperTables": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getSuperTables(String, String, String).",
                "!type": "fn(catalog: string, schemaPattern: string, tableNamePattern: string) -> Jdbc.JdbcResultSet"
            },
            "getSuperTypes": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getSuperTypes(String, String, String).",
                "!type": "fn(catalog: string, schemaPattern: string, typeNamePattern: string) -> Jdbc.JdbcResultSet"
            },
            "getSystemFunctions": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getSystemFunctions().",
                "!type": "fn() -> string"
            },
            "getTablePrivileges": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getTablePrivileges(String, String, String).",
                "!type": "fn(catalog: string, schemaPattern: string, tableNamePattern: string) -> Jdbc.JdbcResultSet"
            },
            "getTableTypes": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getTableTypes().",
                "!type": "fn() -> Jdbc.JdbcResultSet"
            },
            "getTables": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getTables(String, String, String, String[]).",
                "!type": "fn(catalog: string, schemaPattern: string, tableNamePattern: string, types: [string]) -> Jdbc.JdbcResultSet"
            },
            "getTimeDateFunctions": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getTimeDateFunctions().",
                "!type": "fn() -> string"
            },
            "getTypeInfo": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getTypeInfo().",
                "!type": "fn() -> Jdbc.JdbcResultSet"
            },
            "getUDTs": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getUDTs(String, String, String, int[]).",
                "!type": "fn(catalog: string, schemaPattern: string, typeNamePattern: string, types: [number]) -> Jdbc.JdbcResultSet"
            },
            "getURL": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getURL().",
                "!type": "fn() -> string"
            },
            "getUserName": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getUserName().",
                "!type": "fn() -> string"
            },
            "getVersionColumns": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#getVersionColumns(String, String, String).",
                "!type": "fn(catalog: string, schema: string, table: string) -> Jdbc.JdbcResultSet"
            },
            "importedKeyCascade": {
                "!type": "number"
            },
            "importedKeyInitiallyDeferred": {
                "!type": "number"
            },
            "importedKeyInitiallyImmediate": {
                "!type": "number"
            },
            "importedKeyNoAction": {
                "!type": "number"
            },
            "importedKeyNotDeferrable": {
                "!type": "number"
            },
            "importedKeyRestrict": {
                "!type": "number"
            },
            "importedKeySetDefault": {
                "!type": "number"
            },
            "importedKeySetNull": {
                "!type": "number"
            },
            "insertsAreDetected": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#insertsAreDetected(int).",
                "!type": "fn(type: number) -> bool"
            },
            "isCatalogAtStart": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#isCatalogAtStart().",
                "!type": "fn() -> bool"
            },
            "isReadOnly": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#isReadOnly().",
                "!type": "fn() -> bool"
            },
            "locatorsUpdateCopy": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#locatorsUpdateCopy().",
                "!type": "fn() -> bool"
            },
            "nullPlusNonNullIsNull": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#nullPlusNonNullIsNull().",
                "!type": "fn() -> bool"
            },
            "nullsAreSortedAtEnd": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#nullsAreSortedAtEnd().",
                "!type": "fn() -> bool"
            },
            "nullsAreSortedAtStart": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#nullsAreSortedAtStart().",
                "!type": "fn() -> bool"
            },
            "nullsAreSortedHigh": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#nullsAreSortedHigh().",
                "!type": "fn() -> bool"
            },
            "nullsAreSortedLow": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#nullsAreSortedLow().",
                "!type": "fn() -> bool"
            },
            "othersDeletesAreVisible": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#othersDeletesAreVisible(int).",
                "!type": "fn(type: number) -> bool"
            },
            "othersInsertsAreVisible": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#othersInsertsAreVisible(int).",
                "!type": "fn(type: number) -> bool"
            },
            "othersUpdatesAreVisible": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#othersUpdatesAreVisible(int).",
                "!type": "fn(type: number) -> bool"
            },
            "ownDeletesAreVisible": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#ownDeletesAreVisible(int).",
                "!type": "fn(type: number) -> bool"
            },
            "ownInsertsAreVisible": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#ownInsertsAreVisible(int).",
                "!type": "fn(type: number) -> bool"
            },
            "ownUpdatesAreVisible": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#ownUpdatesAreVisible(int).",
                "!type": "fn(type: number) -> bool"
            },
            "procedureColumnIn": {
                "!type": "number"
            },
            "procedureColumnInOut": {
                "!type": "number"
            },
            "procedureColumnOut": {
                "!type": "number"
            },
            "procedureColumnResult": {
                "!type": "number"
            },
            "procedureColumnReturn": {
                "!type": "number"
            },
            "procedureColumnUnknown": {
                "!type": "number"
            },
            "procedureNoNulls": {
                "!type": "number"
            },
            "procedureNullable": {
                "!type": "number"
            },
            "procedureNullableUnknown": {
                "!type": "number"
            },
            "sqlStateSQL": {
                "!type": "number"
            },
            "sqlStateSQL99": {
                "!type": "number"
            },
            "sqlStateXOpen": {
                "!type": "number"
            },
            "storesLowerCaseIdentifiers": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#storesLowerCaseIdentifiers().",
                "!type": "fn() -> bool"
            },
            "storesLowerCaseQuotedIdentifiers": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#storesLowerCaseQuotedIdentifiers().",
                "!type": "fn() -> bool"
            },
            "storesMixedCaseIdentifiers": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#storesMixedCaseIdentifiers().",
                "!type": "fn() -> bool"
            },
            "storesMixedCaseQuotedIdentifiers": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#storesMixedCaseQuotedIdentifiers().",
                "!type": "fn() -> bool"
            },
            "storesUpperCaseIdentifiers": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#storesUpperCaseIdentifiers().",
                "!type": "fn() -> bool"
            },
            "storesUpperCaseQuotedIdentifiers": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#storesUpperCaseQuotedIdentifiers().",
                "!type": "fn() -> bool"
            },
            "supportsANSI92EntryLevelSQL": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsANSI92EntryLevelSQL().",
                "!type": "fn() -> bool"
            },
            "supportsANSI92FullSQL": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsANSI92FullSQL().",
                "!type": "fn() -> bool"
            },
            "supportsANSI92IntermediateSQL": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsANSI92IntermediateSQL().",
                "!type": "fn() -> bool"
            },
            "supportsAlterTableWithAddColumn": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsAlterTableWithAddColumn().",
                "!type": "fn() -> bool"
            },
            "supportsAlterTableWithDropColumn": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsAlterTableWithDropColumn().",
                "!type": "fn() -> bool"
            },
            "supportsBatchUpdates": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsBatchUpdates().",
                "!type": "fn() -> bool"
            },
            "supportsCatalogsInDataManipulation": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsCatalogsInDataManipulation().",
                "!type": "fn() -> bool"
            },
            "supportsCatalogsInIndexDefinitions": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsCatalogsInIndexDefinitions().",
                "!type": "fn() -> bool"
            },
            "supportsCatalogsInPrivilegeDefinitions": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsCatalogsInPrivilegeDefinitions().",
                "!type": "fn() -> bool"
            },
            "supportsCatalogsInProcedureCalls": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsCatalogsInProcedureCalls().",
                "!type": "fn() -> bool"
            },
            "supportsCatalogsInTableDefinitions": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsCatalogsInTableDefinitions().",
                "!type": "fn() -> bool"
            },
            "supportsColumnAliasing": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsColumnAliasing().",
                "!type": "fn() -> bool"
            },
            "supportsConvert": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsConvert().",
                "!type": "fn() -> bool"
            },
            "supportsConvert ": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsConvert(int, int).",
                "!type": "fn(fromType: number, toType: number) -> bool"
            },
            "supportsCoreSQLGrammar": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsCoreSQLGrammar().",
                "!type": "fn() -> bool"
            },
            "supportsCorrelatedSubqueries": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsCorrelatedSubqueries().",
                "!type": "fn() -> bool"
            },
            "supportsDataDefinitionAndDataManipulationTransactions": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsDataDefinitionAndDataManipulationTransactions().",
                "!type": "fn() -> bool"
            },
            "supportsDataManipulationTransactionsOnly": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsDataManipulationTransactionsOnly().",
                "!type": "fn() -> bool"
            },
            "supportsDifferentTableCorrelationNames": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsDifferentTableCorrelationNames().",
                "!type": "fn() -> bool"
            },
            "supportsExpressionsInOrderBy": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsExpressionsInOrderBy().",
                "!type": "fn() -> bool"
            },
            "supportsExtendedSQLGrammar": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsExtendedSQLGrammar().",
                "!type": "fn() -> bool"
            },
            "supportsFullOuterJoins": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsFullOuterJoins().",
                "!type": "fn() -> bool"
            },
            "supportsGetGeneratedKeys": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsGetGeneratedKeys().",
                "!type": "fn() -> bool"
            },
            "supportsGroupBy": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsGroupBy().",
                "!type": "fn() -> bool"
            },
            "supportsGroupByBeyondSelect": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsGroupByBeyondSelect().",
                "!type": "fn() -> bool"
            },
            "supportsGroupByUnrelated": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsGroupByUnrelated().",
                "!type": "fn() -> bool"
            },
            "supportsIntegrityEnhancementFacility": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsIntegrityEnhancementFacility().",
                "!type": "fn() -> bool"
            },
            "supportsLikeEscapeClause": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsLikeEscapeClause().",
                "!type": "fn() -> bool"
            },
            "supportsLimitedOuterJoins": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsLimitedOuterJoins().",
                "!type": "fn() -> bool"
            },
            "supportsMinimumSQLGrammar": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsMinimumSQLGrammar().",
                "!type": "fn() -> bool"
            },
            "supportsMixedCaseIdentifiers": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsMixedCaseIdentifiers().",
                "!type": "fn() -> bool"
            },
            "supportsMixedCaseQuotedIdentifiers": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsMixedCaseQuotedIdentifiers().",
                "!type": "fn() -> bool"
            },
            "supportsMultipleOpenResults": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsMultipleOpenResults().",
                "!type": "fn() -> bool"
            },
            "supportsMultipleResultSets": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsMultipleResultSets().",
                "!type": "fn() -> bool"
            },
            "supportsMultipleTransactions": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsMultipleTransactions().",
                "!type": "fn() -> bool"
            },
            "supportsNamedParameters": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsNamedParameters().",
                "!type": "fn() -> bool"
            },
            "supportsNonNullableColumns": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsNonNullableColumns().",
                "!type": "fn() -> bool"
            },
            "supportsOpenCursorsAcrossCommit": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsOpenCursorsAcrossCommit().",
                "!type": "fn() -> bool"
            },
            "supportsOpenCursorsAcrossRollback": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsOpenCursorsAcrossRollback().",
                "!type": "fn() -> bool"
            },
            "supportsOpenStatementsAcrossCommit": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsOpenStatementsAcrossCommit().",
                "!type": "fn() -> bool"
            },
            "supportsOpenStatementsAcrossRollback": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsOpenStatementsAcrossRollback().",
                "!type": "fn() -> bool"
            },
            "supportsOrderByUnrelated": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsOrderByUnrelated().",
                "!type": "fn() -> bool"
            },
            "supportsOuterJoins": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsOuterJoins().",
                "!type": "fn() -> bool"
            },
            "supportsPositionedDelete": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsPositionedDelete().",
                "!type": "fn() -> bool"
            },
            "supportsPositionedUpdate": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsPositionedUpdate().",
                "!type": "fn() -> bool"
            },
            "supportsResultSetConcurrency": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsResultSetConcurrency(int, int).",
                "!type": "fn(type: number, concurrency: number) -> bool"
            },
            "supportsResultSetHoldability": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsResultSetHoldability(int).",
                "!type": "fn(holdability: number) -> bool"
            },
            "supportsResultSetType": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsResultSetType(int).",
                "!type": "fn(type: number) -> bool"
            },
            "supportsSavepoints": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsSavepoints().",
                "!type": "fn() -> bool"
            },
            "supportsSchemasInDataManipulation": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsSchemasInDataManipulation().",
                "!type": "fn() -> bool"
            },
            "supportsSchemasInIndexDefinitions": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsSchemasInIndexDefinitions().",
                "!type": "fn() -> bool"
            },
            "supportsSchemasInPrivilegeDefinitions": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsSchemasInPrivilegeDefinitions().",
                "!type": "fn() -> bool"
            },
            "supportsSchemasInProcedureCalls": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsSchemasInProcedureCalls().",
                "!type": "fn() -> bool"
            },
            "supportsSchemasInTableDefinitions": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsSchemasInTableDefinitions().",
                "!type": "fn() -> bool"
            },
            "supportsSelectForUpdate": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsSelectForUpdate().",
                "!type": "fn() -> bool"
            },
            "supportsStatementPooling": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsStatementPooling().",
                "!type": "fn() -> bool"
            },
            "supportsStoredFunctionsUsingCallSyntax": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsStoredFunctionsUsingCallSyntax().",
                "!type": "fn() -> bool"
            },
            "supportsStoredProcedures": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsStoredProcedures().",
                "!type": "fn() -> bool"
            },
            "supportsSubqueriesInComparisons": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsSubqueriesInComparisons().",
                "!type": "fn() -> bool"
            },
            "supportsSubqueriesInExists": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsSubqueriesInExists().",
                "!type": "fn() -> bool"
            },
            "supportsSubqueriesInIns": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsSubqueriesInIns().",
                "!type": "fn() -> bool"
            },
            "supportsSubqueriesInQuantifieds": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsSubqueriesInQuantifieds().",
                "!type": "fn() -> bool"
            },
            "supportsTableCorrelationNames": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsTableCorrelationNames().",
                "!type": "fn() -> bool"
            },
            "supportsTransactionIsolationLevel": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsTransactionIsolationLevel(int).",
                "!type": "fn(level: number) -> bool"
            },
            "supportsTransactions": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsTransactions().",
                "!type": "fn() -> bool"
            },
            "supportsUnion": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsUnion().",
                "!type": "fn() -> bool"
            },
            "supportsUnionAll": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#supportsUnionAll().",
                "!type": "fn() -> bool"
            },
            "tableIndexClustered": {
                "!type": "number"
            },
            "tableIndexHashed": {
                "!type": "number"
            },
            "tableIndexOther": {
                "!type": "number"
            },
            "tableIndexStatistic": {
                "!type": "number"
            },
            "typeNoNulls": {
                "!type": "number"
            },
            "typeNullable": {
                "!type": "number"
            },
            "typeNullableUnknown": {
                "!type": "number"
            },
            "typePredBasic": {
                "!type": "number"
            },
            "typePredChar": {
                "!type": "number"
            },
            "typePredNone": {
                "!type": "number"
            },
            "typeSearchable": {
                "!type": "number"
            },
            "updatesAreDetected": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#updatesAreDetected(int).",
                "!type": "fn(type: number) -> bool"
            },
            "usesLocalFilePerTable": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#usesLocalFilePerTable().",
                "!type": "fn() -> bool"
            },
            "usesLocalFiles": {
                "!doc": "For documentation of this method, see\n java.sql.DatabaseMetaData#usesLocalFiles().",
                "!type": "fn() -> bool"
            },
            "versionColumnNotPseudo": {
                "!type": "number"
            },
            "versionColumnPseudo": {
                "!type": "number"
            },
            "versionColumnUnknown": {
                "!type": "number"
            }
        },
        "Jdbc.JdbcDate": {
            "after": {
                "!doc": "For documentation of this method, see java.sql.Date#after(java.util.Date).",
                "!type": "fn(when: Jdbc.JdbcDate) -> bool"
            },
            "before": {
                "!doc": "For documentation of this method, see java.sql.Date#before(java.util.Date).",
                "!type": "fn(when: Jdbc.JdbcDate) -> bool"
            },
            "getDate": {
                "!doc": "For documentation of this method, see java.sql.Date#getDate().",
                "!type": "fn() -> number"
            },
            "getMonth": {
                "!doc": "For documentation of this method, see java.sql.Date#getMonth().",
                "!type": "fn() -> number"
            },
            "getTime": {
                "!doc": "For documentation of this method, see java.sql.Date#getTime().",
                "!type": "fn() -> number"
            },
            "getYear": {
                "!doc": "For documentation of this method, see java.sql.Date#getYear().",
                "!type": "fn() -> number"
            },
            "setDate": {
                "!doc": "For documentation of this method, see java.sql.Date#setDate(int).",
                "!type": "fn(date: number)"
            },
            "setMonth": {
                "!doc": "For documentation of this method, see java.sql.Date#setMonth(int).",
                "!type": "fn(month: number)"
            },
            "setTime": {
                "!doc": "For documentation of this method, see java.sql.Date#setTime(long).",
                "!type": "fn(milliseconds: number)"
            },
            "setYear": {
                "!doc": "For documentation of this method, see java.sql.Date#setYear(int).",
                "!type": "fn(year: number)"
            }
        },
        "Jdbc.JdbcParameterMetaData": {
            "getParameterClassName": {
                "!doc": "For documentation of this method, see\n java.sql.ParameterMetaData#getParameterClassName(int).",
                "!type": "fn(param: number) -> string"
            },
            "getParameterCount": {
                "!doc": "For documentation of this method, see java.sql.ParameterMetaData#getParameterCount().",
                "!type": "fn() -> number"
            },
            "getParameterMode": {
                "!doc": "For documentation of this method, see\n java.sql.ParameterMetaData#getParameterMode(int).",
                "!type": "fn(param: number) -> number"
            },
            "getParameterType": {
                "!doc": "For documentation of this method, see\n java.sql.ParameterMetaData#getParameterType(int).",
                "!type": "fn(param: number) -> number"
            },
            "getParameterTypeName": {
                "!doc": "For documentation of this method, see\n java.sql.ParameterMetaData#getParameterTypeName(int).",
                "!type": "fn(param: number) -> string"
            },
            "getPrecision": {
                "!doc": "For documentation of this method, see java.sql.ParameterMetaData#getPrecision(int).",
                "!type": "fn(param: number) -> number"
            },
            "getScale": {
                "!doc": "For documentation of this method, see java.sql.ParameterMetaData#getScale(int).",
                "!type": "fn(param: number) -> number"
            },
            "isNullable": {
                "!doc": "For documentation of this method, see java.sql.ParameterMetaData#isNullable(int).",
                "!type": "fn(param: number) -> number"
            },
            "isSigned": {
                "!doc": "For documentation of this method, see java.sql.ParameterMetaData#isSigned(int).",
                "!type": "fn(param: number) -> bool"
            },
            "parameterModeIn": {
                "!type": "number"
            },
            "parameterModeInOut": {
                "!type": "number"
            },
            "parameterModeOut": {
                "!type": "number"
            },
            "parameterModeUnknown": {
                "!type": "number"
            },
            "parameterNoNulls": {
                "!type": "number"
            },
            "parameterNullable": {
                "!type": "number"
            },
            "parameterNullableUnknown": {
                "!type": "number"
            }
        },
        "Jdbc.JdbcPreparedStatement": {
            "addBatch": {
                "!doc": "For documentation of this method, see java.sql.PreparedStatement#addBatch().",
                "!type": "fn()"
            },
            "addBatch ": {
                "!doc": "For documentation of this method, see java.sql.Statement#addBatch(String).",
                "!type": "fn(sql: string)"
            },
            "cancel": {
                "!doc": "For documentation of this method, see java.sql.Statement#cancel().",
                "!type": "fn()"
            },
            "clearBatch": {
                "!doc": "For documentation of this method, see java.sql.Statement#clearBatch().",
                "!type": "fn()"
            },
            "clearParameters": {
                "!doc": "For documentation of this method, see java.sql.PreparedStatement#clearParameters().",
                "!type": "fn()"
            },
            "clearWarnings": {
                "!doc": "For documentation of this method, see java.sql.Statement#clearWarnings().",
                "!type": "fn()"
            },
            "close": {
                "!doc": "For documentation of this method, see java.sql.Statement#close().",
                "!type": "fn()"
            },
            "execute": {
                "!doc": "For documentation of this method, see java.sql.PreparedStatement#execute().",
                "!type": "fn() -> bool"
            },
            "execute ": {
                "!doc": "For documentation of this method, see java.sql.Statement#execute(String).",
                "!type": "fn(sql: string) -> bool"
            },
            "execute  ": {
                "!doc": "For documentation of this method, see java.sql.Statement#execute(String, int).",
                "!type": "fn(sql: string, autoGeneratedKeys: number) -> bool"
            },
            "execute   ": {
                "!doc": "For documentation of this method, see java.sql.Statement#execute(String, int[]).",
                "!type": "fn(sql: string, columnIndexes: [number]) -> bool"
            },
            "execute    ": {
                "!doc": "For documentation of this method, see java.sql.Statement#execute(String, String[]).",
                "!type": "fn(sql: string, columnNames: [string]) -> bool"
            },
            "executeBatch": {
                "!doc": "For documentation of this method, see java.sql.Statement#executeBatch().",
                "!type": "fn() -> [number]"
            },
            "executeQuery": {
                "!doc": "For documentation of this method, see java.sql.PreparedStatement#executeQuery().",
                "!type": "fn() -> Jdbc.JdbcResultSet"
            },
            "executeQuery ": {
                "!doc": "For documentation of this method, see java.sql.Statement#executeQuery(String).",
                "!type": "fn(sql: string) -> Jdbc.JdbcResultSet"
            },
            "executeUpdate": {
                "!doc": "For documentation of this method, see java.sql.PreparedStatement#executeUpdate().",
                "!type": "fn() -> number"
            },
            "executeUpdate ": {
                "!doc": "For documentation of this method, see java.sql.Statement#executeUpdate(String).",
                "!type": "fn(sql: string) -> number"
            },
            "executeUpdate  ": {
                "!doc": "For documentation of this method, see java.sql.Statement#executeUpdate(String, int).",
                "!type": "fn(sql: string, autoGeneratedKeys: number) -> number"
            },
            "executeUpdate   ": {
                "!doc": "For documentation of this method, see java.sql.Statement#executeUpdate(String, int).",
                "!type": "fn(sql: string, columnIndexes: [number]) -> number"
            },
            "executeUpdate    ": {
                "!doc": "For documentation of this method, see\n java.sql.Statement#executeUpdate(String, String[]).",
                "!type": "fn(sql: string, columnNames: [string]) -> number"
            },
            "getConnection": {
                "!doc": "For documentation of this method, see java.sql.Statement#getConnection().",
                "!type": "fn() -> Jdbc.JdbcConnection"
            },
            "getFetchDirection": {
                "!doc": "For documentation of this method, see java.sql.Statement#getFetchDirection().",
                "!type": "fn() -> number"
            },
            "getFetchSize": {
                "!doc": "For documentation of this method, see java.sql.Statement#getFetchSize().",
                "!type": "fn() -> number"
            },
            "getGeneratedKeys": {
                "!doc": "For documentation of this method, see java.sql.Statement#getGeneratedKeys().",
                "!type": "fn() -> Jdbc.JdbcResultSet"
            },
            "getMaxFieldSize": {
                "!doc": "For documentation of this method, see java.sql.Statement#getMaxFieldSize().",
                "!type": "fn() -> number"
            },
            "getMaxRows": {
                "!doc": "For documentation of this method, see java.sql.Statement#getMaxRows().",
                "!type": "fn() -> number"
            },
            "getMetaData": {
                "!doc": "For documentation of this method, see java.sql.PreparedStatement#getMetaData().",
                "!type": "fn() -> Jdbc.JdbcResultSetMetaData"
            },
            "getMoreResults": {
                "!doc": "For documentation of this method, see java.sql.Statement#getMoreResults().",
                "!type": "fn() -> bool"
            },
            "getMoreResults ": {
                "!doc": "For documentation of this method, see java.sql.Statement#getMoreResults(int).",
                "!type": "fn(current: number) -> bool"
            },
            "getParameterMetaData": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#getParameterMetaData().",
                "!type": "fn() -> Jdbc.JdbcParameterMetaData"
            },
            "getQueryTimeout": {
                "!doc": "For documentation of this method, see java.sql.Statement#getQueryTimeout().",
                "!type": "fn() -> number"
            },
            "getResultSet": {
                "!doc": "For documentation of this method, see java.sql.Statement#getResultSet().",
                "!type": "fn() -> Jdbc.JdbcResultSet"
            },
            "getResultSetConcurrency": {
                "!doc": "For documentation of this method, see java.sql.Statement#getResultSetConcurrency().",
                "!type": "fn() -> number"
            },
            "getResultSetHoldability": {
                "!doc": "For documentation of this method, see java.sql.Statement#getResultSetHoldability().",
                "!type": "fn() -> number"
            },
            "getResultSetType": {
                "!doc": "For documentation of this method, see java.sql.Statement#getResultSetType().",
                "!type": "fn() -> number"
            },
            "getUpdateCount": {
                "!doc": "For documentation of this method, see java.sql.Statement#getUpdateCount().",
                "!type": "fn() -> number"
            },
            "getWarnings": {
                "!doc": "Returns the current set of warnings reported by the driver. For documentation of this method,\n see java.sql.Statement#getWarnings()",
                "!type": "fn() -> [string]"
            },
            "isClosed": {
                "!doc": "For documentation of this method, see java.sql.Statement#isClosed().",
                "!type": "fn() -> bool"
            },
            "isPoolable": {
                "!doc": "For documentation of this method, see java.sql.Statement#isPoolable().",
                "!type": "fn() -> bool"
            },
            "setArray": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setArray(int, java.sql.Array).",
                "!type": "fn(parameterIndex: number, x: Jdbc.JdbcArray)"
            },
            "setBigDecimal": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setBigDecimal(int, java.math.BigDecimal).",
                "!type": "fn(parameterIndex: number, x: BigNumber)"
            },
            "setBlob": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setBlob(int, java.sql.Blob).",
                "!type": "fn(parameterIndex: number, x: Jdbc.JdbcBlob)"
            },
            "setBoolean": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setBoolean(int, boolean).",
                "!type": "fn(parameterIndex: number, x: bool)"
            },
            "setByte": {
                "!doc": "For documentation of this method, see java.sql.PreparedStatement#setByte(int, byte).",
                "!type": "fn(parameterIndex: number, x: number)"
            },
            "setBytes": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setBytes(int, byte[]).",
                "!type": "fn(parameterIndex: number, x: [number])"
            },
            "setClob": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setClob(int, java.sql.Clob).",
                "!type": "fn(parameterIndex: number, x: Jdbc.JdbcClob)"
            },
            "setCursorName": {
                "!doc": "For documentation of this method, see java.sql.Statement#setCursorName(String).",
                "!type": "fn(name: string)"
            },
            "setDate": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setDate(int, java.sql.Date).",
                "!type": "fn(parameterIndex: number, x: Jdbc.JdbcDate)"
            },
            "setDate ": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setDate(int, java.sql.Date, java.util.Calendar).",
                "!type": "fn(parameterIndex: number, x: Jdbc.JdbcDate, timeZone: string)"
            },
            "setDouble": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setDouble(int, double).",
                "!type": "fn(parameterIndex: number, x: number)"
            },
            "setEscapeProcessing": {
                "!doc": "For documentation of this method, see java.sql.Statement#setEscapeProcessing(boolean).",
                "!type": "fn(enable: bool)"
            },
            "setFetchDirection": {
                "!doc": "For documentation of this method, see java.sql.Statement#setFetchDirection(int).",
                "!type": "fn(direction: number)"
            },
            "setFetchSize": {
                "!doc": "For documentation of this method, see java.sql.Statement#setFetchSize(int).",
                "!type": "fn(rows: number)"
            },
            "setFloat": {
                "!doc": "For documentation of this method, see java.sql.PreparedStatement#setFloat(int, float).",
                "!type": "fn(parameterIndex: number, x: number)"
            },
            "setInt": {
                "!doc": "For documentation of this method, see java.sql.PreparedStatement#setInt(int, int).",
                "!type": "fn(parameterIndex: number, x: number)"
            },
            "setLong": {
                "!doc": "For documentation of this method, see java.sql.PreparedStatement#setLong(int, long).",
                "!type": "fn(parameterIndex: number, x: number)"
            },
            "setMaxFieldSize": {
                "!doc": "For documentation of this method, see java.sql.Statement#setMaxFieldSize(int).",
                "!type": "fn(max: number)"
            },
            "setMaxRows": {
                "!doc": "For documentation of this method, see java.sql.Statement#setMaxRows(int).",
                "!type": "fn(max: number)"
            },
            "setNClob": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setNClob(int, java.sql.NClob).",
                "!type": "fn(parameterIndex: number, x: Jdbc.JdbcClob)"
            },
            "setNString": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setNString(int, String).",
                "!type": "fn(parameterIndex: number, x: string)"
            },
            "setNull": {
                "!doc": "For documentation of this method, see java.sql.PreparedStatement#setNull(int, int).",
                "!type": "fn(parameterIndex: number, sqlType: number)"
            },
            "setNull ": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setNull(int, int, String).",
                "!type": "fn(parameterIndex: number, sqlType: number, typeName: string)"
            },
            "setObject": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setObject(int, Object).",
                "!type": "fn(index: number, x: object)"
            },
            "setObject ": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setObject(int, Object, int).",
                "!type": "fn(parameterIndex: number, x: object, targetSqlType: number)"
            },
            "setObject  ": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setObject(int, Object, int, int).",
                "!type": "fn(parameterIndex: number, x: object, targetSqlType: number, scaleOrLength: number)"
            },
            "setPoolable": {
                "!doc": "For documentation of this method, see java.sql.Statement#setPoolable(boolean).",
                "!type": "fn(poolable: bool)"
            },
            "setQueryTimeout": {
                "!doc": "For documentation of this method, see java.sql.Statement#setQueryTimeout(int).",
                "!type": "fn(seconds: number)"
            },
            "setRef": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setRef(int, java.sql.Ref).",
                "!type": "fn(parameterIndex: number, x: Jdbc.JdbcRef)"
            },
            "setRowId": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setRowId(int, java.sql.RowId).",
                "!type": "fn(parameterIndex: number, x: Jdbc.JdbcRowId)"
            },
            "setSQLXML": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setSQLXML(int, java.sql.SQLXML).",
                "!type": "fn(parameterIndex: number, x: Jdbc.JdbcSQLXML)"
            },
            "setShort": {
                "!doc": "For documentation of this method, see java.sql.PreparedStatement#setShort(int, short).",
                "!type": "fn(parameterIndex: number, x: number)"
            },
            "setString": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setString(int, String).",
                "!type": "fn(parameterIndex: number, x: string)"
            },
            "setTime": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setTime(int, java.sql.Time).",
                "!type": "fn(parameterIndex: number, x: Jdbc.JdbcTime)"
            },
            "setTime ": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setTime(int, java.sql.Time, java.util.Calendar).",
                "!type": "fn(parameterIndex: number, x: Jdbc.JdbcTime, timeZone: string)"
            },
            "setTimestamp": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setTimestamp(int, java.sql.Timestamp).",
                "!type": "fn(parameterIndex: number, x: Jdbc.JdbcTimestamp)"
            },
            "setTimestamp ": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setTimestamp(int, java.sql.Timestamp, java.util.Calendar).",
                "!type": "fn(parameterIndex: number, x: Jdbc.JdbcTimestamp, timeZone: string)"
            },
            "setURL": {
                "!doc": "For documentation of this method, see\n java.sql.PreparedStatement#setURL(int, java.net.URL).",
                "!type": "fn(parameterIndex: number, x: string)"
            }
        },
        "Jdbc.JdbcRef": {
            "getBaseTypeName": {
                "!doc": "For documentation of this method, see java.sql.Ref#getBaseTypeName().",
                "!type": "fn() -> string"
            },
            "getObject": {
                "!doc": "For documentation of this method, see java.sql.Ref#getObject().",
                "!type": "fn() -> object"
            },
            "setObject": {
                "!doc": "For documentation of this method, see java.sql.Ref#setObject(Object).",
                "!type": "fn(object: object)"
            }
        },
        "Jdbc.JdbcResultSet": {
            "CLOSE_CURSORS_AT_COMMIT": {
                "!type": "number"
            },
            "CONCUR_READ_ONLY": {
                "!type": "number"
            },
            "CONCUR_UPDATABLE": {
                "!type": "number"
            },
            "FETCH_FORWARD": {
                "!type": "number"
            },
            "FETCH_REVERSE": {
                "!type": "number"
            },
            "FETCH_UNKNOWN": {
                "!type": "number"
            },
            "HOLD_CURSORS_OVER_COMMIT": {
                "!type": "number"
            },
            "TYPE_FORWARD_ONLY": {
                "!type": "number"
            },
            "TYPE_SCROLL_INSENSITIVE": {
                "!type": "number"
            },
            "TYPE_SCROLL_SENSITIVE": {
                "!type": "number"
            },
            "absolute": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#absolute(int).",
                "!type": "fn(row: number) -> bool"
            },
            "afterLast": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#afterLast().",
                "!type": "fn()"
            },
            "beforeFirst": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#beforeFirst().",
                "!type": "fn()"
            },
            "cancelRowUpdates": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#cancelRowUpdates().",
                "!type": "fn()"
            },
            "clearWarnings": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#clearWarnings().",
                "!type": "fn()"
            },
            "close": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#close().",
                "!type": "fn()"
            },
            "deleteRow": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#deleteRow().",
                "!type": "fn()"
            },
            "findColumn": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#findColumn(String).",
                "!type": "fn(columnLabel: string) -> number"
            },
            "first": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#first().",
                "!type": "fn() -> bool"
            },
            "getArray": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getArray(int).",
                "!type": "fn(columnIndex: number) -> Jdbc.JdbcArray"
            },
            "getArray ": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getArray(String).",
                "!type": "fn(columnLabel: string) -> Jdbc.JdbcArray"
            },
            "getBigDecimal": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getBigDecimal(int).",
                "!type": "fn(columnIndex: number) -> BigNumber"
            },
            "getBigDecimal ": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getBigDecimal(String).",
                "!type": "fn(columnLabel: string) -> BigNumber"
            },
            "getBlob": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getBlob(int).",
                "!type": "fn(columnIndex: number) -> Jdbc.JdbcBlob"
            },
            "getBlob ": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getBlob(String).",
                "!type": "fn(columnLabel: string) -> Jdbc.JdbcBlob"
            },
            "getBoolean": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getBoolean(int).",
                "!type": "fn(columnIndex: number) -> bool"
            },
            "getBoolean ": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getBoolean(String).",
                "!type": "fn(columnLabel: string) -> bool"
            },
            "getByte": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getByte(int).",
                "!type": "fn(columnIndex: number) -> number"
            },
            "getByte ": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getByte(String).",
                "!type": "fn(columnLabel: string) -> number"
            },
            "getBytes": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getBytes(int).",
                "!type": "fn(columnIndex: number) -> [number]"
            },
            "getBytes ": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getBytes(String).",
                "!type": "fn(columnLabel: string) -> [number]"
            },
            "getClob": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getClob(int).",
                "!type": "fn(columnIndex: number) -> Jdbc.JdbcClob"
            },
            "getClob ": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getClob(String).",
                "!type": "fn(columnLabel: string) -> Jdbc.JdbcClob"
            },
            "getConcurrency": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getConcurrency().",
                "!type": "fn() -> number"
            },
            "getCursorName": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getCursorName().",
                "!type": "fn() -> string"
            },
            "getDate": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getDate(int).",
                "!type": "fn(columnIndex: number) -> Jdbc.JdbcDate"
            },
            "getDate ": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSet#getDate(int, java.util.Calendar).",
                "!type": "fn(columnIndex: number, timeZone: string) -> Jdbc.JdbcDate"
            },
            "getDate  ": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getDate(String).",
                "!type": "fn(columnLabel: string) -> Jdbc.JdbcDate"
            },
            "getDate   ": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSet#getDate(String, java.util.Calendar).",
                "!type": "fn(columnLabel: string, timeZone: string) -> Jdbc.JdbcDate"
            },
            "getDouble": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getDouble(int).",
                "!type": "fn(columnIndex: number) -> number"
            },
            "getDouble ": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getDouble(String).",
                "!type": "fn(columnLabel: string) -> number"
            },
            "getFetchDirection": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getFetchDirection().",
                "!type": "fn() -> number"
            },
            "getFetchSize": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getFetchSize().",
                "!type": "fn() -> number"
            },
            "getFloat": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getFloat(int).",
                "!type": "fn(columnIndex: number) -> number"
            },
            "getFloat ": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getFloat(String).",
                "!type": "fn(columnLabel: string) -> number"
            },
            "getHoldability": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getHoldability().",
                "!type": "fn() -> number"
            },
            "getInt": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getInt(int).",
                "!type": "fn(columnIndex: number) -> number"
            },
            "getInt ": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getInt(String).",
                "!type": "fn(columnLabel: string) -> number"
            },
            "getLong": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getLong(int).",
                "!type": "fn(columnIndex: number) -> number"
            },
            "getLong ": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getLong(String).",
                "!type": "fn(columnLabel: string) -> number"
            },
            "getMetaData": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getMetaData().",
                "!type": "fn() -> Jdbc.JdbcResultSetMetaData"
            },
            "getNClob": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getNClob(int).",
                "!type": "fn(columnIndex: number) -> Jdbc.JdbcClob"
            },
            "getNClob ": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getNClob(String).",
                "!type": "fn(columnLabel: string) -> Jdbc.JdbcClob"
            },
            "getNString": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getNString(int).",
                "!type": "fn(columnIndex: number) -> string"
            },
            "getNString ": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getNString(String).",
                "!type": "fn(columnLabel: string) -> string"
            },
            "getObject": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getObject(int).",
                "!type": "fn(columnIndex: number) -> object"
            },
            "getObject ": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getObject(String).",
                "!type": "fn(columnLabel: string) -> object"
            },
            "getRef": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getRef(int).",
                "!type": "fn(columnIndex: number) -> Jdbc.JdbcRef"
            },
            "getRef ": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getRef(String).",
                "!type": "fn(columnLabel: string) -> Jdbc.JdbcRef"
            },
            "getRow": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getRow().",
                "!type": "fn() -> number"
            },
            "getRowId": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getRowId(int).",
                "!type": "fn(columnIndex: number) -> Jdbc.JdbcRowId"
            },
            "getRowId ": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getRowId(String).",
                "!type": "fn(columnLabel: string) -> Jdbc.JdbcRowId"
            },
            "getSQLXML": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getSQLXML(int).",
                "!type": "fn(columnIndex: number) -> Jdbc.JdbcSQLXML"
            },
            "getSQLXML ": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getSQLXML(String).",
                "!type": "fn(columnLabel: string) -> Jdbc.JdbcSQLXML"
            },
            "getShort": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getShort(int).",
                "!type": "fn(columnIndex: number) -> number"
            },
            "getShort ": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getShort(String).",
                "!type": "fn(columnLabel: string) -> number"
            },
            "getStatement": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getStatement().",
                "!type": "fn() -> Jdbc.JdbcStatement"
            },
            "getString": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getString(int).",
                "!type": "fn(columnIndex: number) -> string"
            },
            "getString ": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getString(String).",
                "!type": "fn(columnLabel: string) -> string"
            },
            "getTime": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getTime(int).",
                "!type": "fn(columnIndex: number) -> Jdbc.JdbcTime"
            },
            "getTime ": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSet#getTime(int, java.util.Calendar).",
                "!type": "fn(columnIndex: number, timeZone: string) -> Jdbc.JdbcTime"
            },
            "getTime  ": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getTime(String).",
                "!type": "fn(columnLabel: string) -> Jdbc.JdbcTime"
            },
            "getTime   ": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSet#getTime(String, java.util.Calendar).",
                "!type": "fn(columnLabel: string, timeZone: string) -> Jdbc.JdbcTime"
            },
            "getTimestamp": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getTimestamp(int).",
                "!type": "fn(columnIndex: number) -> Jdbc.JdbcTimestamp"
            },
            "getTimestamp ": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSet#getTimestamp(int, java.util.Calendar).",
                "!type": "fn(columnIndex: number, timeZone: string) -> Jdbc.JdbcTimestamp"
            },
            "getTimestamp  ": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getTimestamp(String).",
                "!type": "fn(columnLabel: string) -> Jdbc.JdbcTimestamp"
            },
            "getTimestamp   ": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSet#getTimestamp(String, java.util.Calendar).",
                "!type": "fn(columnLabel: string, timeZone: string) -> Jdbc.JdbcTimestamp"
            },
            "getType": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getType().",
                "!type": "fn() -> number"
            },
            "getURL": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getURL(int).",
                "!type": "fn(columnIndex: number) -> string"
            },
            "getURL ": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#getURL(String).",
                "!type": "fn(columnLabel: string) -> string"
            },
            "getWarnings": {
                "!doc": "Returns the current set of warnings reported by the driver.",
                "!type": "fn() -> [string]"
            },
            "insertRow": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#insertRow().",
                "!type": "fn()"
            },
            "isAfterLast": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#isAfterLast().",
                "!type": "fn() -> bool"
            },
            "isBeforeFirst": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#isBeforeFirst().",
                "!type": "fn() -> bool"
            },
            "isClosed": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#isClosed().",
                "!type": "fn() -> bool"
            },
            "isFirst": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#isFirst().",
                "!type": "fn() -> bool"
            },
            "isLast": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#isLast().",
                "!type": "fn() -> bool"
            },
            "last": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#last().",
                "!type": "fn() -> bool"
            },
            "moveToCurrentRow": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#moveToCurrentRow().",
                "!type": "fn()"
            },
            "moveToInsertRow": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#moveToInsertRow().",
                "!type": "fn()"
            },
            "next": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#next().",
                "!type": "fn() -> bool"
            },
            "previous": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#previous().",
                "!type": "fn() -> bool"
            },
            "refreshRow": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#refreshRow().",
                "!type": "fn()"
            },
            "relative": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#relative(int).",
                "!type": "fn(rows: number) -> bool"
            },
            "rowDeleted": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#rowDeleted().",
                "!type": "fn() -> bool"
            },
            "rowInserted": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#rowInserted().",
                "!type": "fn() -> bool"
            },
            "rowUpdated": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#rowUpdated().",
                "!type": "fn() -> bool"
            },
            "setFetchDirection": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#setFetchDirection(int).",
                "!type": "fn(direction: number)"
            },
            "setFetchSize": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#setFetchSize(int).",
                "!type": "fn(rows: number)"
            },
            "updateArray": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSet#updateArray(int, java.sql.Array).",
                "!type": "fn(columnIndex: number, x: Jdbc.JdbcArray)"
            },
            "updateArray ": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSet#updateArray(String, java.sql.Array).",
                "!type": "fn(columnLabel: string, x: Jdbc.JdbcArray)"
            },
            "updateBigDecimal": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSet#updateBigDecimal(int, java.math.BigDecimal).",
                "!type": "fn(columnIndex: number, x: BigNumber)"
            },
            "updateBigDecimal ": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSet#updateBigDecimal(String, java.math.BigDecimal).",
                "!type": "fn(columnLabel: string, x: BigNumber)"
            },
            "updateBlob": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSet#updateBlob(int, java.sql.Blob).",
                "!type": "fn(columnIndex: number, x: Jdbc.JdbcBlob)"
            },
            "updateBlob ": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSet#updateBlob(String, java.sql.Blob).",
                "!type": "fn(columnLabel: string, x: Jdbc.JdbcBlob)"
            },
            "updateBoolean": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#updateBoolean(int, boolean).",
                "!type": "fn(columnIndex: number, x: bool)"
            },
            "updateBoolean ": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSet#updateBoolean(String, boolean).",
                "!type": "fn(columnLabel: string, x: bool)"
            },
            "updateByte": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#updateByte(int, byte).",
                "!type": "fn(columnIndex: number, x: number)"
            },
            "updateByte ": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#updateByte(String, byte).",
                "!type": "fn(columnLabel: string, x: number)"
            },
            "updateBytes": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#updateBytes(int, byte[]).",
                "!type": "fn(columnIndex: number, x: [number])"
            },
            "updateBytes ": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#updateBytes(String, byte[]).",
                "!type": "fn(columnLabel: string, x: [number])"
            },
            "updateClob": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSet#updateClob(int, java.sql.Clob).",
                "!type": "fn(columnIndex: number, x: Jdbc.JdbcClob)"
            },
            "updateClob ": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSet#updateClob(String, java.sql.Clob).",
                "!type": "fn(columnLabel: string, x: Jdbc.JdbcClob)"
            },
            "updateDate": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSet#updateDate(int, java.sql.Date).",
                "!type": "fn(columnIndex: number, x: Jdbc.JdbcDate)"
            },
            "updateDate ": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSet#updateDate(String, java.sql.Date).",
                "!type": "fn(columnLabel: string, x: Jdbc.JdbcDate)"
            },
            "updateDouble": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#updateDouble(int, double).",
                "!type": "fn(columnIndex: number, x: number)"
            },
            "updateDouble ": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#updateDouble(String, double).",
                "!type": "fn(columnLabel: string, x: number)"
            },
            "updateFloat": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#updateFloat(int, float).",
                "!type": "fn(columnIndex: number, x: number)"
            },
            "updateFloat ": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#updateFloat(String, float).",
                "!type": "fn(columnLabel: string, x: number)"
            },
            "updateInt": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#updateInt(int, int).",
                "!type": "fn(columnIndex: number, x: number)"
            },
            "updateInt ": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#updateInt(String, int).",
                "!type": "fn(columnLabel: string, x: number)"
            },
            "updateLong": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#updateLong(int, long).",
                "!type": "fn(columnIndex: number, x: number)"
            },
            "updateLong ": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#updateLong(String, long).",
                "!type": "fn(columnLabel: string, x: number)"
            },
            "updateNClob": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSet#updateNClob(int, java.sql.NClob).",
                "!type": "fn(columnIndex: number, x: Jdbc.JdbcClob)"
            },
            "updateNClob ": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSet#updateNClob(String, java.sql.NClob).",
                "!type": "fn(columnLabel: string, x: Jdbc.JdbcClob)"
            },
            "updateNString": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#updateNString(int, String).",
                "!type": "fn(columnIndex: number, x: string)"
            },
            "updateNString ": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSet#updateNString(String, String).",
                "!type": "fn(columnLabel: string, x: string)"
            },
            "updateNull": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#updateNull(int).",
                "!type": "fn(columnIndex: number)"
            },
            "updateNull ": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#updateNull(String).",
                "!type": "fn(columnLabel: string)"
            },
            "updateObject": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#updateObject(int, Object).",
                "!type": "fn(columnIndex: number, x: object)"
            },
            "updateObject ": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSet#updateObject(int, Object, int).",
                "!type": "fn(columnIndex: number, x: object, scaleOrLength: number)"
            },
            "updateObject  ": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSet#updateObject(String, Object).",
                "!type": "fn(columnLabel: string, x: object)"
            },
            "updateObject   ": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSet#updateObject(String, Object, int).",
                "!type": "fn(columnLabel: string, x: object, scaleOrLength: number)"
            },
            "updateRef": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#updateRef(int, java.sql.Ref).",
                "!type": "fn(columnIndex: number, x: Jdbc.JdbcRef)"
            },
            "updateRef ": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSet#updateRef(String, java.sql.Ref).",
                "!type": "fn(columnLabel: string, x: Jdbc.JdbcRef)"
            },
            "updateRow": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#updateRow().",
                "!type": "fn()"
            },
            "updateRowId": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSet#updateRowId(int, java.sql.RowId).",
                "!type": "fn(columnIndex: number, x: Jdbc.JdbcRowId)"
            },
            "updateRowId ": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSet#updateRowId(String, java.sql.RowId).",
                "!type": "fn(columnLabel: string, x: Jdbc.JdbcRowId)"
            },
            "updateSQLXML": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSet#updateSQLXML(int, java.sql.SQLXML).",
                "!type": "fn(columnIndex: number, x: Jdbc.JdbcSQLXML)"
            },
            "updateSQLXML ": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSet#updateSQLXML(String, java.sql.SQLXML).",
                "!type": "fn(columnLabel: string, x: Jdbc.JdbcSQLXML)"
            },
            "updateShort": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#updateShort(int, short).",
                "!type": "fn(columnIndex: number, x: number)"
            },
            "updateShort ": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#updateShort(String, short).",
                "!type": "fn(columnLabel: string, x: number)"
            },
            "updateString": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#updateString(int, String).",
                "!type": "fn(columnIndex: number, x: string)"
            },
            "updateString ": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#updateString(String, String).",
                "!type": "fn(columnLabel: string, x: string)"
            },
            "updateTime": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSet#updateTime(int, java.sql.Time).",
                "!type": "fn(columnIndex: number, x: Jdbc.JdbcTime)"
            },
            "updateTime ": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSet#updateTime(String, java.sql.Time).",
                "!type": "fn(columnLabel: string, x: Jdbc.JdbcTime)"
            },
            "updateTimestamp": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSet#updateTimestamp(int, java.sql.Timestamp).",
                "!type": "fn(columnIndex: number, x: Jdbc.JdbcTimestamp)"
            },
            "updateTimestamp ": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSet#updateTimestamp(String, java.sql.Timestamp).",
                "!type": "fn(columnLabel: string, x: Jdbc.JdbcTimestamp)"
            },
            "wasNull": {
                "!doc": "For documentation of this method, see java.sql.ResultSet#wasNull().",
                "!type": "fn() -> bool"
            }
        },
        "Jdbc.JdbcResultSetMetaData": {
            "columnNoNulls": {
                "!type": "number"
            },
            "columnNullable": {
                "!type": "number"
            },
            "columnNullableUnknown": {
                "!type": "number"
            },
            "getCatalogName": {
                "!doc": "For documentation of this method, see java.sql.ResultSetMetaData#getCatalogName(int).",
                "!type": "fn(column: number) -> string"
            },
            "getColumnClassName": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSetMetaData#getColumnClassName(int).",
                "!type": "fn(column: number) -> string"
            },
            "getColumnCount": {
                "!doc": "For documentation of this method, see java.sql.ResultSetMetaData#getColumnCount().",
                "!type": "fn() -> number"
            },
            "getColumnDisplaySize": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSetMetaData#getColumnDisplaySize(int).",
                "!type": "fn(column: number) -> number"
            },
            "getColumnLabel": {
                "!doc": "For documentation of this method, see java.sql.ResultSetMetaData#getColumnLabel(int).",
                "!type": "fn(column: number) -> string"
            },
            "getColumnName": {
                "!doc": "For documentation of this method, see java.sql.ResultSetMetaData#getColumnName(int).",
                "!type": "fn(column: number) -> string"
            },
            "getColumnType": {
                "!doc": "For documentation of this method, see java.sql.ResultSetMetaData#getColumnType(int).",
                "!type": "fn(column: number) -> number"
            },
            "getColumnTypeName": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSetMetaData#getColumnTypeName(int).",
                "!type": "fn(column: number) -> string"
            },
            "getPrecision": {
                "!doc": "For documentation of this method, see java.sql.ResultSetMetaData#getPrecision(int).",
                "!type": "fn(column: number) -> number"
            },
            "getScale": {
                "!doc": "For documentation of this method, see java.sql.ResultSetMetaData#getScale(int).",
                "!type": "fn(column: number) -> number"
            },
            "getSchemaName": {
                "!doc": "For documentation of this method, see java.sql.ResultSetMetaData#getSchemaName(int).",
                "!type": "fn(column: number) -> string"
            },
            "getTableName": {
                "!doc": "For documentation of this method, see java.sql.ResultSetMetaData#getTableName(int).",
                "!type": "fn(column: number) -> string"
            },
            "isAutoIncrement": {
                "!doc": "For documentation of this method, see java.sql.ResultSetMetaData#isAutoIncrement(int).",
                "!type": "fn(column: number) -> bool"
            },
            "isCaseSensitive": {
                "!doc": "For documentation of this method, see java.sql.ResultSetMetaData#isCaseSensitive(int).",
                "!type": "fn(column: number) -> bool"
            },
            "isCurrency": {
                "!doc": "For documentation of this method, see java.sql.ResultSetMetaData#isCurrency(int).",
                "!type": "fn(column: number) -> bool"
            },
            "isDefinitelyWritable": {
                "!doc": "For documentation of this method, see\n java.sql.ResultSetMetaData#isDefinitelyWritable(int).",
                "!type": "fn(column: number) -> bool"
            },
            "isNullable": {
                "!doc": "For documentation of this method, see java.sql.ResultSetMetaData#isNullable(int).",
                "!type": "fn(column: number) -> number"
            },
            "isReadOnly": {
                "!doc": "For documentation of this method, see java.sql.ResultSetMetaData#isReadOnly(int).",
                "!type": "fn(column: number) -> bool"
            },
            "isSearchable": {
                "!doc": "For documentation of this method, see java.sql.ResultSetMetaData#isSearchable(int).",
                "!type": "fn(column: number) -> bool"
            },
            "isSigned": {
                "!doc": "For documentation of this method, see java.sql.ResultSetMetaData#isSigned(int).",
                "!type": "fn(column: number) -> bool"
            },
            "isWritable": {
                "!doc": "For documentation of this method, see java.sql.ResultSetMetaData#isWritable(int).",
                "!type": "fn(column: number) -> bool"
            }
        },
        "Jdbc.JdbcRowId": {
            "getBytes": {
                "!doc": "For documentation of this method, see java.sql.RowId#getBytes().",
                "!type": "fn() -> [number]"
            }
        },
        "Jdbc.JdbcRowIdLifetime": {
            "ROWID_UNSUPPORTED": {
                "!type": "number"
            },
            "ROWID_VALID_FOREVER": {
                "!type": "number"
            },
            "ROWID_VALID_OTHER": {
                "!type": "number"
            },
            "ROWID_VALID_SESSION": {
                "!type": "number"
            },
            "ROWID_VALID_TRANSACTION": {
                "!type": "number"
            }
        },
        "Jdbc.JdbcSQLXML": {
            "free": {
                "!doc": "For documentation of this method, see java.sql.SQLXML#free().",
                "!type": "fn()"
            },
            "getString": {
                "!doc": "For documentation of this method, see java.sql.SQLXML#getString().",
                "!type": "fn() -> string"
            },
            "setString": {
                "!doc": "For documentation of this method, see java.sql.SQLXML#setString(String).",
                "!type": "fn(value: string)"
            }
        },
        "Jdbc.JdbcSavepoint": {
            "getSavepointId": {
                "!doc": "For documentation of this method, see java.sql.Savepoint#getSavepointId().",
                "!type": "fn() -> number"
            },
            "getSavepointName": {
                "!doc": "For documentation of this method, see java.sql.Savepoint#getSavepointName().",
                "!type": "fn() -> string"
            }
        },
        "Jdbc.JdbcStatement": {
            "addBatch": {
                "!doc": "For documentation of this method, see java.sql.Statement#addBatch(String).",
                "!type": "fn(sql: string)"
            },
            "cancel": {
                "!doc": "For documentation of this method, see java.sql.Statement#cancel().",
                "!type": "fn()"
            },
            "clearBatch": {
                "!doc": "For documentation of this method, see java.sql.Statement#clearBatch().",
                "!type": "fn()"
            },
            "clearWarnings": {
                "!doc": "For documentation of this method, see java.sql.Statement#clearWarnings().",
                "!type": "fn()"
            },
            "close": {
                "!doc": "For documentation of this method, see java.sql.Statement#close().",
                "!type": "fn()"
            },
            "execute": {
                "!doc": "For documentation of this method, see java.sql.Statement#execute(String).",
                "!type": "fn(sql: string) -> bool"
            },
            "execute ": {
                "!doc": "For documentation of this method, see java.sql.Statement#execute(String, int).",
                "!type": "fn(sql: string, autoGeneratedKeys: number) -> bool"
            },
            "execute  ": {
                "!doc": "For documentation of this method, see java.sql.Statement#execute(String, int[]).",
                "!type": "fn(sql: string, columnIndexes: [number]) -> bool"
            },
            "execute   ": {
                "!doc": "For documentation of this method, see java.sql.Statement#execute(String, String[]).",
                "!type": "fn(sql: string, columnNames: [string]) -> bool"
            },
            "executeBatch": {
                "!doc": "For documentation of this method, see java.sql.Statement#executeBatch().",
                "!type": "fn() -> [number]"
            },
            "executeQuery": {
                "!doc": "For documentation of this method, see java.sql.Statement#executeQuery(String).",
                "!type": "fn(sql: string) -> Jdbc.JdbcResultSet"
            },
            "executeUpdate": {
                "!doc": "For documentation of this method, see java.sql.Statement#executeUpdate(String).",
                "!type": "fn(sql: string) -> number"
            },
            "executeUpdate ": {
                "!doc": "For documentation of this method, see java.sql.Statement#executeUpdate(String, int).",
                "!type": "fn(sql: string, autoGeneratedKeys: number) -> number"
            },
            "executeUpdate  ": {
                "!doc": "For documentation of this method, see java.sql.Statement#executeUpdate(String, int).",
                "!type": "fn(sql: string, columnIndexes: [number]) -> number"
            },
            "executeUpdate   ": {
                "!doc": "For documentation of this method, see\n java.sql.Statement#executeUpdate(String, String[]).",
                "!type": "fn(sql: string, columnNames: [string]) -> number"
            },
            "getConnection": {
                "!doc": "For documentation of this method, see java.sql.Statement#getConnection().",
                "!type": "fn() -> Jdbc.JdbcConnection"
            },
            "getFetchDirection": {
                "!doc": "For documentation of this method, see java.sql.Statement#getFetchDirection().",
                "!type": "fn() -> number"
            },
            "getFetchSize": {
                "!doc": "For documentation of this method, see java.sql.Statement#getFetchSize().",
                "!type": "fn() -> number"
            },
            "getGeneratedKeys": {
                "!doc": "For documentation of this method, see java.sql.Statement#getGeneratedKeys().",
                "!type": "fn() -> Jdbc.JdbcResultSet"
            },
            "getMaxFieldSize": {
                "!doc": "For documentation of this method, see java.sql.Statement#getMaxFieldSize().",
                "!type": "fn() -> number"
            },
            "getMaxRows": {
                "!doc": "For documentation of this method, see java.sql.Statement#getMaxRows().",
                "!type": "fn() -> number"
            },
            "getMoreResults": {
                "!doc": "For documentation of this method, see java.sql.Statement#getMoreResults().",
                "!type": "fn() -> bool"
            },
            "getMoreResults ": {
                "!doc": "For documentation of this method, see java.sql.Statement#getMoreResults(int).",
                "!type": "fn(current: number) -> bool"
            },
            "getQueryTimeout": {
                "!doc": "For documentation of this method, see java.sql.Statement#getQueryTimeout().",
                "!type": "fn() -> number"
            },
            "getResultSet": {
                "!doc": "For documentation of this method, see java.sql.Statement#getResultSet().",
                "!type": "fn() -> Jdbc.JdbcResultSet"
            },
            "getResultSetConcurrency": {
                "!doc": "For documentation of this method, see java.sql.Statement#getResultSetConcurrency().",
                "!type": "fn() -> number"
            },
            "getResultSetHoldability": {
                "!doc": "For documentation of this method, see java.sql.Statement#getResultSetHoldability().",
                "!type": "fn() -> number"
            },
            "getResultSetType": {
                "!doc": "For documentation of this method, see java.sql.Statement#getResultSetType().",
                "!type": "fn() -> number"
            },
            "getUpdateCount": {
                "!doc": "For documentation of this method, see java.sql.Statement#getUpdateCount().",
                "!type": "fn() -> number"
            },
            "getWarnings": {
                "!doc": "Returns the current set of warnings reported by the driver. For documentation of this method,\n see java.sql.Statement#getWarnings()",
                "!type": "fn() -> [string]"
            },
            "isClosed": {
                "!doc": "For documentation of this method, see java.sql.Statement#isClosed().",
                "!type": "fn() -> bool"
            },
            "isPoolable": {
                "!doc": "For documentation of this method, see java.sql.Statement#isPoolable().",
                "!type": "fn() -> bool"
            },
            "setCursorName": {
                "!doc": "For documentation of this method, see java.sql.Statement#setCursorName(String).",
                "!type": "fn(name: string)"
            },
            "setEscapeProcessing": {
                "!doc": "For documentation of this method, see java.sql.Statement#setEscapeProcessing(boolean).",
                "!type": "fn(enable: bool)"
            },
            "setFetchDirection": {
                "!doc": "For documentation of this method, see java.sql.Statement#setFetchDirection(int).",
                "!type": "fn(direction: number)"
            },
            "setFetchSize": {
                "!doc": "For documentation of this method, see java.sql.Statement#setFetchSize(int).",
                "!type": "fn(rows: number)"
            },
            "setMaxFieldSize": {
                "!doc": "For documentation of this method, see java.sql.Statement#setMaxFieldSize(int).",
                "!type": "fn(max: number)"
            },
            "setMaxRows": {
                "!doc": "For documentation of this method, see java.sql.Statement#setMaxRows(int).",
                "!type": "fn(max: number)"
            },
            "setPoolable": {
                "!doc": "For documentation of this method, see java.sql.Statement#setPoolable(boolean).",
                "!type": "fn(poolable: bool)"
            },
            "setQueryTimeout": {
                "!doc": "For documentation of this method, see java.sql.Statement#setQueryTimeout(int).",
                "!type": "fn(seconds: number)"
            }
        },
        "Jdbc.JdbcStatment": {
            "CLOSE_ALL_RESULTS": {
                "!type": "number"
            },
            "CLOSE_CURRENT_RESULT": {
                "!type": "number"
            },
            "EXECUTE_FAILED": {
                "!type": "number"
            },
            "KEEP_CURRENT_RESULT": {
                "!type": "number"
            },
            "NO_GENERATED_KEYS": {
                "!type": "number"
            },
            "RETURN_GENERATED_KEYS": {
                "!type": "number"
            },
            "SUCCESS_NO_INFO": {
                "!type": "number"
            }
        },
        "Jdbc.JdbcStruct": {
            "getAttributes": {
                "!doc": "For documentation of this method, see java.sql.Struct#getAttributes().",
                "!type": "fn() -> [object]"
            },
            "getSQLTypeName": {
                "!doc": "For documentation of this method, see java.sql.Struct#getSQLTypeName().",
                "!type": "fn() -> string"
            }
        },
        "Jdbc.JdbcTime": {
            "after": {
                "!doc": "For documentation of this method, see java.sql.Time#after(java.util.Date).",
                "!type": "fn(when: Jdbc.JdbcTime) -> bool"
            },
            "before": {
                "!doc": "For documentation of this method, see java.sql.Time#before(java.util.Date).",
                "!type": "fn(when: Jdbc.JdbcTime) -> bool"
            },
            "getHours": {
                "!doc": "For documentation of this method, see java.sql.Time#getHours().",
                "!type": "fn() -> number"
            },
            "getMinutes": {
                "!doc": "For documentation of this method, see java.sql.Time#getMinutes().",
                "!type": "fn() -> number"
            },
            "getSeconds": {
                "!doc": "For documentation of this method, see java.sql.Time#getSeconds().",
                "!type": "fn() -> number"
            },
            "getTime": {
                "!doc": "For documentation of this method, see java.sql.Time#getTime().",
                "!type": "fn() -> number"
            },
            "setHours": {
                "!doc": "For documentation of this method, see java.sql.Time#setHours(int).",
                "!type": "fn(hours: number)"
            },
            "setMinutes": {
                "!doc": "For documentation of this method, see java.sql.Time#setMinutes(int).",
                "!type": "fn(minutes: number)"
            },
            "setSeconds": {
                "!doc": "For documentation of this method, see java.sql.Time#setSeconds(int).",
                "!type": "fn(seconds: number)"
            },
            "setTime": {
                "!doc": "For documentation of this method, see java.sql.Time#setTime(long).",
                "!type": "fn(milliseconds: number)"
            }
        },
        "Jdbc.JdbcTimestamp": {
            "after": {
                "!doc": "For documentation of this method, see java.sql.Timestamp#after(java.sql.Timestamp).",
                "!type": "fn(when: Jdbc.JdbcTimestamp) -> bool"
            },
            "before": {
                "!doc": "For documentation of this method, see java.sql.Timestamp#before(java.sql.Timestamp).",
                "!type": "fn(when: Jdbc.JdbcTimestamp) -> bool"
            },
            "getDate": {
                "!doc": "For documentation of this method, see java.sql.Timestamp#getDate().",
                "!type": "fn() -> number"
            },
            "getHours": {
                "!doc": "For documentation of this method, see java.sql.Timestamp#getHours().",
                "!type": "fn() -> number"
            },
            "getMinutes": {
                "!doc": "For documentation of this method, see java.sql.Timestamp#getMinutes().",
                "!type": "fn() -> number"
            },
            "getMonth": {
                "!doc": "For documentation of this method, see java.sql.Timestamp#getMonth().",
                "!type": "fn() -> number"
            },
            "getNanos": {
                "!doc": "For documentation of this method, see java.sql.Timestamp#getNanos().",
                "!type": "fn() -> number"
            },
            "getSeconds": {
                "!doc": "For documentation of this method, see java.sql.Timestamp#getSeconds().",
                "!type": "fn() -> number"
            },
            "getTime": {
                "!doc": "For documentation of this method, see java.sql.Timestamp#getTime().",
                "!type": "fn() -> number"
            },
            "getYear": {
                "!doc": "For documentation of this method, see java.sql.Timestamp#getYear().",
                "!type": "fn() -> number"
            },
            "setDate": {
                "!doc": "For documentation of this method, see java.sql.Timestamp#setDate(int).",
                "!type": "fn(date: number)"
            },
            "setHours": {
                "!doc": "For documentation of this method, see java.sql.Timestamp#setHours(int).",
                "!type": "fn(hours: number)"
            },
            "setMinutes": {
                "!doc": "For documentation of this method, see java.sql.Timestamp#setMinutes(int).",
                "!type": "fn(minutes: number)"
            },
            "setMonth": {
                "!doc": "For documentation of this method, see java.sql.Timestamp#setMonth(int).",
                "!type": "fn(month: number)"
            },
            "setNanos": {
                "!doc": "For documentation of this method, see java.sql.Timestamp#setNanos(int).",
                "!type": "fn(nanoseconds: number)"
            },
            "setSeconds": {
                "!doc": "For documentation of this method, see java.sql.Timestamp#setSeconds(int).",
                "!type": "fn(seconds: number)"
            },
            "setTime": {
                "!doc": "For documentation of this method, see java.sql.Timestamp#setTime(long).",
                "!type": "fn(milliseconds: number)"
            },
            "setYear": {
                "!doc": "For documentation of this method, see java.sql.Timestamp#setYear(int).",
                "!type": "fn(year: number)"
            }
        },
        "Jdbc.JdbcTypes": {
            "ARRAY": {
                "!type": "number"
            },
            "BIGINT": {
                "!type": "number"
            },
            "BINARY": {
                "!type": "number"
            },
            "BIT": {
                "!type": "number"
            },
            "BLOB": {
                "!type": "number"
            },
            "BOOLEAN": {
                "!type": "number"
            },
            "CHAR": {
                "!type": "number"
            },
            "CLOB": {
                "!type": "number"
            },
            "DATALINK": {
                "!type": "number"
            },
            "DATE": {
                "!type": "number"
            },
            "DECIMAL": {
                "!type": "number"
            },
            "DISTINCT": {
                "!type": "number"
            },
            "DOUBLE": {
                "!type": "number"
            },
            "FLOAT": {
                "!type": "number"
            },
            "INTEGER": {
                "!type": "number"
            },
            "JAVA_OBJECT": {
                "!type": "number"
            },
            "LONGNVARCHAR": {
                "!type": "number"
            },
            "LONGVARBINARY": {
                "!type": "number"
            },
            "LONGVARCHAR": {
                "!type": "number"
            },
            "NCHAR": {
                "!type": "number"
            },
            "NCLOB": {
                "!type": "number"
            },
            "NULL": {
                "!type": "number"
            },
            "NUMERIC": {
                "!type": "number"
            },
            "NVARCHAR": {
                "!type": "number"
            },
            "OTHER": {
                "!type": "number"
            },
            "REAL": {
                "!type": "number"
            },
            "REF": {
                "!type": "number"
            },
            "ROWID": {
                "!type": "number"
            },
            "SMALLINT": {
                "!type": "number"
            },
            "SQLXML": {
                "!type": "number"
            },
            "STRUCT": {
                "!type": "number"
            },
            "TIME": {
                "!type": "number"
            },
            "TIMESTAMP": {
                "!type": "number"
            },
            "TINYINT": {
                "!type": "number"
            },
            "VARBINARY": {
                "!type": "number"
            },
            "VARCHAR": {
                "!type": "number"
            }
        },
        "MccApp.AccountLabel": {
            "accounts": {
                "!type": "fn() -> MccApp.ManagedAccountSelector"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getId": {
                "!type": "fn() -> string"
            },
            "getName": {
                "!type": "fn() -> string"
            },
            "remove": {
                "!type": "fn()"
            },
            "setName": {
                "!type": "fn(name: string)"
            }
        },
        "MccApp.AccountLabelIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> MccApp.AccountLabel"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "MccApp.AccountLabelSelector": {
            "get": {
                "!type": "fn() -> MccApp.AccountLabelIterator"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> MccApp.AccountLabelSelector"
            },
            "withIds": {
                "!type": "fn(ids: [number]) -> MccApp.AccountLabelSelector"
            }
        },
        "MccApp.ExecutionResult": {
            "getCustomerId": {
                "!type": "fn() -> string"
            },
            "getError": {
                "!type": "fn() -> string"
            },
            "getReturnValue": {
                "!type": "fn() -> string"
            },
            "getStatus": {
                "!type": "fn() -> string"
            }
        },
        "MccApp.ManagedAccount": {
            "applyLabel": {
                "!type": "fn(name: string)"
            },
            "getCurrencyCode": {
                "!type": "fn() -> string"
            },
            "getCustomerId": {
                "!type": "fn() -> string"
            },
            "getEntityType": {
                "!type": "fn() -> string"
            },
            "getName": {
                "!type": "fn() -> string"
            },
            "getStatsFor": {
                "!type": "fn(dateFrom: object, dateTo: object) -> MccApp.ManagedAccountStats"
            },
            "getStatsFor ": {
                "!type": "fn(dateRange: string) -> MccApp.ManagedAccountStats"
            },
            "getTimeZone": {
                "!type": "fn() -> string"
            },
            "labels": {
                "!type": "fn() -> MccApp.AccountLabelSelector"
            },
            "removeLabel": {
                "!type": "fn(name: string)"
            }
        },
        "MccApp.ManagedAccountIterator": {
            "hasNext": {
                "!type": "fn() -> bool"
            },
            "next": {
                "!type": "fn() -> MccApp.ManagedAccount"
            },
            "totalNumEntities": {
                "!type": "fn() -> number"
            }
        },
        "MccApp.ManagedAccountSelector": {
            "executeInParallel": {
                "!type": "fn(functionName: string, optionalCallbackFunctionName: string)"
            },
            "executeInParallel ": {
                "!type": "fn(functionName: string, optionalCallbackFunctionName: string, optionalInput: string)"
            },
            "forDateRange": {
                "!type": "fn(dateFrom: object, dateTo: object) -> MccApp.ManagedAccountSelector"
            },
            "forDateRange ": {
                "!type": "fn(dateRange: string) -> MccApp.ManagedAccountSelector"
            },
            "get": {
                "!type": "fn() -> MccApp.ManagedAccountIterator"
            },
            "orderBy": {
                "!type": "fn(orderBy: string) -> MccApp.ManagedAccountSelector"
            },
            "withCondition": {
                "!type": "fn(condition: string) -> MccApp.ManagedAccountSelector"
            },
            "withIds": {
                "!type": "fn(ids: [number]) -> MccApp.ManagedAccountSelector"
            },
            "withLimit": {
                "!type": "fn(limit: number) -> MccApp.ManagedAccountSelector"
            }
        },
        "MccApp.ManagedAccountStats": {
            "getClickConversionRate": {
                "!type": "fn() -> number"
            },
            "getClicks": {
                "!type": "fn() -> number"
            },
            "getConversionRate": {
                "!type": "fn() -> number"
            },
            "getConversions": {
                "!type": "fn() -> number"
            },
            "getConvertedClicks": {
                "!type": "fn() -> number"
            },
            "getCost": {
                "!type": "fn() -> number"
            },
            "getCtr": {
                "!type": "fn() -> number"
            },
            "getImpressions": {
                "!type": "fn() -> number"
            }
        },
        "MccApp.Stats": {
            "getAverageCpc": {
                "!type": "fn() -> number"
            },
            "getAverageCpm": {
                "!type": "fn() -> number"
            },
            "getAveragePageviews": {
                "!type": "fn() -> number"
            },
            "getAveragePosition": {
                "!type": "fn() -> number"
            },
            "getAverageTimeOnSite": {
                "!type": "fn() -> number"
            },
            "getBounceRate": {
                "!type": "fn() -> number"
            },
            "getClickConversionRate": {
                "!type": "fn() -> number"
            },
            "getClicks": {
                "!type": "fn() -> number"
            },
            "getConversionRate": {
                "!type": "fn() -> number"
            },
            "getConversions": {
                "!type": "fn() -> number"
            },
            "getConvertedClicks": {
                "!type": "fn() -> number"
            },
            "getCost": {
                "!type": "fn() -> number"
            },
            "getCtr": {
                "!type": "fn() -> number"
            },
            "getImpressions": {
                "!type": "fn() -> number"
            }
        },
        "Menu": {
            "addItem": {
                "!doc": "Adds an item to the menu. The label for a menu item should be in sentence case (only the first\n word capitalized).",
                "!type": "fn(caption: string, functionName: string) -> Menu"
            },
            "addSeparator": {
                "!doc": "Adds a visual separator to the menu.",
                "!type": "fn() -> Menu"
            },
            "addSubMenu": {
                "!doc": "Adds a sub-menu to the menu.",
                "!type": "fn(menu: Menu) -> Menu"
            },
            "addToUi": {
                "!doc": "Inserts the menu into the instance of the editor's user interface.",
                "!type": "fn()"
            }
        },
        "Month": {
            "APRIL": {
                "!doc": "April (month 4).",
                "!type": "Month"
            },
            "AUGUST": {
                "!doc": "August (month 8).",
                "!type": "Month"
            },
            "DECEMBER": {
                "!doc": "December (month 12).",
                "!type": "Month"
            },
            "FEBRUARY": {
                "!doc": "February (month 2).",
                "!type": "Month"
            },
            "JANUARY": {
                "!doc": "January (month 1).",
                "!type": "Month"
            },
            "JULY": {
                "!doc": "July (month 7).",
                "!type": "Month"
            },
            "JUNE": {
                "!doc": "June (month 6).",
                "!type": "Month"
            },
            "MARCH": {
                "!doc": "March (month 3).",
                "!type": "Month"
            },
            "MAY": {
                "!doc": "May (month 5).",
                "!type": "Month"
            },
            "NOVEMBER": {
                "!doc": "November (month 11).",
                "!type": "Month"
            },
            "OCTOBER": {
                "!doc": "October (month 10).",
                "!type": "Month"
            },
            "SEPTEMBER": {
                "!doc": "September (month 9).",
                "!type": "Month"
            }
        },
        "Prediction.Collection.HostedmodelsCollection": {
            "predict": {
                "!type": "fn(resource: Prediction.Schema.Input, project: string, hostedModelName: string) -> Prediction.Schema.Output"
            }
        },
        "Prediction.Collection.TrainedmodelsCollection": {
            "analyze": {
                "!type": "fn(project: string, id: string) -> Prediction.Schema.Analyze"
            },
            "get": {
                "!type": "fn(project: string, id: string) -> Prediction.Schema.Insert2"
            },
            "insert": {
                "!type": "fn(resource: Prediction.Schema.Insert, project: string) -> Prediction.Schema.Insert2"
            },
            "list": {
                "!type": "fn(project: string) -> Prediction.Schema.List"
            },
            "list ": {
                "!type": "fn(project: string, optionalArgs: object) -> Prediction.Schema.List"
            },
            "predict": {
                "!type": "fn(resource: Prediction.Schema.Input, project: string, id: string) -> Prediction.Schema.Output"
            },
            "remove": {
                "!type": "fn(project: string, id: string)"
            },
            "update": {
                "!type": "fn(resource: Prediction.Schema.Update, project: string, id: string) -> Prediction.Schema.Insert2"
            }
        },
        "Prediction.Schema.Analyze": {
            "dataDescription": {
                "!type": "Prediction.Schema.AnalyzeDataDescription"
            },
            "errors": {
                "!type": "[object]"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "modelDescription": {
                "!type": "Prediction.Schema.AnalyzeModelDescription"
            },
            "selfLink": {
                "!type": "string"
            }
        },
        "Prediction.Schema.AnalyzeDataDescription": {
            "features": {
                "!type": "[Prediction.Schema.AnalyzeDataDescriptionFeatures]"
            },
            "outputFeature": {
                "!type": "Prediction.Schema.AnalyzeDataDescriptionOutputFeature"
            }
        },
        "Prediction.Schema.AnalyzeDataDescriptionFeatures": {
            "categorical": {
                "!type": "Prediction.Schema.AnalyzeDataDescriptionFeaturesCategorical"
            },
            "index": {
                "!type": "string"
            },
            "numeric": {
                "!type": "Prediction.Schema.AnalyzeDataDescriptionFeaturesNumeric"
            },
            "text": {
                "!type": "Prediction.Schema.AnalyzeDataDescriptionFeaturesText"
            }
        },
        "Prediction.Schema.AnalyzeDataDescriptionFeaturesCategorical": {
            "count": {
                "!type": "string"
            },
            "values": {
                "!type": "[Prediction.Schema.AnalyzeDataDescriptionFeaturesCategoricalValues]"
            }
        },
        "Prediction.Schema.AnalyzeDataDescriptionFeaturesCategoricalValues": {
            "count": {
                "!type": "string"
            },
            "value": {
                "!type": "string"
            }
        },
        "Prediction.Schema.AnalyzeDataDescriptionFeaturesNumeric": {
            "count": {
                "!type": "string"
            },
            "mean": {
                "!type": "string"
            },
            "variance": {
                "!type": "string"
            }
        },
        "Prediction.Schema.AnalyzeDataDescriptionFeaturesText": {
            "count": {
                "!type": "string"
            }
        },
        "Prediction.Schema.AnalyzeDataDescriptionOutputFeature": {
            "numeric": {
                "!type": "Prediction.Schema.AnalyzeDataDescriptionOutputFeatureNumeric"
            },
            "text": {
                "!type": "[Prediction.Schema.AnalyzeDataDescriptionOutputFeatureText]"
            }
        },
        "Prediction.Schema.AnalyzeDataDescriptionOutputFeatureNumeric": {
            "count": {
                "!type": "string"
            },
            "mean": {
                "!type": "string"
            },
            "variance": {
                "!type": "string"
            }
        },
        "Prediction.Schema.AnalyzeDataDescriptionOutputFeatureText": {
            "count": {
                "!type": "string"
            },
            "value": {
                "!type": "string"
            }
        },
        "Prediction.Schema.AnalyzeModelDescription": {
            "confusionMatrix": {
                "!type": "object"
            },
            "confusionMatrixRowTotals": {
                "!type": "object"
            },
            "modelinfo": {
                "!type": "Prediction.Schema.Insert2"
            }
        },
        "Prediction.Schema.Input": {
            "input": {
                "!type": "Prediction.Schema.InputInput"
            }
        },
        "Prediction.Schema.InputInput": {
            "csvInstance": {
                "!type": "[object]"
            }
        },
        "Prediction.Schema.Insert": {
            "id": {
                "!type": "string"
            },
            "modelType": {
                "!type": "string"
            },
            "sourceModel": {
                "!type": "string"
            },
            "storageDataLocation": {
                "!type": "string"
            },
            "storagePMMLLocation": {
                "!type": "string"
            },
            "storagePMMLModelLocation": {
                "!type": "string"
            },
            "trainingInstances": {
                "!type": "[Prediction.Schema.InsertTrainingInstances]"
            },
            "utility": {
                "!type": "[object]"
            }
        },
        "Prediction.Schema.Insert2": {
            "created": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "modelInfo": {
                "!type": "Prediction.Schema.Insert2ModelInfo"
            },
            "modelType": {
                "!type": "string"
            },
            "selfLink": {
                "!type": "string"
            },
            "storageDataLocation": {
                "!type": "string"
            },
            "storagePMMLLocation": {
                "!type": "string"
            },
            "storagePMMLModelLocation": {
                "!type": "string"
            },
            "trainingComplete": {
                "!type": "string"
            },
            "trainingStatus": {
                "!type": "string"
            }
        },
        "Prediction.Schema.Insert2ModelInfo": {
            "classWeightedAccuracy": {
                "!type": "string"
            },
            "classificationAccuracy": {
                "!type": "string"
            },
            "meanSquaredError": {
                "!type": "string"
            },
            "modelType": {
                "!type": "string"
            },
            "numberInstances": {
                "!type": "string"
            },
            "numberLabels": {
                "!type": "string"
            }
        },
        "Prediction.Schema.InsertTrainingInstances": {
            "csvInstance": {
                "!type": "[object]"
            },
            "output": {
                "!type": "string"
            }
        },
        "Prediction.Schema.List": {
            "items": {
                "!type": "[Prediction.Schema.Insert2]"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "selfLink": {
                "!type": "string"
            }
        },
        "Prediction.Schema.Output": {
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "outputLabel": {
                "!type": "string"
            },
            "outputMulti": {
                "!type": "[Prediction.Schema.OutputOutputMulti]"
            },
            "outputValue": {
                "!type": "string"
            },
            "selfLink": {
                "!type": "string"
            }
        },
        "Prediction.Schema.OutputOutputMulti": {
            "label": {
                "!type": "string"
            },
            "score": {
                "!type": "string"
            }
        },
        "Prediction.Schema.Update": {
            "csvInstance": {
                "!type": "[object]"
            },
            "output": {
                "!type": "string"
            }
        },
        "PromptResponse": {
            "getResponseText": {
                "!doc": "Gets the text that the user entered in the dialog's input field. The text is available even if\n the user closed the dialog by clicking a button with a negative connotation, like \"Cancel\" or\n the close button in the dialog's title bar. getSelectedButton() can help to determine\n whether the user intended the response text to be valid.",
                "!type": "fn() -> string"
            },
            "getSelectedButton": {
                "!doc": "Gets the button that the user clicked to dismiss the dialog. If the user clicked the close\n button that is included in every dialog's title bar, this method returns Button.CLOSE.",
                "!type": "fn() -> Button"
            }
        },
        "ShoppingContent.Collection.AccountsCollection": {
            "authinfo": {
                "!type": "fn() -> ShoppingContent.Schema.AccountsAuthInfoResponse"
            },
            "custombatch": {
                "!type": "fn(resource: ShoppingContent.Schema.AccountsCustomBatchRequest) -> ShoppingContent.Schema.AccountsCustomBatchResponse"
            },
            "custombatch ": {
                "!type": "fn(resource: ShoppingContent.Schema.AccountsCustomBatchRequest, optionalArgs: object) -> ShoppingContent.Schema.AccountsCustomBatchResponse"
            },
            "get": {
                "!type": "fn(merchantId: string, accountId: string) -> ShoppingContent.Schema.Account"
            },
            "insert": {
                "!type": "fn(resource: ShoppingContent.Schema.Account, merchantId: string) -> ShoppingContent.Schema.Account"
            },
            "insert ": {
                "!type": "fn(resource: ShoppingContent.Schema.Account, merchantId: string, optionalArgs: object) -> ShoppingContent.Schema.Account"
            },
            "list": {
                "!type": "fn(merchantId: string) -> ShoppingContent.Schema.AccountsListResponse"
            },
            "list ": {
                "!type": "fn(merchantId: string, optionalArgs: object) -> ShoppingContent.Schema.AccountsListResponse"
            },
            "patch": {
                "!type": "fn(resource: ShoppingContent.Schema.Account, merchantId: string, accountId: string) -> ShoppingContent.Schema.Account"
            },
            "patch ": {
                "!type": "fn(resource: ShoppingContent.Schema.Account, merchantId: string, accountId: string, optionalArgs: object) -> ShoppingContent.Schema.Account"
            },
            "remove": {
                "!type": "fn(merchantId: string, accountId: string)"
            },
            "remove ": {
                "!type": "fn(merchantId: string, accountId: string, optionalArgs: object)"
            },
            "update": {
                "!type": "fn(resource: ShoppingContent.Schema.Account, merchantId: string, accountId: string) -> ShoppingContent.Schema.Account"
            },
            "update ": {
                "!type": "fn(resource: ShoppingContent.Schema.Account, merchantId: string, accountId: string, optionalArgs: object) -> ShoppingContent.Schema.Account"
            }
        },
        "ShoppingContent.Collection.AccountshippingCollection": {
            "custombatch": {
                "!type": "fn(resource: ShoppingContent.Schema.AccountshippingCustomBatchRequest) -> ShoppingContent.Schema.AccountshippingCustomBatchResponse"
            },
            "custombatch ": {
                "!type": "fn(resource: ShoppingContent.Schema.AccountshippingCustomBatchRequest, optionalArgs: object) -> ShoppingContent.Schema.AccountshippingCustomBatchResponse"
            },
            "get": {
                "!type": "fn(merchantId: string, accountId: string) -> ShoppingContent.Schema.AccountShipping"
            },
            "list": {
                "!type": "fn(merchantId: string) -> ShoppingContent.Schema.AccountshippingListResponse"
            },
            "list ": {
                "!type": "fn(merchantId: string, optionalArgs: object) -> ShoppingContent.Schema.AccountshippingListResponse"
            },
            "patch": {
                "!type": "fn(resource: ShoppingContent.Schema.AccountShipping, merchantId: string, accountId: string) -> ShoppingContent.Schema.AccountShipping"
            },
            "patch ": {
                "!type": "fn(resource: ShoppingContent.Schema.AccountShipping, merchantId: string, accountId: string, optionalArgs: object) -> ShoppingContent.Schema.AccountShipping"
            },
            "update": {
                "!type": "fn(resource: ShoppingContent.Schema.AccountShipping, merchantId: string, accountId: string) -> ShoppingContent.Schema.AccountShipping"
            },
            "update ": {
                "!type": "fn(resource: ShoppingContent.Schema.AccountShipping, merchantId: string, accountId: string, optionalArgs: object) -> ShoppingContent.Schema.AccountShipping"
            }
        },
        "ShoppingContent.Collection.AccountstatusesCollection": {
            "custombatch": {
                "!type": "fn(resource: ShoppingContent.Schema.AccountstatusesCustomBatchRequest) -> ShoppingContent.Schema.AccountstatusesCustomBatchResponse"
            },
            "get": {
                "!type": "fn(merchantId: string, accountId: string) -> ShoppingContent.Schema.AccountStatus"
            },
            "list": {
                "!type": "fn(merchantId: string) -> ShoppingContent.Schema.AccountstatusesListResponse"
            },
            "list ": {
                "!type": "fn(merchantId: string, optionalArgs: object) -> ShoppingContent.Schema.AccountstatusesListResponse"
            }
        },
        "ShoppingContent.Collection.AccounttaxCollection": {
            "custombatch": {
                "!type": "fn(resource: ShoppingContent.Schema.AccounttaxCustomBatchRequest) -> ShoppingContent.Schema.AccounttaxCustomBatchResponse"
            },
            "custombatch ": {
                "!type": "fn(resource: ShoppingContent.Schema.AccounttaxCustomBatchRequest, optionalArgs: object) -> ShoppingContent.Schema.AccounttaxCustomBatchResponse"
            },
            "get": {
                "!type": "fn(merchantId: string, accountId: string) -> ShoppingContent.Schema.AccountTax"
            },
            "list": {
                "!type": "fn(merchantId: string) -> ShoppingContent.Schema.AccounttaxListResponse"
            },
            "list ": {
                "!type": "fn(merchantId: string, optionalArgs: object) -> ShoppingContent.Schema.AccounttaxListResponse"
            },
            "patch": {
                "!type": "fn(resource: ShoppingContent.Schema.AccountTax, merchantId: string, accountId: string) -> ShoppingContent.Schema.AccountTax"
            },
            "patch ": {
                "!type": "fn(resource: ShoppingContent.Schema.AccountTax, merchantId: string, accountId: string, optionalArgs: object) -> ShoppingContent.Schema.AccountTax"
            },
            "update": {
                "!type": "fn(resource: ShoppingContent.Schema.AccountTax, merchantId: string, accountId: string) -> ShoppingContent.Schema.AccountTax"
            },
            "update ": {
                "!type": "fn(resource: ShoppingContent.Schema.AccountTax, merchantId: string, accountId: string, optionalArgs: object) -> ShoppingContent.Schema.AccountTax"
            }
        },
        "ShoppingContent.Collection.DatafeedsCollection": {
            "custombatch": {
                "!type": "fn(resource: ShoppingContent.Schema.DatafeedsCustomBatchRequest) -> ShoppingContent.Schema.DatafeedsCustomBatchResponse"
            },
            "custombatch ": {
                "!type": "fn(resource: ShoppingContent.Schema.DatafeedsCustomBatchRequest, optionalArgs: object) -> ShoppingContent.Schema.DatafeedsCustomBatchResponse"
            },
            "get": {
                "!type": "fn(merchantId: string, datafeedId: string) -> ShoppingContent.Schema.Datafeed"
            },
            "insert": {
                "!type": "fn(resource: ShoppingContent.Schema.Datafeed, merchantId: string) -> ShoppingContent.Schema.Datafeed"
            },
            "insert ": {
                "!type": "fn(resource: ShoppingContent.Schema.Datafeed, merchantId: string, optionalArgs: object) -> ShoppingContent.Schema.Datafeed"
            },
            "list": {
                "!type": "fn(merchantId: string) -> ShoppingContent.Schema.DatafeedsListResponse"
            },
            "list ": {
                "!type": "fn(merchantId: string, optionalArgs: object) -> ShoppingContent.Schema.DatafeedsListResponse"
            },
            "patch": {
                "!type": "fn(resource: ShoppingContent.Schema.Datafeed, merchantId: string, datafeedId: string) -> ShoppingContent.Schema.Datafeed"
            },
            "patch ": {
                "!type": "fn(resource: ShoppingContent.Schema.Datafeed, merchantId: string, datafeedId: string, optionalArgs: object) -> ShoppingContent.Schema.Datafeed"
            },
            "remove": {
                "!type": "fn(merchantId: string, datafeedId: string)"
            },
            "remove ": {
                "!type": "fn(merchantId: string, datafeedId: string, optionalArgs: object)"
            },
            "update": {
                "!type": "fn(resource: ShoppingContent.Schema.Datafeed, merchantId: string, datafeedId: string) -> ShoppingContent.Schema.Datafeed"
            },
            "update ": {
                "!type": "fn(resource: ShoppingContent.Schema.Datafeed, merchantId: string, datafeedId: string, optionalArgs: object) -> ShoppingContent.Schema.Datafeed"
            }
        },
        "ShoppingContent.Collection.DatafeedstatusesCollection": {
            "custombatch": {
                "!type": "fn(resource: ShoppingContent.Schema.DatafeedstatusesCustomBatchRequest) -> ShoppingContent.Schema.DatafeedstatusesCustomBatchResponse"
            },
            "get": {
                "!type": "fn(merchantId: string, datafeedId: string) -> ShoppingContent.Schema.DatafeedStatus"
            },
            "list": {
                "!type": "fn(merchantId: string) -> ShoppingContent.Schema.DatafeedstatusesListResponse"
            },
            "list ": {
                "!type": "fn(merchantId: string, optionalArgs: object) -> ShoppingContent.Schema.DatafeedstatusesListResponse"
            }
        },
        "ShoppingContent.Collection.InventoryCollection": {
            "custombatch": {
                "!type": "fn(resource: ShoppingContent.Schema.InventoryCustomBatchRequest) -> ShoppingContent.Schema.InventoryCustomBatchResponse"
            },
            "custombatch ": {
                "!type": "fn(resource: ShoppingContent.Schema.InventoryCustomBatchRequest, optionalArgs: object) -> ShoppingContent.Schema.InventoryCustomBatchResponse"
            },
            "set": {
                "!type": "fn(resource: ShoppingContent.Schema.InventorySetRequest, merchantId: string, storeCode: string, productId: string) -> ShoppingContent.Schema.InventorySetResponse"
            },
            "set ": {
                "!type": "fn(resource: ShoppingContent.Schema.InventorySetRequest, merchantId: string, storeCode: string, productId: string, optionalArgs: object) -> ShoppingContent.Schema.InventorySetResponse"
            }
        },
        "ShoppingContent.Collection.OrdersCollection": {
            "acknowledge": {
                "!type": "fn(resource: ShoppingContent.Schema.OrdersAcknowledgeRequest, merchantId: string, orderId: string) -> ShoppingContent.Schema.OrdersAcknowledgeResponse"
            },
            "advancetestorder": {
                "!type": "fn(merchantId: string, orderId: string) -> ShoppingContent.Schema.OrdersAdvanceTestOrderResponse"
            },
            "cancel": {
                "!type": "fn(resource: ShoppingContent.Schema.OrdersCancelRequest, merchantId: string, orderId: string) -> ShoppingContent.Schema.OrdersCancelResponse"
            },
            "cancellineitem": {
                "!type": "fn(resource: ShoppingContent.Schema.OrdersCancelLineItemRequest, merchantId: string, orderId: string) -> ShoppingContent.Schema.OrdersCancelLineItemResponse"
            },
            "createtestorder": {
                "!type": "fn(resource: ShoppingContent.Schema.OrdersCreateTestOrderRequest, merchantId: string) -> ShoppingContent.Schema.OrdersCreateTestOrderResponse"
            },
            "custombatch": {
                "!type": "fn(resource: ShoppingContent.Schema.OrdersCustomBatchRequest) -> ShoppingContent.Schema.OrdersCustomBatchResponse"
            },
            "get": {
                "!type": "fn(merchantId: string, orderId: string) -> ShoppingContent.Schema.Order"
            },
            "getbymerchantorderid": {
                "!type": "fn(merchantId: string, merchantOrderId: string) -> ShoppingContent.Schema.OrdersGetByMerchantOrderIdResponse"
            },
            "gettestordertemplate": {
                "!type": "fn(merchantId: string, templateName: string) -> ShoppingContent.Schema.OrdersGetTestOrderTemplateResponse"
            },
            "list": {
                "!type": "fn(merchantId: string) -> ShoppingContent.Schema.OrdersListResponse"
            },
            "list ": {
                "!type": "fn(merchantId: string, optionalArgs: object) -> ShoppingContent.Schema.OrdersListResponse"
            },
            "refund": {
                "!type": "fn(resource: ShoppingContent.Schema.OrdersRefundRequest, merchantId: string, orderId: string) -> ShoppingContent.Schema.OrdersRefundResponse"
            },
            "returnlineitem": {
                "!type": "fn(resource: ShoppingContent.Schema.OrdersReturnLineItemRequest, merchantId: string, orderId: string) -> ShoppingContent.Schema.OrdersReturnLineItemResponse"
            },
            "shiplineitems": {
                "!type": "fn(resource: ShoppingContent.Schema.OrdersShipLineItemsRequest, merchantId: string, orderId: string) -> ShoppingContent.Schema.OrdersShipLineItemsResponse"
            },
            "updatemerchantorderid": {
                "!type": "fn(resource: ShoppingContent.Schema.OrdersUpdateMerchantOrderIdRequest, merchantId: string, orderId: string) -> ShoppingContent.Schema.OrdersUpdateMerchantOrderIdResponse"
            },
            "updateshipment": {
                "!type": "fn(resource: ShoppingContent.Schema.OrdersUpdateShipmentRequest, merchantId: string, orderId: string) -> ShoppingContent.Schema.OrdersUpdateShipmentResponse"
            }
        },
        "ShoppingContent.Collection.ProductsCollection": {
            "custombatch": {
                "!type": "fn(resource: ShoppingContent.Schema.ProductsCustomBatchRequest) -> ShoppingContent.Schema.ProductsCustomBatchResponse"
            },
            "custombatch ": {
                "!type": "fn(resource: ShoppingContent.Schema.ProductsCustomBatchRequest, optionalArgs: object) -> ShoppingContent.Schema.ProductsCustomBatchResponse"
            },
            "get": {
                "!type": "fn(merchantId: string, productId: string) -> ShoppingContent.Schema.Product"
            },
            "insert": {
                "!type": "fn(resource: ShoppingContent.Schema.Product, merchantId: string) -> ShoppingContent.Schema.Product"
            },
            "insert ": {
                "!type": "fn(resource: ShoppingContent.Schema.Product, merchantId: string, optionalArgs: object) -> ShoppingContent.Schema.Product"
            },
            "list": {
                "!type": "fn(merchantId: string) -> ShoppingContent.Schema.ProductsListResponse"
            },
            "list ": {
                "!type": "fn(merchantId: string, optionalArgs: object) -> ShoppingContent.Schema.ProductsListResponse"
            },
            "remove": {
                "!type": "fn(merchantId: string, productId: string)"
            },
            "remove ": {
                "!type": "fn(merchantId: string, productId: string, optionalArgs: object)"
            }
        },
        "ShoppingContent.Collection.ProductstatusesCollection": {
            "custombatch": {
                "!type": "fn(resource: ShoppingContent.Schema.ProductstatusesCustomBatchRequest) -> ShoppingContent.Schema.ProductstatusesCustomBatchResponse"
            },
            "get": {
                "!type": "fn(merchantId: string, productId: string) -> ShoppingContent.Schema.ProductStatus"
            },
            "list": {
                "!type": "fn(merchantId: string) -> ShoppingContent.Schema.ProductstatusesListResponse"
            },
            "list ": {
                "!type": "fn(merchantId: string, optionalArgs: object) -> ShoppingContent.Schema.ProductstatusesListResponse"
            }
        },
        "ShoppingContent.Schema.Account": {
            "adultContent": {
                "!type": "bool"
            },
            "adwordsLinks": {
                "!type": "[ShoppingContent.Schema.AccountAdwordsLink]"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "name": {
                "!type": "string"
            },
            "reviewsUrl": {
                "!type": "string"
            },
            "sellerId": {
                "!type": "string"
            },
            "users": {
                "!type": "[ShoppingContent.Schema.AccountUser]"
            },
            "websiteUrl": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.AccountAdwordsLink": {
            "adwordsId": {
                "!type": "string"
            },
            "status": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.AccountIdentifier": {
            "aggregatorId": {
                "!type": "string"
            },
            "merchantId": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.AccountShipping": {
            "accountId": {
                "!type": "string"
            },
            "carrierRates": {
                "!type": "[ShoppingContent.Schema.AccountShippingCarrierRate]"
            },
            "kind": {
                "!type": "string"
            },
            "locationGroups": {
                "!type": "[ShoppingContent.Schema.AccountShippingLocationGroup]"
            },
            "rateTables": {
                "!type": "[ShoppingContent.Schema.AccountShippingRateTable]"
            },
            "services": {
                "!type": "[ShoppingContent.Schema.AccountShippingShippingService]"
            }
        },
        "ShoppingContent.Schema.AccountShippingCarrierRate": {
            "carrier": {
                "!type": "string"
            },
            "carrierService": {
                "!type": "string"
            },
            "modifierFlatRate": {
                "!type": "ShoppingContent.Schema.Price"
            },
            "modifierPercent": {
                "!type": "string"
            },
            "name": {
                "!type": "string"
            },
            "saleCountry": {
                "!type": "string"
            },
            "shippingOrigin": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.AccountShippingCondition": {
            "deliveryLocationGroup": {
                "!type": "string"
            },
            "deliveryLocationId": {
                "!type": "string"
            },
            "deliveryPostalCode": {
                "!type": "string"
            },
            "deliveryPostalCodeRange": {
                "!type": "ShoppingContent.Schema.AccountShippingPostalCodeRange"
            },
            "priceMax": {
                "!type": "ShoppingContent.Schema.Price"
            },
            "shippingLabel": {
                "!type": "string"
            },
            "weightMax": {
                "!type": "ShoppingContent.Schema.Weight"
            }
        },
        "ShoppingContent.Schema.AccountShippingLocationGroup": {
            "country": {
                "!type": "string"
            },
            "locationIds": {
                "!type": "[string]"
            },
            "name": {
                "!type": "string"
            },
            "postalCodeRanges": {
                "!type": "[ShoppingContent.Schema.AccountShippingPostalCodeRange]"
            },
            "postalCodes": {
                "!type": "[string]"
            }
        },
        "ShoppingContent.Schema.AccountShippingPostalCodeRange": {
            "end": {
                "!type": "string"
            },
            "start": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.AccountShippingRateTable": {
            "content": {
                "!type": "[ShoppingContent.Schema.AccountShippingRateTableCell]"
            },
            "name": {
                "!type": "string"
            },
            "saleCountry": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.AccountShippingRateTableCell": {
            "condition": {
                "!type": "ShoppingContent.Schema.AccountShippingCondition"
            },
            "rate": {
                "!type": "ShoppingContent.Schema.Price"
            }
        },
        "ShoppingContent.Schema.AccountShippingShippingService": {
            "active": {
                "!type": "bool"
            },
            "calculationMethod": {
                "!type": "ShoppingContent.Schema.AccountShippingShippingServiceCalculationMethod"
            },
            "costRuleTree": {
                "!type": "ShoppingContent.Schema.AccountShippingShippingServiceCostRule"
            },
            "name": {
                "!type": "string"
            },
            "saleCountry": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.AccountShippingShippingServiceCalculationMethod": {
            "carrierRate": {
                "!type": "string"
            },
            "excluded": {
                "!type": "bool"
            },
            "flatRate": {
                "!type": "ShoppingContent.Schema.Price"
            },
            "percentageRate": {
                "!type": "string"
            },
            "rateTable": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.AccountShippingShippingServiceCostRule": {
            "calculationMethod": {
                "!type": "ShoppingContent.Schema.AccountShippingShippingServiceCalculationMethod"
            },
            "children": {
                "!type": "[ShoppingContent.Schema.AccountShippingShippingServiceCostRule]"
            },
            "condition": {
                "!type": "ShoppingContent.Schema.AccountShippingCondition"
            }
        },
        "ShoppingContent.Schema.AccountStatus": {
            "accountId": {
                "!type": "string"
            },
            "dataQualityIssues": {
                "!type": "[ShoppingContent.Schema.AccountStatusDataQualityIssue]"
            },
            "kind": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.AccountStatusDataQualityIssue": {
            "country": {
                "!type": "string"
            },
            "displayedValue": {
                "!type": "string"
            },
            "exampleItems": {
                "!type": "[ShoppingContent.Schema.AccountStatusExampleItem]"
            },
            "id": {
                "!type": "string"
            },
            "lastChecked": {
                "!type": "string"
            },
            "numItems": {
                "!type": "number"
            },
            "severity": {
                "!type": "string"
            },
            "submittedValue": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.AccountStatusExampleItem": {
            "itemId": {
                "!type": "string"
            },
            "link": {
                "!type": "string"
            },
            "submittedValue": {
                "!type": "string"
            },
            "title": {
                "!type": "string"
            },
            "valueOnLandingPage": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.AccountTax": {
            "accountId": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "rules": {
                "!type": "[ShoppingContent.Schema.AccountTaxTaxRule]"
            }
        },
        "ShoppingContent.Schema.AccountTaxTaxRule": {
            "country": {
                "!type": "string"
            },
            "locationId": {
                "!type": "string"
            },
            "ratePercent": {
                "!type": "string"
            },
            "shippingTaxed": {
                "!type": "bool"
            },
            "useGlobalRate": {
                "!type": "bool"
            }
        },
        "ShoppingContent.Schema.AccountUser": {
            "admin": {
                "!type": "bool"
            },
            "emailAddress": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.AccountsAuthInfoResponse": {
            "accountIdentifiers": {
                "!type": "[ShoppingContent.Schema.AccountIdentifier]"
            },
            "kind": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.AccountsCustomBatchRequest": {
            "entries": {
                "!type": "[ShoppingContent.Schema.AccountsCustomBatchRequestEntry]"
            }
        },
        "ShoppingContent.Schema.AccountsCustomBatchRequestEntry": {
            "account": {
                "!type": "ShoppingContent.Schema.Account"
            },
            "accountId": {
                "!type": "string"
            },
            "batchId": {
                "!type": "number"
            },
            "merchantId": {
                "!type": "string"
            },
            "method": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.AccountsCustomBatchResponse": {
            "entries": {
                "!type": "[ShoppingContent.Schema.AccountsCustomBatchResponseEntry]"
            },
            "kind": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.AccountsCustomBatchResponseEntry": {
            "account": {
                "!type": "ShoppingContent.Schema.Account"
            },
            "batchId": {
                "!type": "number"
            },
            "errors": {
                "!type": "ShoppingContent.Schema.Errors"
            },
            "kind": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.AccountsListResponse": {
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "resources": {
                "!type": "[ShoppingContent.Schema.Account]"
            }
        },
        "ShoppingContent.Schema.AccountshippingCustomBatchRequest": {
            "entries": {
                "!type": "[ShoppingContent.Schema.AccountshippingCustomBatchRequestEntry]"
            }
        },
        "ShoppingContent.Schema.AccountshippingCustomBatchRequestEntry": {
            "accountId": {
                "!type": "string"
            },
            "accountShipping": {
                "!type": "ShoppingContent.Schema.AccountShipping"
            },
            "batchId": {
                "!type": "number"
            },
            "merchantId": {
                "!type": "string"
            },
            "method": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.AccountshippingCustomBatchResponse": {
            "entries": {
                "!type": "[ShoppingContent.Schema.AccountshippingCustomBatchResponseEntry]"
            },
            "kind": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.AccountshippingCustomBatchResponseEntry": {
            "accountShipping": {
                "!type": "ShoppingContent.Schema.AccountShipping"
            },
            "batchId": {
                "!type": "number"
            },
            "errors": {
                "!type": "ShoppingContent.Schema.Errors"
            },
            "kind": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.AccountshippingListResponse": {
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "resources": {
                "!type": "[ShoppingContent.Schema.AccountShipping]"
            }
        },
        "ShoppingContent.Schema.AccountstatusesCustomBatchRequest": {
            "entries": {
                "!type": "[ShoppingContent.Schema.AccountstatusesCustomBatchRequestEntry]"
            }
        },
        "ShoppingContent.Schema.AccountstatusesCustomBatchRequestEntry": {
            "accountId": {
                "!type": "string"
            },
            "batchId": {
                "!type": "number"
            },
            "merchantId": {
                "!type": "string"
            },
            "method": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.AccountstatusesCustomBatchResponse": {
            "entries": {
                "!type": "[ShoppingContent.Schema.AccountstatusesCustomBatchResponseEntry]"
            },
            "kind": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.AccountstatusesCustomBatchResponseEntry": {
            "accountStatus": {
                "!type": "ShoppingContent.Schema.AccountStatus"
            },
            "batchId": {
                "!type": "number"
            },
            "errors": {
                "!type": "ShoppingContent.Schema.Errors"
            }
        },
        "ShoppingContent.Schema.AccountstatusesListResponse": {
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "resources": {
                "!type": "[ShoppingContent.Schema.AccountStatus]"
            }
        },
        "ShoppingContent.Schema.AccounttaxCustomBatchRequest": {
            "entries": {
                "!type": "[ShoppingContent.Schema.AccounttaxCustomBatchRequestEntry]"
            }
        },
        "ShoppingContent.Schema.AccounttaxCustomBatchRequestEntry": {
            "accountId": {
                "!type": "string"
            },
            "accountTax": {
                "!type": "ShoppingContent.Schema.AccountTax"
            },
            "batchId": {
                "!type": "number"
            },
            "merchantId": {
                "!type": "string"
            },
            "method": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.AccounttaxCustomBatchResponse": {
            "entries": {
                "!type": "[ShoppingContent.Schema.AccounttaxCustomBatchResponseEntry]"
            },
            "kind": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.AccounttaxCustomBatchResponseEntry": {
            "accountTax": {
                "!type": "ShoppingContent.Schema.AccountTax"
            },
            "batchId": {
                "!type": "number"
            },
            "errors": {
                "!type": "ShoppingContent.Schema.Errors"
            },
            "kind": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.AccounttaxListResponse": {
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "resources": {
                "!type": "[ShoppingContent.Schema.AccountTax]"
            }
        },
        "ShoppingContent.Schema.Datafeed": {
            "attributeLanguage": {
                "!type": "string"
            },
            "contentLanguage": {
                "!type": "string"
            },
            "contentType": {
                "!type": "string"
            },
            "fetchSchedule": {
                "!type": "ShoppingContent.Schema.DatafeedFetchSchedule"
            },
            "fileName": {
                "!type": "string"
            },
            "format": {
                "!type": "ShoppingContent.Schema.DatafeedFormat"
            },
            "id": {
                "!type": "string"
            },
            "intendedDestinations": {
                "!type": "[string]"
            },
            "kind": {
                "!type": "string"
            },
            "name": {
                "!type": "string"
            },
            "targetCountry": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.DatafeedFetchSchedule": {
            "dayOfMonth": {
                "!type": "number"
            },
            "fetchUrl": {
                "!type": "string"
            },
            "hour": {
                "!type": "number"
            },
            "password": {
                "!type": "string"
            },
            "timeZone": {
                "!type": "string"
            },
            "username": {
                "!type": "string"
            },
            "weekday": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.DatafeedFormat": {
            "columnDelimiter": {
                "!type": "string"
            },
            "fileEncoding": {
                "!type": "string"
            },
            "quotingMode": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.DatafeedStatus": {
            "datafeedId": {
                "!type": "string"
            },
            "errors": {
                "!type": "[ShoppingContent.Schema.DatafeedStatusError]"
            },
            "itemsTotal": {
                "!type": "string"
            },
            "itemsValid": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "lastUploadDate": {
                "!type": "string"
            },
            "processingStatus": {
                "!type": "string"
            },
            "warnings": {
                "!type": "[ShoppingContent.Schema.DatafeedStatusError]"
            }
        },
        "ShoppingContent.Schema.DatafeedStatusError": {
            "code": {
                "!type": "string"
            },
            "count": {
                "!type": "string"
            },
            "examples": {
                "!type": "[ShoppingContent.Schema.DatafeedStatusExample]"
            },
            "message": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.DatafeedStatusExample": {
            "itemId": {
                "!type": "string"
            },
            "lineNumber": {
                "!type": "string"
            },
            "value": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.DatafeedsCustomBatchRequest": {
            "entries": {
                "!type": "[ShoppingContent.Schema.DatafeedsCustomBatchRequestEntry]"
            }
        },
        "ShoppingContent.Schema.DatafeedsCustomBatchRequestEntry": {
            "batchId": {
                "!type": "number"
            },
            "datafeed": {
                "!type": "ShoppingContent.Schema.Datafeed"
            },
            "datafeedId": {
                "!type": "string"
            },
            "merchantId": {
                "!type": "string"
            },
            "method": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.DatafeedsCustomBatchResponse": {
            "entries": {
                "!type": "[ShoppingContent.Schema.DatafeedsCustomBatchResponseEntry]"
            },
            "kind": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.DatafeedsCustomBatchResponseEntry": {
            "batchId": {
                "!type": "number"
            },
            "datafeed": {
                "!type": "ShoppingContent.Schema.Datafeed"
            },
            "errors": {
                "!type": "ShoppingContent.Schema.Errors"
            }
        },
        "ShoppingContent.Schema.DatafeedsListResponse": {
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "resources": {
                "!type": "[ShoppingContent.Schema.Datafeed]"
            }
        },
        "ShoppingContent.Schema.DatafeedstatusesCustomBatchRequest": {
            "entries": {
                "!type": "[ShoppingContent.Schema.DatafeedstatusesCustomBatchRequestEntry]"
            }
        },
        "ShoppingContent.Schema.DatafeedstatusesCustomBatchRequestEntry": {
            "batchId": {
                "!type": "number"
            },
            "datafeedId": {
                "!type": "string"
            },
            "merchantId": {
                "!type": "string"
            },
            "method": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.DatafeedstatusesCustomBatchResponse": {
            "entries": {
                "!type": "[ShoppingContent.Schema.DatafeedstatusesCustomBatchResponseEntry]"
            },
            "kind": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.DatafeedstatusesCustomBatchResponseEntry": {
            "batchId": {
                "!type": "number"
            },
            "datafeedStatus": {
                "!type": "ShoppingContent.Schema.DatafeedStatus"
            },
            "errors": {
                "!type": "ShoppingContent.Schema.Errors"
            }
        },
        "ShoppingContent.Schema.DatafeedstatusesListResponse": {
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "resources": {
                "!type": "[ShoppingContent.Schema.DatafeedStatus]"
            }
        },
        "ShoppingContent.Schema.Error": {
            "domain": {
                "!type": "string"
            },
            "message": {
                "!type": "string"
            },
            "reason": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.Errors": {
            "code": {
                "!type": "number"
            },
            "errors": {
                "!type": "[ShoppingContent.Schema.Error]"
            },
            "message": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.Installment": {
            "amount": {
                "!type": "ShoppingContent.Schema.Price"
            },
            "months": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.Inventory": {
            "availability": {
                "!type": "string"
            },
            "installment": {
                "!type": "ShoppingContent.Schema.Installment"
            },
            "kind": {
                "!type": "string"
            },
            "loyaltyPoints": {
                "!type": "ShoppingContent.Schema.LoyaltyPoints"
            },
            "price": {
                "!type": "ShoppingContent.Schema.Price"
            },
            "quantity": {
                "!type": "number"
            },
            "salePrice": {
                "!type": "ShoppingContent.Schema.Price"
            },
            "salePriceEffectiveDate": {
                "!type": "string"
            },
            "sellOnGoogleQuantity": {
                "!type": "number"
            }
        },
        "ShoppingContent.Schema.InventoryCustomBatchRequest": {
            "entries": {
                "!type": "[ShoppingContent.Schema.InventoryCustomBatchRequestEntry]"
            }
        },
        "ShoppingContent.Schema.InventoryCustomBatchRequestEntry": {
            "batchId": {
                "!type": "number"
            },
            "inventory": {
                "!type": "ShoppingContent.Schema.Inventory"
            },
            "merchantId": {
                "!type": "string"
            },
            "productId": {
                "!type": "string"
            },
            "storeCode": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.InventoryCustomBatchResponse": {
            "entries": {
                "!type": "[ShoppingContent.Schema.InventoryCustomBatchResponseEntry]"
            },
            "kind": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.InventoryCustomBatchResponseEntry": {
            "batchId": {
                "!type": "number"
            },
            "errors": {
                "!type": "ShoppingContent.Schema.Errors"
            },
            "kind": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.InventorySetRequest": {
            "availability": {
                "!type": "string"
            },
            "installment": {
                "!type": "ShoppingContent.Schema.Installment"
            },
            "loyaltyPoints": {
                "!type": "ShoppingContent.Schema.LoyaltyPoints"
            },
            "price": {
                "!type": "ShoppingContent.Schema.Price"
            },
            "quantity": {
                "!type": "number"
            },
            "salePrice": {
                "!type": "ShoppingContent.Schema.Price"
            },
            "salePriceEffectiveDate": {
                "!type": "string"
            },
            "sellOnGoogleQuantity": {
                "!type": "number"
            }
        },
        "ShoppingContent.Schema.InventorySetResponse": {
            "kind": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.LoyaltyPoints": {
            "name": {
                "!type": "string"
            },
            "pointsValue": {
                "!type": "string"
            },
            "ratio": {
                "!type": "number"
            }
        },
        "ShoppingContent.Schema.Order": {
            "acknowledged": {
                "!type": "bool"
            },
            "customer": {
                "!type": "ShoppingContent.Schema.OrderCustomer"
            },
            "deliveryDetails": {
                "!type": "ShoppingContent.Schema.OrderDeliveryDetails"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "lineItems": {
                "!type": "[ShoppingContent.Schema.OrderLineItem]"
            },
            "merchantId": {
                "!type": "string"
            },
            "merchantOrderId": {
                "!type": "string"
            },
            "netAmount": {
                "!type": "ShoppingContent.Schema.Price"
            },
            "paymentMethod": {
                "!type": "ShoppingContent.Schema.OrderPaymentMethod"
            },
            "paymentStatus": {
                "!type": "string"
            },
            "placedDate": {
                "!type": "string"
            },
            "refunds": {
                "!type": "[ShoppingContent.Schema.OrderRefund]"
            },
            "shipments": {
                "!type": "[ShoppingContent.Schema.OrderShipment]"
            },
            "shippingCost": {
                "!type": "ShoppingContent.Schema.Price"
            },
            "shippingCostTax": {
                "!type": "ShoppingContent.Schema.Price"
            },
            "shippingOption": {
                "!type": "string"
            },
            "status": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrderAddress": {
            "country": {
                "!type": "string"
            },
            "fullAddress": {
                "!type": "[string]"
            },
            "isPostOfficeBox": {
                "!type": "bool"
            },
            "locality": {
                "!type": "string"
            },
            "postalCode": {
                "!type": "string"
            },
            "recipientName": {
                "!type": "string"
            },
            "region": {
                "!type": "string"
            },
            "streetAddress": {
                "!type": "[string]"
            }
        },
        "ShoppingContent.Schema.OrderCancellation": {
            "actor": {
                "!type": "string"
            },
            "creationDate": {
                "!type": "string"
            },
            "quantity": {
                "!type": "number"
            },
            "reason": {
                "!type": "string"
            },
            "reasonText": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrderCustomer": {
            "email": {
                "!type": "string"
            },
            "explicitMarketingPreference": {
                "!type": "bool"
            },
            "fullName": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrderDeliveryDetails": {
            "address": {
                "!type": "ShoppingContent.Schema.OrderAddress"
            },
            "phoneNumber": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrderLineItem": {
            "cancellations": {
                "!type": "[ShoppingContent.Schema.OrderCancellation]"
            },
            "id": {
                "!type": "string"
            },
            "price": {
                "!type": "ShoppingContent.Schema.Price"
            },
            "product": {
                "!type": "ShoppingContent.Schema.OrderLineItemProduct"
            },
            "quantityCanceled": {
                "!type": "number"
            },
            "quantityDelivered": {
                "!type": "number"
            },
            "quantityOrdered": {
                "!type": "number"
            },
            "quantityPending": {
                "!type": "number"
            },
            "quantityReturned": {
                "!type": "number"
            },
            "quantityShipped": {
                "!type": "number"
            },
            "returnInfo": {
                "!type": "ShoppingContent.Schema.OrderLineItemReturnInfo"
            },
            "returns": {
                "!type": "[ShoppingContent.Schema.OrderReturn]"
            },
            "shippingDetails": {
                "!type": "ShoppingContent.Schema.OrderLineItemShippingDetails"
            },
            "tax": {
                "!type": "ShoppingContent.Schema.Price"
            }
        },
        "ShoppingContent.Schema.OrderLineItemProduct": {
            "brand": {
                "!type": "string"
            },
            "channel": {
                "!type": "string"
            },
            "condition": {
                "!type": "string"
            },
            "contentLanguage": {
                "!type": "string"
            },
            "gtin": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "imageLink": {
                "!type": "string"
            },
            "itemGroupId": {
                "!type": "string"
            },
            "mpn": {
                "!type": "string"
            },
            "offerId": {
                "!type": "string"
            },
            "price": {
                "!type": "ShoppingContent.Schema.Price"
            },
            "shownImage": {
                "!type": "string"
            },
            "targetCountry": {
                "!type": "string"
            },
            "title": {
                "!type": "string"
            },
            "variantAttributes": {
                "!type": "[ShoppingContent.Schema.OrderLineItemProductVariantAttribute]"
            }
        },
        "ShoppingContent.Schema.OrderLineItemProductVariantAttribute": {
            "dimension": {
                "!type": "string"
            },
            "value": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrderLineItemReturnInfo": {
            "daysToReturn": {
                "!type": "number"
            },
            "isReturnable": {
                "!type": "bool"
            },
            "policyUrl": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrderLineItemShippingDetails": {
            "deliverByDate": {
                "!type": "string"
            },
            "method": {
                "!type": "ShoppingContent.Schema.OrderLineItemShippingDetailsMethod"
            },
            "shipByDate": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrderLineItemShippingDetailsMethod": {
            "carrier": {
                "!type": "string"
            },
            "maxDaysInTransit": {
                "!type": "number"
            },
            "methodName": {
                "!type": "string"
            },
            "minDaysInTransit": {
                "!type": "number"
            }
        },
        "ShoppingContent.Schema.OrderPaymentMethod": {
            "billingAddress": {
                "!type": "ShoppingContent.Schema.OrderAddress"
            },
            "expirationMonth": {
                "!type": "number"
            },
            "expirationYear": {
                "!type": "number"
            },
            "lastFourDigits": {
                "!type": "string"
            },
            "phoneNumber": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrderRefund": {
            "actor": {
                "!type": "string"
            },
            "amount": {
                "!type": "ShoppingContent.Schema.Price"
            },
            "creationDate": {
                "!type": "string"
            },
            "reason": {
                "!type": "string"
            },
            "reasonText": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrderReturn": {
            "actor": {
                "!type": "string"
            },
            "creationDate": {
                "!type": "string"
            },
            "quantity": {
                "!type": "number"
            },
            "reason": {
                "!type": "string"
            },
            "reasonText": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrderShipment": {
            "carrier": {
                "!type": "string"
            },
            "creationDate": {
                "!type": "string"
            },
            "deliveryDate": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "lineItems": {
                "!type": "[ShoppingContent.Schema.OrderShipmentLineItemShipment]"
            },
            "status": {
                "!type": "string"
            },
            "trackingId": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrderShipmentLineItemShipment": {
            "lineItemId": {
                "!type": "string"
            },
            "quantity": {
                "!type": "number"
            }
        },
        "ShoppingContent.Schema.OrdersAcknowledgeRequest": {
            "operationId": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrdersAcknowledgeResponse": {
            "executionStatus": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrdersAdvanceTestOrderResponse": {
            "kind": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrdersCancelLineItemRequest": {
            "amount": {
                "!type": "ShoppingContent.Schema.Price"
            },
            "lineItemId": {
                "!type": "string"
            },
            "operationId": {
                "!type": "string"
            },
            "quantity": {
                "!type": "number"
            },
            "reason": {
                "!type": "string"
            },
            "reasonText": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrdersCancelLineItemResponse": {
            "executionStatus": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrdersCancelRequest": {
            "operationId": {
                "!type": "string"
            },
            "reason": {
                "!type": "string"
            },
            "reasonText": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrdersCancelResponse": {
            "executionStatus": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrdersCreateTestOrderRequest": {
            "templateName": {
                "!type": "string"
            },
            "testOrder": {
                "!type": "ShoppingContent.Schema.TestOrder"
            }
        },
        "ShoppingContent.Schema.OrdersCreateTestOrderResponse": {
            "kind": {
                "!type": "string"
            },
            "orderId": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrdersCustomBatchRequest": {
            "entries": {
                "!type": "[ShoppingContent.Schema.OrdersCustomBatchRequestEntry]"
            }
        },
        "ShoppingContent.Schema.OrdersCustomBatchRequestEntry": {
            "batchId": {
                "!type": "number"
            },
            "cancel": {
                "!type": "ShoppingContent.Schema.OrdersCustomBatchRequestEntryCancel"
            },
            "cancelLineItem": {
                "!type": "ShoppingContent.Schema.OrdersCustomBatchRequestEntryCancelLineItem"
            },
            "merchantId": {
                "!type": "string"
            },
            "merchantOrderId": {
                "!type": "string"
            },
            "method": {
                "!type": "string"
            },
            "operationId": {
                "!type": "string"
            },
            "orderId": {
                "!type": "string"
            },
            "refund": {
                "!type": "ShoppingContent.Schema.OrdersCustomBatchRequestEntryRefund"
            },
            "returnLineItem": {
                "!type": "ShoppingContent.Schema.OrdersCustomBatchRequestEntryReturnLineItem"
            },
            "shipLineItems": {
                "!type": "ShoppingContent.Schema.OrdersCustomBatchRequestEntryShipLineItems"
            },
            "updateShipment": {
                "!type": "ShoppingContent.Schema.OrdersCustomBatchRequestEntryUpdateShipment"
            }
        },
        "ShoppingContent.Schema.OrdersCustomBatchRequestEntryCancel": {
            "reason": {
                "!type": "string"
            },
            "reasonText": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrdersCustomBatchRequestEntryCancelLineItem": {
            "amount": {
                "!type": "ShoppingContent.Schema.Price"
            },
            "lineItemId": {
                "!type": "string"
            },
            "quantity": {
                "!type": "number"
            },
            "reason": {
                "!type": "string"
            },
            "reasonText": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrdersCustomBatchRequestEntryRefund": {
            "amount": {
                "!type": "ShoppingContent.Schema.Price"
            },
            "reason": {
                "!type": "string"
            },
            "reasonText": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrdersCustomBatchRequestEntryReturnLineItem": {
            "lineItemId": {
                "!type": "string"
            },
            "quantity": {
                "!type": "number"
            },
            "reason": {
                "!type": "string"
            },
            "reasonText": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrdersCustomBatchRequestEntryShipLineItems": {
            "carrier": {
                "!type": "string"
            },
            "lineItems": {
                "!type": "[ShoppingContent.Schema.OrderShipmentLineItemShipment]"
            },
            "shipmentId": {
                "!type": "string"
            },
            "trackingId": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrdersCustomBatchRequestEntryUpdateShipment": {
            "carrier": {
                "!type": "string"
            },
            "shipmentId": {
                "!type": "string"
            },
            "status": {
                "!type": "string"
            },
            "trackingId": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrdersCustomBatchResponse": {
            "entries": {
                "!type": "[ShoppingContent.Schema.OrdersCustomBatchResponseEntry]"
            },
            "kind": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrdersCustomBatchResponseEntry": {
            "batchId": {
                "!type": "number"
            },
            "errors": {
                "!type": "ShoppingContent.Schema.Errors"
            },
            "executionStatus": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "order": {
                "!type": "ShoppingContent.Schema.Order"
            }
        },
        "ShoppingContent.Schema.OrdersGetByMerchantOrderIdResponse": {
            "kind": {
                "!type": "string"
            },
            "order": {
                "!type": "ShoppingContent.Schema.Order"
            }
        },
        "ShoppingContent.Schema.OrdersGetTestOrderTemplateResponse": {
            "kind": {
                "!type": "string"
            },
            "template": {
                "!type": "ShoppingContent.Schema.TestOrder"
            }
        },
        "ShoppingContent.Schema.OrdersListResponse": {
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "resources": {
                "!type": "[ShoppingContent.Schema.Order]"
            }
        },
        "ShoppingContent.Schema.OrdersRefundRequest": {
            "amount": {
                "!type": "ShoppingContent.Schema.Price"
            },
            "operationId": {
                "!type": "string"
            },
            "reason": {
                "!type": "string"
            },
            "reasonText": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrdersRefundResponse": {
            "executionStatus": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrdersReturnLineItemRequest": {
            "lineItemId": {
                "!type": "string"
            },
            "operationId": {
                "!type": "string"
            },
            "quantity": {
                "!type": "number"
            },
            "reason": {
                "!type": "string"
            },
            "reasonText": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrdersReturnLineItemResponse": {
            "executionStatus": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrdersShipLineItemsRequest": {
            "carrier": {
                "!type": "string"
            },
            "lineItems": {
                "!type": "[ShoppingContent.Schema.OrderShipmentLineItemShipment]"
            },
            "operationId": {
                "!type": "string"
            },
            "shipmentId": {
                "!type": "string"
            },
            "trackingId": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrdersShipLineItemsResponse": {
            "executionStatus": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrdersUpdateMerchantOrderIdRequest": {
            "merchantOrderId": {
                "!type": "string"
            },
            "operationId": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrdersUpdateMerchantOrderIdResponse": {
            "executionStatus": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrdersUpdateShipmentRequest": {
            "carrier": {
                "!type": "string"
            },
            "operationId": {
                "!type": "string"
            },
            "shipmentId": {
                "!type": "string"
            },
            "status": {
                "!type": "string"
            },
            "trackingId": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.OrdersUpdateShipmentResponse": {
            "executionStatus": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.Price": {
            "currency": {
                "!type": "string"
            },
            "value": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.Product": {
            "additionalImageLinks": {
                "!type": "[string]"
            },
            "adult": {
                "!type": "bool"
            },
            "adwordsGrouping": {
                "!type": "string"
            },
            "adwordsLabels": {
                "!type": "[string]"
            },
            "adwordsRedirect": {
                "!type": "string"
            },
            "ageGroup": {
                "!type": "string"
            },
            "aspects": {
                "!type": "[ShoppingContent.Schema.ProductAspect]"
            },
            "availability": {
                "!type": "string"
            },
            "availabilityDate": {
                "!type": "string"
            },
            "brand": {
                "!type": "string"
            },
            "channel": {
                "!type": "string"
            },
            "color": {
                "!type": "string"
            },
            "condition": {
                "!type": "string"
            },
            "contentLanguage": {
                "!type": "string"
            },
            "customAttributes": {
                "!type": "[ShoppingContent.Schema.ProductCustomAttribute]"
            },
            "customGroups": {
                "!type": "[ShoppingContent.Schema.ProductCustomGroup]"
            },
            "customLabel0": {
                "!type": "string"
            },
            "customLabel1": {
                "!type": "string"
            },
            "customLabel2": {
                "!type": "string"
            },
            "customLabel3": {
                "!type": "string"
            },
            "customLabel4": {
                "!type": "string"
            },
            "description": {
                "!type": "string"
            },
            "destinations": {
                "!type": "[ShoppingContent.Schema.ProductDestination]"
            },
            "displayAdsId": {
                "!type": "string"
            },
            "displayAdsLink": {
                "!type": "string"
            },
            "displayAdsSimilarIds": {
                "!type": "[string]"
            },
            "displayAdsTitle": {
                "!type": "string"
            },
            "displayAdsValue": {
                "!type": "number"
            },
            "energyEfficiencyClass": {
                "!type": "string"
            },
            "expirationDate": {
                "!type": "string"
            },
            "gender": {
                "!type": "string"
            },
            "googleProductCategory": {
                "!type": "string"
            },
            "gtin": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "identifierExists": {
                "!type": "bool"
            },
            "imageLink": {
                "!type": "string"
            },
            "installment": {
                "!type": "ShoppingContent.Schema.Installment"
            },
            "isBundle": {
                "!type": "bool"
            },
            "itemGroupId": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "link": {
                "!type": "string"
            },
            "loyaltyPoints": {
                "!type": "ShoppingContent.Schema.LoyaltyPoints"
            },
            "material": {
                "!type": "string"
            },
            "mobileLink": {
                "!type": "string"
            },
            "mpn": {
                "!type": "string"
            },
            "multipack": {
                "!type": "string"
            },
            "offerId": {
                "!type": "string"
            },
            "onlineOnly": {
                "!type": "bool"
            },
            "pattern": {
                "!type": "string"
            },
            "price": {
                "!type": "ShoppingContent.Schema.Price"
            },
            "productType": {
                "!type": "string"
            },
            "salePrice": {
                "!type": "ShoppingContent.Schema.Price"
            },
            "salePriceEffectiveDate": {
                "!type": "string"
            },
            "sellOnGoogleQuantity": {
                "!type": "string"
            },
            "shipping": {
                "!type": "[ShoppingContent.Schema.ProductShipping]"
            },
            "shippingHeight": {
                "!type": "ShoppingContent.Schema.ProductShippingDimension"
            },
            "shippingLabel": {
                "!type": "string"
            },
            "shippingLength": {
                "!type": "ShoppingContent.Schema.ProductShippingDimension"
            },
            "shippingWeight": {
                "!type": "ShoppingContent.Schema.ProductShippingWeight"
            },
            "shippingWidth": {
                "!type": "ShoppingContent.Schema.ProductShippingDimension"
            },
            "sizeSystem": {
                "!type": "string"
            },
            "sizeType": {
                "!type": "string"
            },
            "sizes": {
                "!type": "[string]"
            },
            "targetCountry": {
                "!type": "string"
            },
            "taxes": {
                "!type": "[ShoppingContent.Schema.ProductTax]"
            },
            "title": {
                "!type": "string"
            },
            "unitPricingBaseMeasure": {
                "!type": "ShoppingContent.Schema.ProductUnitPricingBaseMeasure"
            },
            "unitPricingMeasure": {
                "!type": "ShoppingContent.Schema.ProductUnitPricingMeasure"
            },
            "validatedDestinations": {
                "!type": "[string]"
            },
            "warnings": {
                "!type": "[ShoppingContent.Schema.Error]"
            }
        },
        "ShoppingContent.Schema.ProductAspect": {
            "aspectName": {
                "!type": "string"
            },
            "destinationName": {
                "!type": "string"
            },
            "intention": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.ProductCustomAttribute": {
            "name": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            },
            "unit": {
                "!type": "string"
            },
            "value": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.ProductCustomGroup": {
            "attributes": {
                "!type": "[ShoppingContent.Schema.ProductCustomAttribute]"
            },
            "name": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.ProductDestination": {
            "destinationName": {
                "!type": "string"
            },
            "intention": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.ProductShipping": {
            "country": {
                "!type": "string"
            },
            "locationGroupName": {
                "!type": "string"
            },
            "locationId": {
                "!type": "string"
            },
            "postalCode": {
                "!type": "string"
            },
            "price": {
                "!type": "ShoppingContent.Schema.Price"
            },
            "region": {
                "!type": "string"
            },
            "service": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.ProductShippingDimension": {
            "unit": {
                "!type": "string"
            },
            "value": {
                "!type": "number"
            }
        },
        "ShoppingContent.Schema.ProductShippingWeight": {
            "unit": {
                "!type": "string"
            },
            "value": {
                "!type": "number"
            }
        },
        "ShoppingContent.Schema.ProductStatus": {
            "creationDate": {
                "!type": "string"
            },
            "dataQualityIssues": {
                "!type": "[ShoppingContent.Schema.ProductStatusDataQualityIssue]"
            },
            "destinationStatuses": {
                "!type": "[ShoppingContent.Schema.ProductStatusDestinationStatus]"
            },
            "googleExpirationDate": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "lastUpdateDate": {
                "!type": "string"
            },
            "link": {
                "!type": "string"
            },
            "productId": {
                "!type": "string"
            },
            "title": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.ProductStatusDataQualityIssue": {
            "detail": {
                "!type": "string"
            },
            "fetchStatus": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "location": {
                "!type": "string"
            },
            "severity": {
                "!type": "string"
            },
            "timestamp": {
                "!type": "string"
            },
            "valueOnLandingPage": {
                "!type": "string"
            },
            "valueProvided": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.ProductStatusDestinationStatus": {
            "approvalStatus": {
                "!type": "string"
            },
            "destination": {
                "!type": "string"
            },
            "intention": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.ProductTax": {
            "country": {
                "!type": "string"
            },
            "locationId": {
                "!type": "string"
            },
            "postalCode": {
                "!type": "string"
            },
            "rate": {
                "!type": "number"
            },
            "region": {
                "!type": "string"
            },
            "taxShip": {
                "!type": "bool"
            }
        },
        "ShoppingContent.Schema.ProductUnitPricingBaseMeasure": {
            "unit": {
                "!type": "string"
            },
            "value": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.ProductUnitPricingMeasure": {
            "unit": {
                "!type": "string"
            },
            "value": {
                "!type": "number"
            }
        },
        "ShoppingContent.Schema.ProductsCustomBatchRequest": {
            "entries": {
                "!type": "[ShoppingContent.Schema.ProductsCustomBatchRequestEntry]"
            }
        },
        "ShoppingContent.Schema.ProductsCustomBatchRequestEntry": {
            "batchId": {
                "!type": "number"
            },
            "merchantId": {
                "!type": "string"
            },
            "method": {
                "!type": "string"
            },
            "product": {
                "!type": "ShoppingContent.Schema.Product"
            },
            "productId": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.ProductsCustomBatchResponse": {
            "entries": {
                "!type": "[ShoppingContent.Schema.ProductsCustomBatchResponseEntry]"
            },
            "kind": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.ProductsCustomBatchResponseEntry": {
            "batchId": {
                "!type": "number"
            },
            "errors": {
                "!type": "ShoppingContent.Schema.Errors"
            },
            "kind": {
                "!type": "string"
            },
            "product": {
                "!type": "ShoppingContent.Schema.Product"
            }
        },
        "ShoppingContent.Schema.ProductsListResponse": {
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "resources": {
                "!type": "[ShoppingContent.Schema.Product]"
            }
        },
        "ShoppingContent.Schema.ProductstatusesCustomBatchRequest": {
            "entries": {
                "!type": "[ShoppingContent.Schema.ProductstatusesCustomBatchRequestEntry]"
            }
        },
        "ShoppingContent.Schema.ProductstatusesCustomBatchRequestEntry": {
            "batchId": {
                "!type": "number"
            },
            "merchantId": {
                "!type": "string"
            },
            "method": {
                "!type": "string"
            },
            "productId": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.ProductstatusesCustomBatchResponse": {
            "entries": {
                "!type": "[ShoppingContent.Schema.ProductstatusesCustomBatchResponseEntry]"
            },
            "kind": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.ProductstatusesCustomBatchResponseEntry": {
            "batchId": {
                "!type": "number"
            },
            "errors": {
                "!type": "ShoppingContent.Schema.Errors"
            },
            "kind": {
                "!type": "string"
            },
            "productStatus": {
                "!type": "ShoppingContent.Schema.ProductStatus"
            }
        },
        "ShoppingContent.Schema.ProductstatusesListResponse": {
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "resources": {
                "!type": "[ShoppingContent.Schema.ProductStatus]"
            }
        },
        "ShoppingContent.Schema.TestOrder": {
            "customer": {
                "!type": "ShoppingContent.Schema.TestOrderCustomer"
            },
            "kind": {
                "!type": "string"
            },
            "lineItems": {
                "!type": "[ShoppingContent.Schema.TestOrderLineItem]"
            },
            "paymentMethod": {
                "!type": "ShoppingContent.Schema.TestOrderPaymentMethod"
            },
            "predefinedDeliveryAddress": {
                "!type": "string"
            },
            "shippingCost": {
                "!type": "ShoppingContent.Schema.Price"
            },
            "shippingCostTax": {
                "!type": "ShoppingContent.Schema.Price"
            },
            "shippingOption": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.TestOrderCustomer": {
            "email": {
                "!type": "string"
            },
            "explicitMarketingPreference": {
                "!type": "bool"
            },
            "fullName": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.TestOrderLineItem": {
            "product": {
                "!type": "ShoppingContent.Schema.TestOrderLineItemProduct"
            },
            "quantityOrdered": {
                "!type": "number"
            },
            "returnInfo": {
                "!type": "ShoppingContent.Schema.OrderLineItemReturnInfo"
            },
            "shippingDetails": {
                "!type": "ShoppingContent.Schema.OrderLineItemShippingDetails"
            },
            "unitTax": {
                "!type": "ShoppingContent.Schema.Price"
            }
        },
        "ShoppingContent.Schema.TestOrderLineItemProduct": {
            "brand": {
                "!type": "string"
            },
            "channel": {
                "!type": "string"
            },
            "condition": {
                "!type": "string"
            },
            "contentLanguage": {
                "!type": "string"
            },
            "gtin": {
                "!type": "string"
            },
            "imageLink": {
                "!type": "string"
            },
            "itemGroupId": {
                "!type": "string"
            },
            "mpn": {
                "!type": "string"
            },
            "offerId": {
                "!type": "string"
            },
            "price": {
                "!type": "ShoppingContent.Schema.Price"
            },
            "targetCountry": {
                "!type": "string"
            },
            "title": {
                "!type": "string"
            },
            "variantAttributes": {
                "!type": "[ShoppingContent.Schema.OrderLineItemProductVariantAttribute]"
            }
        },
        "ShoppingContent.Schema.TestOrderPaymentMethod": {
            "expirationMonth": {
                "!type": "number"
            },
            "expirationYear": {
                "!type": "number"
            },
            "lastFourDigits": {
                "!type": "string"
            },
            "predefinedBillingAddress": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            }
        },
        "ShoppingContent.Schema.Weight": {
            "unit": {
                "!type": "string"
            },
            "value": {
                "!type": "string"
            }
        },
        "SpreadsheetApp.BorderStyle": {
            "DASHED": {
                "!doc": "Dashed line borders.",
                "!type": "SpreadsheetApp.BorderStyle"
            },
            "DOTTED": {
                "!doc": "Dotted line borders.",
                "!type": "SpreadsheetApp.BorderStyle"
            },
            "SOLID": {
                "!doc": "Solid line borders.",
                "!type": "SpreadsheetApp.BorderStyle"
            }
        },
        "SpreadsheetApp.ContainerInfo": {
            "getAnchorColumn": {
                "!doc": "The chart's left side will be anchored in this column.",
                "!type": "fn() -> number"
            },
            "getAnchorRow": {
                "!doc": "The chart's top side will be anchored in this row.",
                "!type": "fn() -> number"
            },
            "getOffsetX": {
                "!doc": "The chart's upper left hand corner will be offset from the anchor column by this many pixels.",
                "!type": "fn() -> number"
            },
            "getOffsetY": {
                "!doc": "Chart's upper left hand corner will be offset from the anchor row by this many pixels.",
                "!type": "fn() -> number"
            }
        },
        "SpreadsheetApp.DataValidation": {
            "copy": {
                "!doc": "Creates a builder for a data-validation rule based on this rule's settings. \n\n \n \/\/ Change existing data-validation rules that require a date in 2013 to require a date in 2014.\n var oldDates = [new Date(&#39;1\/1\/2013&#39;), new Date(&#39;12\/31\/2013&#39;)];\n var newDates = [new Date(&#39;1\/1\/2014&#39;), new Date(&#39;12\/31\/2014&#39;)];\n var sheet = SpreadsheetApp.getActiveSheet();\n var range = sheet.getRange(1, 1, sheet.getMaxRows(), sheet.getMaxColumns());\n var rules = range.getDataValidations();\n\n for (var i = 0; i &lt; rules.length; i++) {\n   for (var j = 0; j &lt; rules[i].length; j++) {\n     var rule = rules[i][j];\n\n     if (rule != null) {\n       var criteria = rule.getCriteriaType();\n       var args = rule.getCriteriaValues();\n \n       if (criteria == SpreadsheetApp.DataValidationCriteria.DATE_BETWEEN\n           &amp;&amp; args[0].getTime() == oldDates[0].getTime()\n           &amp;&amp; args[1].getTime() == oldDates[1].getTime()) {\n         \/\/ Create a builder from the existing rule, then change the dates.\n         rules[i][j] = rule.copy().withCriteria(criteria, newDates).build();\n       }\n     }\n   }\n }\n range.setDataValidations(rules);\n ",
                "!type": "fn() -> SpreadsheetApp.DataValidationBuilder"
            },
            "getAllowInvalid": {
                "!doc": "Returns true if the rule shows a warning when input fails data validation, or\n false if it rejects the input entirely. The default for new data-validation rules is\n true.",
                "!type": "fn() -> bool"
            },
            "getCriteriaType": {
                "!doc": "Gets the rule's criteria type as defined in the DataValidationCriteria enum. To get the\n arguments for the criteria, use getCriteriaValues(). To use these values to create or\n modify a data-validation rule, see\n DataValidationBuilder.withCriteria(criteria, args).\n\n \n \/\/ Log information about the data-validation rule for cell A1.\n var cell = SpreadsheetApp.getActive().getRange('A1');\n var rule = cell.getDataValidation();\n if (rule != null) {\n   var criteria = rule.getCriteriaType();\n   var args = rule.getCriteriaValues();\n   Logger.log('The data-validation rule is %s %s', criteria, args);\n } else {\n   Logger.log('The cell does not have a data-validation rule.')\n }\n ",
                "!type": "fn() -> SpreadsheetApp.DataValidationCriteria"
            },
            "getCriteriaValues": {
                "!doc": "Gets an array of arguments for the rule's criteria. To get the criteria type, use\n getCriteriaType(). To use these values to create or modify a data-validation rule, see\n DataValidationBuilder.withCriteria(criteria, args).\n\n \n \/\/ Log information about the data-validation rule for cell A1.\n var cell = SpreadsheetApp.getActive().getRange('A1');\n var rule = cell.getDataValidation();\n if (rule != null) {\n   var criteria = rule.getCriteriaType();\n   var args = rule.getCriteriaValues();\n   Logger.log('The data-validation rule is %s %s', criteria, args);\n } else {\n   Logger.log('The cell does not have a data-validation rule.')\n }\n ",
                "!type": "fn() -> [object]"
            },
            "getHelpText": {
                "!doc": "Gets the rule's help text, or null if no help text is set.",
                "!type": "fn() -> string"
            }
        },
        "SpreadsheetApp.DataValidationBuilder": {
            "build": {
                "!doc": "Constructs a data-validation rule from the settings applied to the builder.",
                "!type": "fn() -> SpreadsheetApp.DataValidation"
            },
            "copy": {
                "!doc": "Creates a builder for a data-validation rule based on this rule's settings. \n\n \n \/\/ Change existing data-validation rules that require a date in 2013 to require a date in 2014.\n var oldDates = [new Date(&#39;1\/1\/2013&#39;), new Date(&#39;12\/31\/2013&#39;)];\n var newDates = [new Date(&#39;1\/1\/2014&#39;), new Date(&#39;12\/31\/2014&#39;)];\n var sheet = SpreadsheetApp.getActiveSheet();\n var range = sheet.getRange(1, 1, sheet.getMaxRows(), sheet.getMaxColumns());\n var rules = range.getDataValidations();\n\n for (var i = 0; i &lt; rules.length; i++) {\n   for (var j = 0; j &lt; rules[i].length; j++) {\n     var rule = rules[i][j];\n\n     if (rule != null) {\n       var criteria = rule.getCriteriaType();\n       var args = rule.getCriteriaValues();\n \n       if (criteria == SpreadsheetApp.DataValidationCriteria.DATE_BETWEEN\n           &amp;&amp; args[0].getTime() == oldDates[0].getTime()\n           &amp;&amp; args[1].getTime() == oldDates[1].getTime()) {\n         \/\/ Create a builder from the existing rule, then change the dates.\n         rules[i][j] = rule.copy().withCriteria(criteria, newDates).build();\n       }\n     }\n   }\n }\n range.setDataValidations(rules);\n ",
                "!type": "fn() -> SpreadsheetApp.DataValidationBuilder"
            },
            "getAllowInvalid": {
                "!doc": "Returns true if the rule shows a warning when input fails data validation, or\n false if it rejects the input entirely. The default for new data-validation rules is\n true.",
                "!type": "fn() -> bool"
            },
            "getCriteriaType": {
                "!doc": "Gets the rule's criteria type as defined in the DataValidationCriteria enum. To get the\n arguments for the criteria, use getCriteriaValues(). To use these values to create or\n modify a data-validation rule, see\n withCriteria(criteria, args).\n\n \n \/\/ Log information about the data-validation rule for cell A1.\n var cell = SpreadsheetApp.getActive().getRange('A1');\n var rule = cell.getDataValidation();\n if (rule != null) {\n   var criteria = rule.getCriteriaType();\n   var args = rule.getCriteriaValues();\n   Logger.log('The data-validation rule is %s %s', criteria, args);\n } else {\n   Logger.log('The cell does not have a data-validation rule.')\n }\n ",
                "!type": "fn() -> SpreadsheetApp.DataValidationCriteria"
            },
            "getCriteriaValues": {
                "!doc": "Gets an array of arguments for the rule's criteria. To get the criteria type, use\n getCriteriaType(). To use these values to create or modify a data-validation rule, see\n withCriteria(criteria, args).\n\n \n \/\/ Log information about the data-validation rule for cell A1.\n var cell = SpreadsheetApp.getActive().getRange('A1');\n var rule = cell.getDataValidation();\n if (rule != null) {\n   var criteria = rule.getCriteriaType();\n   var args = rule.getCriteriaValues();\n   Logger.log('The data-validation rule is %s %s', criteria, args);\n } else {\n   Logger.log('The cell does not have a data-validation rule.')\n }\n ",
                "!type": "fn() -> [object]"
            },
            "getHelpText": {
                "!doc": "Gets the rule's help text, or null if no help text is set.",
                "!type": "fn() -> string"
            },
            "requireDate": {
                "!doc": "Sets the data-validation rule to require a date.\n\n \n \/\/ Set the data validation for cell A1 to require a date.\n var cell = SpreadsheetApp.getActive().getRange('A1');\n var rule = SpreadsheetApp.newDataValidation().requireDate().build();\n cell.setDataValidation(rule);\n ",
                "!type": "fn() -> SpreadsheetApp.DataValidationBuilder"
            },
            "requireDateAfter": {
                "!doc": "Sets the data-validation rule to require a date after the given value. The time fields of the\n Date object are ignored; only the day, month, and year fields are used.\n\n \n \/\/ Set the data validation for cell A1 to require a date after January 1, 2013.\n var cell = SpreadsheetApp.getActive().getRange('A1');\n var rule = SpreadsheetApp.newDataValidation().requireDateAfter(new Date('1\/1\/2013')).build();\n cell.setDataValidation(rule);\n ",
                "!type": "fn(date: Date) -> SpreadsheetApp.DataValidationBuilder"
            },
            "requireDateBefore": {
                "!doc": "Sets the data-validation rule to require a date before the given value. The time fields of the\n Date object are ignored; only the day, month, and year fields are used.\n\n \n \/\/ Set the data validation for cell A1 to require a date before January 1, 2013.\n var cell = SpreadsheetApp.getActive().getRange('A1');\n var rule = SpreadsheetApp.newDataValidation().requireDateBefore(new Date('1\/1\/2013')).build();\n cell.setDataValidation(rule);\n ",
                "!type": "fn(date: Date) -> SpreadsheetApp.DataValidationBuilder"
            },
            "requireDateBetween": {
                "!doc": "Sets the data-validation rule to require a date between the given values, inclusive of the\n values themselves. The time fields of the Date objects are ignored; only the day,\n month, and year fields are used.\n\n \n \/\/ Set the data validation for cell A1 to require a date in 2013.\n var cell = SpreadsheetApp.getActive().getRange('A1');\n var rule = SpreadsheetApp.newDataValidation()\n     .requireDateBetween(new Date('1\/1\/2013'), new Date('12\/31\/2013')).build();\n cell.setDataValidation(rule);\n ",
                "!type": "fn(start: Date, end: Date) -> SpreadsheetApp.DataValidationBuilder"
            },
            "requireDateEqualTo": {
                "!doc": "Sets the data-validation rule to require a date equal to the given value. The time fields of\n the Date object are ignored; only the day, month, and year fields are used.\n\n \n \/\/ Set the data validation for cell A1 to require a date equal to January 1, 2013.\n var cell = SpreadsheetApp.getActive().getRange('A1');\n var rule = SpreadsheetApp.newDataValidation().requireDateEqualTo(new Date('1\/1\/2013'))\n     .build();\n cell.setDataValidation(rule);\n ",
                "!type": "fn(date: Date) -> SpreadsheetApp.DataValidationBuilder"
            },
            "requireDateNotBetween": {
                "!doc": "Sets the data-validation rule to require a date not between the given values, inclusive of the\n values themselves. The time fields of the Date objects are ignored; only the day,\n month, and year fields are used.\n\n \n \/\/ Set the data validation for cell A1 to require a date not in 2013.\n var cell = SpreadsheetApp.getActive().getRange('A1');\n var rule = SpreadsheetApp.newDataValidation()\n     .requireDateNotBetween(new Date('1\/1\/2013'), new Date('12\/31\/2013')).build();\n cell.setDataValidation(rule);\n ",
                "!type": "fn(start: Date, end: Date) -> SpreadsheetApp.DataValidationBuilder"
            },
            "requireDateOnOrAfter": {
                "!doc": "Sets the data-validation rule to require a date on or after the given value. The time fields of\n the Date object are ignored; only the day, month, and year fields are used.\n\n \n \/\/ Set the data validation for cell A1 to require a date on or after January 1, 2013.\n var cell = SpreadsheetApp.getActive().getRange('A1');\n var rule = SpreadsheetApp.newDataValidation()\n     .requireDateOnOrAfter(new Date('1\/1\/2013')).build();\n cell.setDataValidation(rule);\n ",
                "!type": "fn(date: Date) -> SpreadsheetApp.DataValidationBuilder"
            },
            "requireDateOnOrBefore": {
                "!doc": "Sets the data-validation rule to require a date on or before the given value. The time fields\n of the Date object are ignored; only the day, month, and year fields are used.\n\n \n \/\/ Set the data validation for cell A1 to require a date on or before January 1, 2013.\n var cell = SpreadsheetApp.getActive().getRange('A1');\n var rule = SpreadsheetApp.newDataValidation()\n     .requireDateOnOrBefore(new Date('1\/1\/2013')).build();\n cell.setDataValidation(rule);\n ",
                "!type": "fn(date: Date) -> SpreadsheetApp.DataValidationBuilder"
            },
            "requireFormulaSatisfied": {
                "!doc": "Sets the data-validation rule to require that the given formula evaluates to true. This\n method is only available in the\n new version of Google Sheets.\n\n \n \/\/ Set the data validation for cell A1 to equal B1 with a custom formula.\n var cell = SpreadsheetApp.getActive().getRange('A1');\n var rule = SpreadsheetApp.newDataValidation().requireFormulaSatisfied('=EQ(A1,B1)').build();\n cell.setDataValidation(rule);\n ",
                "!type": "fn(formula: string) -> SpreadsheetApp.DataValidationBuilder"
            },
            "requireNumberBetween": {
                "!doc": "Sets the data-validation rule to require a number between the given values, inclusive of the\n values themselves.\n\n \n \/\/ Set the data validation for cell A1 to require a number between 1 and 10.\n var cell = SpreadsheetApp.getActive().getRange('A1');\n var rule = SpreadsheetApp.newDataValidation().requireNumberBetween(1, 10).build();\n cell.setDataValidation(rule);\n ",
                "!type": "fn(start: number, end: number) -> SpreadsheetApp.DataValidationBuilder"
            },
            "requireNumberEqualTo": {
                "!doc": "Sets the data-validation rule to require a number equal to the given value.\n\n \n \/\/ Set the data validation for cell A1 to require a number equal to 3.1415926536.\n var cell = SpreadsheetApp.getActive().getRange('A1');\n var rule = SpreadsheetApp.newDataValidation().requireNumberEqualTo(3.1415926536).build();\n cell.setDataValidation(rule);\n ",
                "!type": "fn(number: number) -> SpreadsheetApp.DataValidationBuilder"
            },
            "requireNumberGreaterThan": {
                "!doc": "Sets the data-validation rule to require a number greater than the given value.\n\n \n \/\/ Set the data validation for cell A1 to require a number greater than 0.\n var cell = SpreadsheetApp.getActive().getRange('A1');\n var rule = SpreadsheetApp.newDataValidation().requireNumberGreaterThan(0).build();\n cell.setDataValidation(rule);\n ",
                "!type": "fn(number: number) -> SpreadsheetApp.DataValidationBuilder"
            },
            "requireNumberGreaterThanOrEqualTo": {
                "!doc": "Sets the data-validation rule to require a number greater than or equal to the given value.\n\n \n \/\/ Set the data validation for cell A1 to require a number greater than or equal to 0.\n var cell = SpreadsheetApp.getActive().getRange('A1');\n var rule = SpreadsheetApp.newDataValidation().requireNumberGreaterThanOrEqualTo(0).build();\n cell.setDataValidation(rule);\n ",
                "!type": "fn(number: number) -> SpreadsheetApp.DataValidationBuilder"
            },
            "requireNumberLessThan": {
                "!doc": "Sets the data-validation rule to require a number less than the given value.\n\n \n \/\/ Set the data validation for cell A1 to require a number less than 0.\n var cell = SpreadsheetApp.getActive().getRange('A1');\n var rule = SpreadsheetApp.newDataValidation().requireNumberLessThan(0).build();\n cell.setDataValidation(rule);\n ",
                "!type": "fn(number: number) -> SpreadsheetApp.DataValidationBuilder"
            },
            "requireNumberLessThanOrEqualTo": {
                "!doc": "Sets the data-validation rule to require a number less than or equal to the given value.\n\n \n \/\/ Set the data validation for cell A1 to require a number less than or equal to 0.\n var cell = SpreadsheetApp.getActive().getRange('A1');\n var rule = SpreadsheetApp.newDataValidation().requireNumberLessThanOrEqualTo(0).build();\n cell.setDataValidation(rule);\n ",
                "!type": "fn(number: number) -> SpreadsheetApp.DataValidationBuilder"
            },
            "requireNumberNotBetween": {
                "!doc": "Sets the data-validation rule to require a number not between the given values, inclusive of\n the values themselves.\n\n \n \/\/ Set the data validation for cell A1 to require a number not between 1 and 10.\n var cell = SpreadsheetApp.getActive().getRange('A1');\n var rule = SpreadsheetApp.newDataValidation().requireNumberNotBetween(1, 10).build();\n cell.setDataValidation(rule);\n ",
                "!type": "fn(start: number, end: number) -> SpreadsheetApp.DataValidationBuilder"
            },
            "requireNumberNotEqualTo": {
                "!doc": "Sets the data-validation rule to require a number not equal to the given value.\n\n \n \/\/ Set the data validation for cell A1 to require a number not equal to 0.\n var cell = SpreadsheetApp.getActive().getRange('A1');\n var rule = SpreadsheetApp.newDataValidation().requireNumberNotEqualTo(0).build();\n cell.setDataValidation(rule);\n ",
                "!type": "fn(number: number) -> SpreadsheetApp.DataValidationBuilder"
            },
            "requireTextContains": {
                "!doc": "Sets the data-validation rule to require that the input contains the given value.\n\n \n \/\/ Set the data validation for cell A1 to require any value that includes \"Google\".\n var cell = SpreadsheetApp.getActive().getRange('A1');\n var rule = SpreadsheetApp.newDataValidation().requireTextContains('Google').build();\n cell.setDataValidation(rule);\n ",
                "!type": "fn(text: string) -> SpreadsheetApp.DataValidationBuilder"
            },
            "requireTextDoesNotContain": {
                "!doc": "Sets the data-validation rule to require that the input does not contain the given value.\n\n \n \/\/ Set the data validation for cell A1 to require any value that does not include \"@\".\n var cell = SpreadsheetApp.getActive().getRange('A1');\n var rule = SpreadsheetApp.newDataValidation().requireTextDoesNotContain('@').build();\n cell.setDataValidation(rule);\n ",
                "!type": "fn(text: string) -> SpreadsheetApp.DataValidationBuilder"
            },
            "requireTextEqualTo": {
                "!doc": "Sets the data-validation rule to require that the input is equal to the given value.\n\n \n \/\/ Set the data validation for cell A1 to require \"Yes\".\n var cell = SpreadsheetApp.getActive().getRange('A1');\n var rule = SpreadsheetApp.newDataValidation().requireTextEqualTo('Yes').build();\n cell.setDataValidation(rule);\n ",
                "!type": "fn(text: string) -> SpreadsheetApp.DataValidationBuilder"
            },
            "requireTextIsEmail": {
                "!doc": "Sets the data-validation rule to require that the input is in the form of an email address.\n\n \n \/\/ Set the data validation for cell A1 to require text in the form of an email address.\n var cell = SpreadsheetApp.getActive().getRange('A1');\n var rule = SpreadsheetApp.newDataValidation().requireTextIsEmail().build();\n cell.setDataValidation(rule);\n ",
                "!type": "fn() -> SpreadsheetApp.DataValidationBuilder"
            },
            "requireTextIsUrl": {
                "!doc": "Sets the data-validation rule to require that the input is in the form of a URL.\n\n \n \/\/ Set the data validation for cell A1 to require text in the form of a URL.\n var cell = SpreadsheetApp.getActive().getRange('A1');\n var rule = SpreadsheetApp.newDataValidation().requireTextIsUrl().build();\n cell.setDataValidation(rule);\n ",
                "!type": "fn() -> SpreadsheetApp.DataValidationBuilder"
            },
            "requireValueInList": {
                "!doc": "Sets the data-validation rule to require that the input is equal to one of the given values.\n\n \n \/\/ Set the data validation for cell A1 to require \"Yes\" or \"No\", with a dropdown menu.\n var cell = SpreadsheetApp.getActive().getRange('A1');\n var rule = SpreadsheetApp.newDataValidation().requireValueInList(['Yes', 'No']).build();\n cell.setDataValidation(rule);\n ",
                "!type": "fn(values: [string]) -> SpreadsheetApp.DataValidationBuilder"
            },
            "requireValueInList ": {
                "!doc": "Sets the data-validation rule to require that the input is equal to one of the given values,\n with an option to hide the dropdown menu.\n\n \n \/\/ Set the data validation for cell A1 to require \"Yes\" or \"No\", with no dropdown menu.\n var cell = SpreadsheetApp.getActive().getRange('A1');\n var rule = SpreadsheetApp.newDataValidation().requireValueInList(['Yes', 'No'], false).build();\n cell.setDataValidation(rule);\n ",
                "!type": "fn(values: [string], showDropdown: bool) -> SpreadsheetApp.DataValidationBuilder"
            },
            "requireValueInRange": {
                "!doc": "Sets the data-validation rule to require that the input is equal to a value in the given range.\n\n \n \/\/ Set the data validation for cell A1 to require a value from B1:B10, with a dropdown menu.\n var cell = SpreadsheetApp.getActive().getRange('A1');\n var range = SpreadsheetApp.getActive().getRange('B1:B10');\n var rule = SpreadsheetApp.newDataValidation().requireValueInRange(range).build();\n cell.setDataValidation(rule);\n ",
                "!type": "fn(range: SpreadsheetApp.Range) -> SpreadsheetApp.DataValidationBuilder"
            },
            "requireValueInRange ": {
                "!doc": "Sets the data-validation rule to require that the input is equal to a value in the given range,\n with an option to hide the dropdown menu.\n\n \n \/\/ Set the data validation for cell A1 to require value from B1:B10, with no dropdown menu.\n var cell = SpreadsheetApp.getActive().getRange('A1');\n var range = SpreadsheetApp.getActive().getRange('B1:B10');\n var rule = SpreadsheetApp.newDataValidation().requireValueInRange(range, false).build();\n cell.setDataValidation(rule);\n ",
                "!type": "fn(range: SpreadsheetApp.Range, showDropdown: bool) -> SpreadsheetApp.DataValidationBuilder"
            },
            "setAllowInvalid": {
                "!doc": "Sets whether to show a warning when input fails data validation or whether to reject the input\n entirely. The default for new data-validation rules is true.",
                "!type": "fn(allowInvalidData: bool) -> SpreadsheetApp.DataValidationBuilder"
            },
            "setHelpText": {
                "!doc": "Sets the help text shown when the user hovers over the cell on which data-validation is set.",
                "!type": "fn(helpText: string) -> SpreadsheetApp.DataValidationBuilder"
            },
            "withCriteria": {
                "!doc": "Sets the data-validation rule to require criteria defined in the DataValidationCriteria\n enum. This is an advanced method used primarily to create a new data-validation rule based on\n the criteria and\n arguments of an existing rule; in most other\n cases, the require...() methods are easier to use.\n\n \n \/\/ Change existing data-validation rules that require a date in 2013 to require a date in 2014.\n var oldDates = [new Date(&#39;1\/1\/2013&#39;), new Date(&#39;12\/31\/2013&#39;)];\n var newDates = [new Date(&#39;1\/1\/2014&#39;), new Date(&#39;12\/31\/2014&#39;)];\n var sheet = SpreadsheetApp.getActiveSheet();\n var range = sheet.getRange(1, 1, sheet.getMaxRows(), sheet.getMaxColumns());\n var rules = range.getDataValidations();\n\n for (var i = 0; i &lt; rules.length; i++) {\n   for (var j = 0; j &lt; rules[i].length; j++) {\n     var rule = rules[i][j];\n\n     if (rule != null) {\n       var criteria = rule.getCriteriaType();\n       var args = rule.getCriteriaValues();\n \n       if (criteria == SpreadsheetApp.DataValidationCriteria.DATE_BETWEEN\n           &amp;&amp; args[0].getTime() == oldDates[0].getTime()\n           &amp;&amp; args[1].getTime() == oldDates[1].getTime()) {\n         \/\/ Create a builder from the existing rule, then change the dates.\n         rules[i][j] = rule.copy().withCriteria(criteria, newDates).build();\n       }\n     }\n   }\n }\n range.setDataValidations(rules);\n ",
                "!type": "fn(criteria: SpreadsheetApp.DataValidationCriteria, args: [object]) -> SpreadsheetApp.DataValidationBuilder"
            }
        },
        "SpreadsheetApp.DataValidationCriteria": {
            "CUSTOM_FORMULA": {
                "!doc": "Requires that the input makes the given formula evaluate to true.",
                "!type": "SpreadsheetApp.DataValidationCriteria"
            },
            "DATE_AFTER": {
                "!doc": "Requires a date that is after the given value.",
                "!type": "SpreadsheetApp.DataValidationCriteria"
            },
            "DATE_BEFORE": {
                "!doc": "Requires a date that is before the given value.",
                "!type": "SpreadsheetApp.DataValidationCriteria"
            },
            "DATE_BETWEEN": {
                "!doc": "Requires a date that is between the given values.",
                "!type": "SpreadsheetApp.DataValidationCriteria"
            },
            "DATE_EQUAL_TO": {
                "!doc": "Requires a date that is equal to the given value.",
                "!type": "SpreadsheetApp.DataValidationCriteria"
            },
            "DATE_IS_VALID_DATE": {
                "!doc": "Requires a date.",
                "!type": "SpreadsheetApp.DataValidationCriteria"
            },
            "DATE_NOT_BETWEEN": {
                "!doc": "Requires a date that is not between the given values.",
                "!type": "SpreadsheetApp.DataValidationCriteria"
            },
            "DATE_ON_OR_AFTER": {
                "!doc": "Require a date that is on or after the given value.",
                "!type": "SpreadsheetApp.DataValidationCriteria"
            },
            "DATE_ON_OR_BEFORE": {
                "!doc": "Requires a date that is on or before the given value.",
                "!type": "SpreadsheetApp.DataValidationCriteria"
            },
            "NUMBER_BETWEEN": {
                "!doc": "Requires a number that is between the given values.",
                "!type": "SpreadsheetApp.DataValidationCriteria"
            },
            "NUMBER_EQUAL_TO": {
                "!doc": "Requires a number that is equal to the given value.",
                "!type": "SpreadsheetApp.DataValidationCriteria"
            },
            "NUMBER_GREATER_THAN": {
                "!doc": "Require a number that is greater than the given value.",
                "!type": "SpreadsheetApp.DataValidationCriteria"
            },
            "NUMBER_GREATER_THAN_OR_EQUAL_TO": {
                "!doc": "Requires a number that is greater than or equal to the given value.",
                "!type": "SpreadsheetApp.DataValidationCriteria"
            },
            "NUMBER_LESS_THAN": {
                "!doc": "Requires a number that is less than the given value.",
                "!type": "SpreadsheetApp.DataValidationCriteria"
            },
            "NUMBER_LESS_THAN_OR_EQUAL_TO": {
                "!doc": "Requires a number that is less than or equal to the given value.",
                "!type": "SpreadsheetApp.DataValidationCriteria"
            },
            "NUMBER_NOT_BETWEEN": {
                "!doc": "Requires a number that is not between the given values.",
                "!type": "SpreadsheetApp.DataValidationCriteria"
            },
            "NUMBER_NOT_EQUAL_TO": {
                "!doc": "Requires a number that is not equal to the given value.",
                "!type": "SpreadsheetApp.DataValidationCriteria"
            },
            "TEXT_CONTAINS": {
                "!doc": "Requires that the input contains the given value.",
                "!type": "SpreadsheetApp.DataValidationCriteria"
            },
            "TEXT_DOES_NOT_CONTAIN": {
                "!doc": "Requires that the input does not contain the given value.",
                "!type": "SpreadsheetApp.DataValidationCriteria"
            },
            "TEXT_EQUAL_TO": {
                "!doc": "Requires that the input is equal to the given value.",
                "!type": "SpreadsheetApp.DataValidationCriteria"
            },
            "TEXT_IS_VALID_EMAIL": {
                "!doc": "Requires that the input is in the form of an email address.",
                "!type": "SpreadsheetApp.DataValidationCriteria"
            },
            "TEXT_IS_VALID_URL": {
                "!doc": "Requires that the input is in the form of a URL.",
                "!type": "SpreadsheetApp.DataValidationCriteria"
            },
            "VALUE_IN_LIST": {
                "!doc": "Requires that the input is equal to one of the given values.",
                "!type": "SpreadsheetApp.DataValidationCriteria"
            },
            "VALUE_IN_RANGE": {
                "!doc": "Requires that the input is equal to a value in the given range.",
                "!type": "SpreadsheetApp.DataValidationCriteria"
            }
        },
        "SpreadsheetApp.EmbeddedAreaChartBuilder": {
            "addRange": {
                "!doc": "Adds a Range to the chart represented by this builder. Will not add the Range\n if it has already been added to the chart.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(sheet.getRange(&quot;A1:B8&quot;))\n     .setPosition(5, 5, 0, 0)\n     .build();\n\n sheet.insertChart(chart);\n ",
                "!type": "fn(range: SpreadsheetApp.Range) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "asAreaChart": {
                "!doc": "Sets the chart type to AreaChart and returns an EmbeddedAreaChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedAreaChartBuilder"
            },
            "asBarChart": {
                "!doc": "Sets the chart type to BarChart and returns an EmbeddedBarChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedBarChartBuilder"
            },
            "asColumnChart": {
                "!doc": "Sets the chart type to ColumnChart and returns an EmbeddedColumnChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedColumnChartBuilder"
            },
            "asLineChart": {
                "!doc": "Sets the chart type to LineChart and returns an EmbeddedLineChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedLineChartBuilder"
            },
            "asPieChart": {
                "!doc": "Sets the chart type to PieChart and returns an EmbeddedPieChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedPieChartBuilder"
            },
            "asScatterChart": {
                "!doc": "Sets the chart type to ScatterChart and returns an EmbeddedScatterChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedScatterChartBuilder"
            },
            "asTableChart": {
                "!doc": "Sets the chart type to TableChart and returns an EmbeddedTableChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedTableChartBuilder"
            },
            "build": {
                "!doc": "Builds the chart to reflect all changes made to it.\n\n This method will not automatically draw the chart on top of the spreadsheet. A new chart\n must be inserted via sheet.insertChart(chart), and an existing chart should be updated via\n sheet.update(chart);\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;A1:B5&quot;);\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(range)\n     .setPosition(5, 5, 0, 0)\n     .build()\n\n sheet.insertChart(chart);\n ",
                "!type": "fn() -> SpreadsheetApp.EmbeddedChart"
            },
            "getChartType": {
                "!doc": "Returns the current chart type.",
                "!type": "fn() -> Charts.ChartType"
            },
            "getContainer": {
                "!doc": "Return the ContainerInfo, which encapsulates where the chart appears on the sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var chartBuilder = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(sheet.getRange(&quot;A1:B8&quot;))\n     .setPosition(5, 5, 0, 0);\n\n \/\/ This method returns the exact same data as Chart#getContainerInfo()\n var containerInfo = chartBuilder.getContainer();\n\n \/\/ Logs the values we used in setPosition()\n Logger.log(&quot;Anchor Column: %s\\r\\nAnchor Row %s\\r\\nOffset X %s\\r\\nOffset Y %s&quot;,\n           containerInfo.getAnchorColumn(),\n           containerInfo.getAnchorRow(),\n           containerInfo.getOffsetX(),\n           containerInfo.getOffsetY());\n ",
                "!type": "fn() -> SpreadsheetApp.ContainerInfo"
            },
            "getRanges": {
                "!doc": "Returns a copy of the list of ranges currently providing data for this chart. Use addRange and\n removeRange to modify this list.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var chartBuilder = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(sheet.getRange(&quot;A1:B8&quot;))\n     .setPosition(5, 5, 0, 0)\n\n var ranges = chartBuilder.getRanges();\n\n \/\/ There&#39;s only one range as a data source for this chart,\n \/\/ so this logs &quot;A1:B8&quot;\n for (var i in ranges) {\n   var range = ranges[i];\n   Logger.log(range.getA1Notation());\n }\n ",
                "!type": "fn() -> [SpreadsheetApp.Range]"
            },
            "removeRange": {
                "!doc": "Removes the specified Range from the chart represented by this builder. Will not throw an error\n if the Range is not in this chart.\n\n The range removed must match up with a range added via addRange(range), or it will\n not be removed, and it will not throw an exception. This method cannot be used to partially\n remove values from a range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var firstRange = sheet.getRange(&quot;A1:B5&quot;);\n var secondRange = sheet.getRange(&quot;A6:B8&quot;);\n\n var chartBuilder = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(firstRange)\n     \/\/ This range will render in a different color\n     .addRange(secondRange)\n     .setPosition(5, 5, 0, 0);\n\n \/\/ Note that you can use either of these two formats, but the range\n \/\/ MUST match up with a range that was added via addRange(), or it\n \/\/ will not be removed, and will not throw an exception\n chartBuilder.removeRange(firstRange);\n chartBuilder.removeRange(sheet.getRange(&quot;A6:B8&quot;));\n\n var chart = chartBuilder.build();\n\n sheet.insertChart(chart);\n  ",
                "!type": "fn(range: SpreadsheetApp.Range) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "reverseCategories": {
                "!doc": "Reverses the drawing of series in the domain axis.  For vertical-range charts (such as line,\n area or column charts), this means the horizontal axis is drawn from right to left.  For\n horizontal-range charts (such as bar charts), this means the vertical axis is drawn from top\n to bottom.  For pie charts, this means the slices are drawn counterclockwise.\n\n \n \n \/\/ Creates a pie chart builder and sets drawing of the slices in a counter-clockwise manner.\n var builder = Charts.newPieChart();\n builder.reverseCategories();\n ",
                "!type": "fn() -> SpreadsheetApp.EmbeddedAreaChartBuilder"
            },
            "setBackgroundColor": {
                "!doc": "Sets the background color for the chart.\n\n \n \n \/\/ Creates a line chart builder and sets the background color to gray\n var builder = Charts.newLineChart();\n builder.setBackgroundColor(&quot;gray&quot;);\n ",
                "!type": "fn(cssValue: string) -> SpreadsheetApp.EmbeddedAreaChartBuilder"
            },
            "setChartType": {
                "!doc": "Changes the type of chart. Not all embedded chart types are currently supported. See\n ChartType.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;A1:B5&quot;);\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(range)\n     .setPosition(5, 5, 0, 0)\n     .build()\n\n sheet.insertChart(chart);\n ",
                "!type": "fn(type: Charts.ChartType) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "setColors": {
                "!doc": "Sets the colors for the lines in the chart.\n\n \n \n \/\/ Creates a line chart builder and sets the first two lines to be drawn in green and red,\n \/\/ respectively.\n var builder = Charts.newLineChart();\n builder.setColors([&quot;green&quot;, &quot;red&quot;]);\n ",
                "!type": "fn(cssValues: [string]) -> SpreadsheetApp.EmbeddedAreaChartBuilder"
            },
            "setLegendPosition": {
                "!doc": "Sets the position of the legend with respect to the chart.  By default, there will be no\n legend.\n\n \n \n \/\/ Creates a line chart builder and sets the legend position to right.\n var builder = Charts.newLineChart();\n builder.setLegendPosition(Charts.Position.RIGHT);\n ",
                "!type": "fn(position: Charts.Position) -> SpreadsheetApp.EmbeddedAreaChartBuilder"
            },
            "setLegendTextStyle": {
                "!doc": "Sets the text style of the chart legend.\n\n \n \n \/\/ Creates a line chart builder and sets it up for a  blue, 26-point legend.\n var textStyleBuilder = Charts.newTextStyle().setColor(&#39;#0000FF&#39;).setFontSize(26);\n var style = textStyleBuilder.build();\n var builder = Charts.newLineChart();\n builder.setLegendTextStyle(style);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> SpreadsheetApp.EmbeddedAreaChartBuilder"
            },
            "setOption": {
                "!doc": "Sets advanced options for this chart. See\n \n https:\/\/developers.google.com\/chart\/interactive\/docs\/reference for what\n options are available.\n\n This method will NOT validate the option you specify is valid for this\n chart type nor if the value is of the correct format\/structure.\n\n This example shows how to change the animation duration to 1 second and\n set a legend.\n\n \n \n builder.setOption(&#39;title&#39;, &#39;Earnings projections&#39;);\n builder.setOption(&#39;animation.duration&#39;, 1000);\n builder.setOption(&#39;legend&#39;, {position: &#39;top&#39;, textStyle: {color: &#39;blue&#39;, fontSize: 16}});\n ",
                "!type": "fn(option: string, value: object) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "setPointStyle": {
                "!doc": "Sets the style for points in the line.  By default, points will have no particular styles,\n and only the line will be visible.\n\n \n \n \/\/ Creates a line chart builder and sets large point style.\n var builder = Charts.newLineChart();\n builder.setPointStyle(Charts.PointStyle.LARGE);\n ",
                "!type": "fn(style: Charts.PointStyle) -> SpreadsheetApp.EmbeddedAreaChartBuilder"
            },
            "setPosition": {
                "!doc": "Sets the position, changing where the chart appears on the sheet. AnchorRowPos and AnchorColPos\n are 1-indexed.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;A1:B5&quot;);\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(range)\n     .setPosition(5, 5, 0, 0)\n     .build()\n\n sheet.insertChart(chart);\n ",
                "!type": "fn(anchorRowPos: number, anchorColPos: number, offsetX: number, offsetY: number) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "setRange": {
                "!doc": "Sets the range for the chart.\n \n If any data points fall outside the range, the range will be expanded to include those data\n points.",
                "!type": "fn(start: number, end: number) -> SpreadsheetApp.EmbeddedAreaChartBuilder"
            },
            "setStacked": {
                "!doc": "Uses stacked lines, meaning that line and bar values are stacked (accumulated).  By default,\n there is no stacking.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedAreaChartBuilder"
            },
            "setTitle": {
                "!doc": "Sets the title of the chart.  The title will be displayed centered above the chart.\n\n \n \n \/\/ Creates a line chart builder and title to &#39;My Line Chart&#39;.\n var builder = Charts.newLineChart();\n builder.setTitle(&#39;My Line Chart&#39;)\n ",
                "!type": "fn(chartTitle: string) -> SpreadsheetApp.EmbeddedAreaChartBuilder"
            },
            "setTitleTextStyle": {
                "!doc": "Sets the text style of the chart title.\n\n \n \n \/\/ Creates a line chart builder and sets it up for a  blue, 26-point title.\n var textStyleBuilder = Charts.newTextStyle().setColor(&#39;#0000FF&#39;).setFontSize(26);\n var style = textStyleBuilder.build();\n var builder = Charts.newLineChart();\n builder.setTitleTextStyle(style);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> SpreadsheetApp.EmbeddedAreaChartBuilder"
            },
            "setXAxisTextStyle": {
                "!doc": "Sets the horizontal axis text style.\n\n \n \n \/\/ Creates a line chart builder and sets the X-axis text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setXAxisTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> SpreadsheetApp.EmbeddedAreaChartBuilder"
            },
            "setXAxisTitle": {
                "!doc": "Adds a title to the horizontal axis.  The title will be centered and will appear below\n the axis value labels.\n\n \n \n \/\/ Creates a line chart builder and sets the X-axis title.\n var builder = Charts.newLineChart();\n builder.setTitle(&#39;X-axis Title&#39;)\n ",
                "!type": "fn(title: string) -> SpreadsheetApp.EmbeddedAreaChartBuilder"
            },
            "setXAxisTitleTextStyle": {
                "!doc": "Sets the horizontal axis title text style.\n\n \n \n \/\/ Creates a line chart builder and sets the X-axis title text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setXAxisTitleTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> SpreadsheetApp.EmbeddedAreaChartBuilder"
            },
            "setYAxisTextStyle": {
                "!doc": "Sets the vertical axis text style.\n\n \n \n \/\/ Creates a line chart builder and sets the Y-axis text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setYAxisTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> SpreadsheetApp.EmbeddedAreaChartBuilder"
            },
            "setYAxisTitle": {
                "!doc": "Adds a title to the vertical axis.  The title will be centered and will appear to the\n left of the value labels.\n\n \n \n \/\/ Creates a line chart builder and sets the Y-axis title.\n var builder = Charts.newLineChart();\n builder.setYAxisTitle(&#39;Y-axis Title&#39;)\n ",
                "!type": "fn(title: string) -> SpreadsheetApp.EmbeddedAreaChartBuilder"
            },
            "setYAxisTitleTextStyle": {
                "!doc": "Sets the vertical axis title text style.\n\n \n \n \/\/ Creates a line chart builder and sets the Y-axis title text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setYAxisTitleTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> SpreadsheetApp.EmbeddedAreaChartBuilder"
            },
            "useLogScale": {
                "!doc": "Makes the range axis into a logarithmic scale (requires all values to be positive).  The range\n axis will be the vertical axis for vertical charts (line, area, column, etc.) and the\n horizontal axis for horizontal charts (bar, etc.)",
                "!type": "fn() -> SpreadsheetApp.EmbeddedAreaChartBuilder"
            }
        },
        "SpreadsheetApp.EmbeddedBarChartBuilder": {
            "addRange": {
                "!doc": "Adds a Range to the chart represented by this builder. Will not add the Range\n if it has already been added to the chart.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(sheet.getRange(&quot;A1:B8&quot;))\n     .setPosition(5, 5, 0, 0)\n     .build();\n\n sheet.insertChart(chart);\n ",
                "!type": "fn(range: SpreadsheetApp.Range) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "asAreaChart": {
                "!doc": "Sets the chart type to AreaChart and returns an EmbeddedAreaChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedAreaChartBuilder"
            },
            "asBarChart": {
                "!doc": "Sets the chart type to BarChart and returns an EmbeddedBarChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedBarChartBuilder"
            },
            "asColumnChart": {
                "!doc": "Sets the chart type to ColumnChart and returns an EmbeddedColumnChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedColumnChartBuilder"
            },
            "asLineChart": {
                "!doc": "Sets the chart type to LineChart and returns an EmbeddedLineChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedLineChartBuilder"
            },
            "asPieChart": {
                "!doc": "Sets the chart type to PieChart and returns an EmbeddedPieChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedPieChartBuilder"
            },
            "asScatterChart": {
                "!doc": "Sets the chart type to ScatterChart and returns an EmbeddedScatterChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedScatterChartBuilder"
            },
            "asTableChart": {
                "!doc": "Sets the chart type to TableChart and returns an EmbeddedTableChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedTableChartBuilder"
            },
            "build": {
                "!doc": "Builds the chart to reflect all changes made to it.\n\n This method will not automatically draw the chart on top of the spreadsheet. A new chart\n must be inserted via sheet.insertChart(chart), and an existing chart should be updated via\n sheet.update(chart);\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;A1:B5&quot;);\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(range)\n     .setPosition(5, 5, 0, 0)\n     .build()\n\n sheet.insertChart(chart);\n ",
                "!type": "fn() -> SpreadsheetApp.EmbeddedChart"
            },
            "getChartType": {
                "!doc": "Returns the current chart type.",
                "!type": "fn() -> Charts.ChartType"
            },
            "getContainer": {
                "!doc": "Return the ContainerInfo, which encapsulates where the chart appears on the sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var chartBuilder = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(sheet.getRange(&quot;A1:B8&quot;))\n     .setPosition(5, 5, 0, 0);\n\n \/\/ This method returns the exact same data as Chart#getContainerInfo()\n var containerInfo = chartBuilder.getContainer();\n\n \/\/ Logs the values we used in setPosition()\n Logger.log(&quot;Anchor Column: %s\\r\\nAnchor Row %s\\r\\nOffset X %s\\r\\nOffset Y %s&quot;,\n           containerInfo.getAnchorColumn(),\n           containerInfo.getAnchorRow(),\n           containerInfo.getOffsetX(),\n           containerInfo.getOffsetY());\n ",
                "!type": "fn() -> SpreadsheetApp.ContainerInfo"
            },
            "getRanges": {
                "!doc": "Returns a copy of the list of ranges currently providing data for this chart. Use addRange and\n removeRange to modify this list.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var chartBuilder = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(sheet.getRange(&quot;A1:B8&quot;))\n     .setPosition(5, 5, 0, 0)\n\n var ranges = chartBuilder.getRanges();\n\n \/\/ There&#39;s only one range as a data source for this chart,\n \/\/ so this logs &quot;A1:B8&quot;\n for (var i in ranges) {\n   var range = ranges[i];\n   Logger.log(range.getA1Notation());\n }\n ",
                "!type": "fn() -> [SpreadsheetApp.Range]"
            },
            "removeRange": {
                "!doc": "Removes the specified Range from the chart represented by this builder. Will not throw an error\n if the Range is not in this chart.\n\n The range removed must match up with a range added via addRange(range), or it will\n not be removed, and it will not throw an exception. This method cannot be used to partially\n remove values from a range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var firstRange = sheet.getRange(&quot;A1:B5&quot;);\n var secondRange = sheet.getRange(&quot;A6:B8&quot;);\n\n var chartBuilder = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(firstRange)\n     \/\/ This range will render in a different color\n     .addRange(secondRange)\n     .setPosition(5, 5, 0, 0);\n\n \/\/ Note that you can use either of these two formats, but the range\n \/\/ MUST match up with a range that was added via addRange(), or it\n \/\/ will not be removed, and will not throw an exception\n chartBuilder.removeRange(firstRange);\n chartBuilder.removeRange(sheet.getRange(&quot;A6:B8&quot;));\n\n var chart = chartBuilder.build();\n\n sheet.insertChart(chart);\n  ",
                "!type": "fn(range: SpreadsheetApp.Range) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "reverseCategories": {
                "!doc": "Reverses the drawing of series in the domain axis.  For vertical-range charts (such as line,\n area or column charts), this means the horizontal axis is drawn from right to left.  For\n horizontal-range charts (such as bar charts), this means the vertical axis is drawn from top\n to bottom.  For pie charts, this means the slices are drawn counterclockwise.\n\n \n \n \/\/ Creates a pie chart builder and sets drawing of the slices in a counter-clockwise manner.\n var builder = Charts.newPieChart();\n builder.reverseCategories();\n ",
                "!type": "fn() -> SpreadsheetApp.EmbeddedBarChartBuilder"
            },
            "reverseDirection": {
                "!doc": "Reverses the direction in which the bars grow along the horizontal axis.  By default, values\n grow from left to right.  Calling this method will cause them to grow from right to left.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedBarChartBuilder"
            },
            "setBackgroundColor": {
                "!doc": "Sets the background color for the chart.\n\n \n \n \/\/ Creates a line chart builder and sets the background color to gray\n var builder = Charts.newLineChart();\n builder.setBackgroundColor(&quot;gray&quot;);\n ",
                "!type": "fn(cssValue: string) -> SpreadsheetApp.EmbeddedBarChartBuilder"
            },
            "setChartType": {
                "!doc": "Changes the type of chart. Not all embedded chart types are currently supported. See\n ChartType.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;A1:B5&quot;);\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(range)\n     .setPosition(5, 5, 0, 0)\n     .build()\n\n sheet.insertChart(chart);\n ",
                "!type": "fn(type: Charts.ChartType) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "setColors": {
                "!doc": "Sets the colors for the lines in the chart.\n\n \n \n \/\/ Creates a line chart builder and sets the first two lines to be drawn in green and red,\n \/\/ respectively.\n var builder = Charts.newLineChart();\n builder.setColors([&quot;green&quot;, &quot;red&quot;]);\n ",
                "!type": "fn(cssValues: [string]) -> SpreadsheetApp.EmbeddedBarChartBuilder"
            },
            "setLegendPosition": {
                "!doc": "Sets the position of the legend with respect to the chart.  By default, there will be no\n legend.\n\n \n \n \/\/ Creates a line chart builder and sets the legend position to right.\n var builder = Charts.newLineChart();\n builder.setLegendPosition(Charts.Position.RIGHT);\n ",
                "!type": "fn(position: Charts.Position) -> SpreadsheetApp.EmbeddedBarChartBuilder"
            },
            "setLegendTextStyle": {
                "!doc": "Sets the text style of the chart legend.\n\n \n \n \/\/ Creates a line chart builder and sets it up for a  blue, 26-point legend.\n var textStyleBuilder = Charts.newTextStyle().setColor(&#39;#0000FF&#39;).setFontSize(26);\n var style = textStyleBuilder.build();\n var builder = Charts.newLineChart();\n builder.setLegendTextStyle(style);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> SpreadsheetApp.EmbeddedBarChartBuilder"
            },
            "setOption": {
                "!doc": "Sets advanced options for this chart. See\n \n https:\/\/developers.google.com\/chart\/interactive\/docs\/reference for what\n options are available.\n\n This method will NOT validate the option you specify is valid for this\n chart type nor if the value is of the correct format\/structure.\n\n This example shows how to change the animation duration to 1 second and\n set a legend.\n\n \n \n builder.setOption(&#39;title&#39;, &#39;Earnings projections&#39;);\n builder.setOption(&#39;animation.duration&#39;, 1000);\n builder.setOption(&#39;legend&#39;, {position: &#39;top&#39;, textStyle: {color: &#39;blue&#39;, fontSize: 16}});\n ",
                "!type": "fn(option: string, value: object) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "setPosition": {
                "!doc": "Sets the position, changing where the chart appears on the sheet. AnchorRowPos and AnchorColPos\n are 1-indexed.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;A1:B5&quot;);\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(range)\n     .setPosition(5, 5, 0, 0)\n     .build()\n\n sheet.insertChart(chart);\n ",
                "!type": "fn(anchorRowPos: number, anchorColPos: number, offsetX: number, offsetY: number) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "setRange": {
                "!doc": "Sets the range for the chart.\n \n If any data points fall outside the range, the range will be expanded to include those data\n points.",
                "!type": "fn(start: number, end: number) -> SpreadsheetApp.EmbeddedBarChartBuilder"
            },
            "setStacked": {
                "!doc": "Uses stacked lines, meaning that line and bar values are stacked (accumulated).  By default,\n there is no stacking.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedBarChartBuilder"
            },
            "setTitle": {
                "!doc": "Sets the title of the chart.  The title will be displayed centered above the chart.\n\n \n \n \/\/ Creates a line chart builder and title to &#39;My Line Chart&#39;.\n var builder = Charts.newLineChart();\n builder.setTitle(&#39;My Line Chart&#39;)\n ",
                "!type": "fn(chartTitle: string) -> SpreadsheetApp.EmbeddedBarChartBuilder"
            },
            "setTitleTextStyle": {
                "!doc": "Sets the text style of the chart title.\n\n \n \n \/\/ Creates a line chart builder and sets it up for a  blue, 26-point title.\n var textStyleBuilder = Charts.newTextStyle().setColor(&#39;#0000FF&#39;).setFontSize(26);\n var style = textStyleBuilder.build();\n var builder = Charts.newLineChart();\n builder.setTitleTextStyle(style);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> SpreadsheetApp.EmbeddedBarChartBuilder"
            },
            "setXAxisTextStyle": {
                "!doc": "Sets the horizontal axis text style.\n\n \n \n \/\/ Creates a line chart builder and sets the X-axis text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setXAxisTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> SpreadsheetApp.EmbeddedBarChartBuilder"
            },
            "setXAxisTitle": {
                "!doc": "Adds a title to the horizontal axis.  The title will be centered and will appear below\n the axis value labels.\n\n \n \n \/\/ Creates a line chart builder and sets the X-axis title.\n var builder = Charts.newLineChart();\n builder.setTitle(&#39;X-axis Title&#39;)\n ",
                "!type": "fn(title: string) -> SpreadsheetApp.EmbeddedBarChartBuilder"
            },
            "setXAxisTitleTextStyle": {
                "!doc": "Sets the horizontal axis title text style.\n\n \n \n \/\/ Creates a line chart builder and sets the X-axis title text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setXAxisTitleTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> SpreadsheetApp.EmbeddedBarChartBuilder"
            },
            "setYAxisTextStyle": {
                "!doc": "Sets the vertical axis text style.\n\n \n \n \/\/ Creates a line chart builder and sets the Y-axis text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setYAxisTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> SpreadsheetApp.EmbeddedBarChartBuilder"
            },
            "setYAxisTitle": {
                "!doc": "Adds a title to the vertical axis.  The title will be centered and will appear to the\n left of the value labels.\n\n \n \n \/\/ Creates a line chart builder and sets the Y-axis title.\n var builder = Charts.newLineChart();\n builder.setYAxisTitle(&#39;Y-axis Title&#39;)\n ",
                "!type": "fn(title: string) -> SpreadsheetApp.EmbeddedBarChartBuilder"
            },
            "setYAxisTitleTextStyle": {
                "!doc": "Sets the vertical axis title text style.\n\n \n \n \/\/ Creates a line chart builder and sets the Y-axis title text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setYAxisTitleTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> SpreadsheetApp.EmbeddedBarChartBuilder"
            },
            "useLogScale": {
                "!doc": "Makes the range axis into a logarithmic scale (requires all values to be positive).  The range\n axis will be the vertical axis for vertical charts (line, area, column, etc.) and the\n horizontal axis for horizontal charts (bar, etc.)",
                "!type": "fn() -> SpreadsheetApp.EmbeddedBarChartBuilder"
            }
        },
        "SpreadsheetApp.EmbeddedChart": {
            "getAs": {
                "!doc": "Return the data inside this object as a blob converted to the specified content type. This\n method adds the appropriate extension to the filename ? for example, \"myfile.pdf\". However, it\n assumes that the part of the filename that follows the last period (if any) is an existing\n extension that should be replaced. Consequently, \"ChristmasList.12.25.2014\" will become\n \"ChristmasList.12.25.pdf\".",
                "!type": "fn(contentType: string) -> Blob"
            },
            "getBlob": {
                "!doc": "Return the data inside this object as a blob.",
                "!type": "fn() -> Blob"
            },
            "getContainerInfo": {
                "!doc": "Returns information about where the chart is positioned within a sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(sheet.getRange(&quot;A1:B8&quot;))\n     .setPosition(5, 5, 0, 0)\n     .build();\n\n var containerInfo = chart.getContainerInfo();\n\n \/\/ Logs the values we used in setPosition()\n Logger.log(&quot;Anchor Column: %s\\r\\nAnchor Row %s\\r\\nOffset X %s\\r\\nOffset Y %s&quot;,\n           containerInfo.getAnchorColumn(),\n           containerInfo.getAnchorRow(),\n           containerInfo.getOffsetX(),\n           containerInfo.getOffsetY());\n ",
                "!type": "fn() -> SpreadsheetApp.ContainerInfo"
            },
            "getId": {
                "!doc": "Returns the id that has been assigned to this object.\n \n This can be used in conjunction with app.getElementById() to retrieve a reference to this\n object.",
                "!type": "fn() -> string"
            },
            "getOptions": {
                "!doc": "Returns the options for this chart, such as height, colors, axes, etc.\n \n The returned options are immutable.",
                "!type": "fn() -> Charts.ChartOptions"
            },
            "getRanges": {
                "!doc": "Returns the Ranges that this chart uses as a data source.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(sheet.getRange(&quot;A1:B8&quot;))\n     .setPosition(5, 5, 0, 0)\n     .build();\n\n var ranges = chart.getRanges();\n\n \/\/ There&#39;s only one range as a data source for this chart,\n \/\/ so this logs &quot;A1:B8&quot;\n for (var i in ranges) {\n   var range = ranges[i];\n   Logger.log(range.getA1Notation());\n }\n ",
                "!type": "fn() -> [SpreadsheetApp.Range]"
            },
            "getType": {
                "!doc": "Gets the type of this object.",
                "!type": "fn() -> string"
            },
            "modify": {
                "!doc": "Returns an EmbeddedChartBuilder that can be used to modify this chart. Remember to\n invoke sheet.updateChart(chart) to save your changes.\n\n \n \n var sheet = SpreadsheetApp.getActiveSheet();\n var chart = sheet.getCharts()[0];\n chart = chart.modify()\n     .setOption(&#39;width&#39;, 800)\n     .setOption(&#39;height&#39;, 640)\n     .setPosition(5, 5, 0, 0)\n     .build();\n sheet.updateChart(chart);\n ",
                "!type": "fn() -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "setId": {
                "!doc": "Sets the id of this EmbeddedChart to be used with UiApp.",
                "!type": "fn(id: string) -> Charts.Chart"
            }
        },
        "SpreadsheetApp.EmbeddedChartBuilder": {
            "addRange": {
                "!doc": "Adds a Range to the chart represented by this builder. Will not add the Range\n if it has already been added to the chart.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(sheet.getRange(&quot;A1:B8&quot;))\n     .setPosition(5, 5, 0, 0)\n     .build();\n\n sheet.insertChart(chart);\n ",
                "!type": "fn(range: SpreadsheetApp.Range) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "asAreaChart": {
                "!doc": "Sets the chart type to AreaChart and returns an EmbeddedAreaChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedAreaChartBuilder"
            },
            "asBarChart": {
                "!doc": "Sets the chart type to BarChart and returns an EmbeddedBarChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedBarChartBuilder"
            },
            "asColumnChart": {
                "!doc": "Sets the chart type to ColumnChart and returns an EmbeddedColumnChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedColumnChartBuilder"
            },
            "asLineChart": {
                "!doc": "Sets the chart type to LineChart and returns an EmbeddedLineChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedLineChartBuilder"
            },
            "asPieChart": {
                "!doc": "Sets the chart type to PieChart and returns an EmbeddedPieChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedPieChartBuilder"
            },
            "asScatterChart": {
                "!doc": "Sets the chart type to ScatterChart and returns an EmbeddedScatterChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedScatterChartBuilder"
            },
            "asTableChart": {
                "!doc": "Sets the chart type to TableChart and returns an EmbeddedTableChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedTableChartBuilder"
            },
            "build": {
                "!doc": "Builds the chart to reflect all changes made to it.\n\n This method will not automatically draw the chart on top of the spreadsheet. A new chart\n must be inserted via sheet.insertChart(chart), and an existing chart should be updated via\n sheet.update(chart);\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;A1:B5&quot;);\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(range)\n     .setPosition(5, 5, 0, 0)\n     .build()\n\n sheet.insertChart(chart);\n ",
                "!type": "fn() -> SpreadsheetApp.EmbeddedChart"
            },
            "getChartType": {
                "!doc": "Returns the current chart type.",
                "!type": "fn() -> Charts.ChartType"
            },
            "getContainer": {
                "!doc": "Return the ContainerInfo, which encapsulates where the chart appears on the sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var chartBuilder = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(sheet.getRange(&quot;A1:B8&quot;))\n     .setPosition(5, 5, 0, 0);\n\n \/\/ This method returns the exact same data as Chart#getContainerInfo()\n var containerInfo = chartBuilder.getContainer();\n\n \/\/ Logs the values we used in setPosition()\n Logger.log(&quot;Anchor Column: %s\\r\\nAnchor Row %s\\r\\nOffset X %s\\r\\nOffset Y %s&quot;,\n           containerInfo.getAnchorColumn(),\n           containerInfo.getAnchorRow(),\n           containerInfo.getOffsetX(),\n           containerInfo.getOffsetY());\n ",
                "!type": "fn() -> SpreadsheetApp.ContainerInfo"
            },
            "getRanges": {
                "!doc": "Returns a copy of the list of ranges currently providing data for this chart. Use addRange and\n removeRange to modify this list.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var chartBuilder = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(sheet.getRange(&quot;A1:B8&quot;))\n     .setPosition(5, 5, 0, 0)\n\n var ranges = chartBuilder.getRanges();\n\n \/\/ There&#39;s only one range as a data source for this chart,\n \/\/ so this logs &quot;A1:B8&quot;\n for (var i in ranges) {\n   var range = ranges[i];\n   Logger.log(range.getA1Notation());\n }\n ",
                "!type": "fn() -> [SpreadsheetApp.Range]"
            },
            "removeRange": {
                "!doc": "Removes the specified Range from the chart represented by this builder. Will not throw an error\n if the Range is not in this chart.\n\n The range removed must match up with a range added via addRange(range), or it will\n not be removed, and it will not throw an exception. This method cannot be used to partially\n remove values from a range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var firstRange = sheet.getRange(&quot;A1:B5&quot;);\n var secondRange = sheet.getRange(&quot;A6:B8&quot;);\n\n var chartBuilder = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(firstRange)\n     \/\/ This range will render in a different color\n     .addRange(secondRange)\n     .setPosition(5, 5, 0, 0);\n\n \/\/ Note that you can use either of these two formats, but the range\n \/\/ MUST match up with a range that was added via addRange(), or it\n \/\/ will not be removed, and will not throw an exception\n chartBuilder.removeRange(firstRange);\n chartBuilder.removeRange(sheet.getRange(&quot;A6:B8&quot;));\n\n var chart = chartBuilder.build();\n\n sheet.insertChart(chart);\n  ",
                "!type": "fn(range: SpreadsheetApp.Range) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "setChartType": {
                "!doc": "Changes the type of chart. Not all embedded chart types are currently supported. See\n ChartType.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;A1:B5&quot;);\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(range)\n     .setPosition(5, 5, 0, 0)\n     .build()\n\n sheet.insertChart(chart);\n ",
                "!type": "fn(type: Charts.ChartType) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "setOption": {
                "!doc": "Sets advanced options for this chart. See\n \n https:\/\/developers.google.com\/chart\/interactive\/docs\/reference for what\n options are available.\n\n This method will NOT validate the option you specify is valid for this\n chart type nor if the value is of the correct format\/structure.\n\n This example shows how to change the animation duration to 1 second and\n set a legend.\n\n \n \n builder.setOption(&#39;title&#39;, &#39;Earnings projections&#39;);\n builder.setOption(&#39;animation.duration&#39;, 1000);\n builder.setOption(&#39;legend&#39;, {position: &#39;top&#39;, textStyle: {color: &#39;blue&#39;, fontSize: 16}});\n ",
                "!type": "fn(option: string, value: object) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "setPosition": {
                "!doc": "Sets the position, changing where the chart appears on the sheet. AnchorRowPos and AnchorColPos\n are 1-indexed.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;A1:B5&quot;);\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(range)\n     .setPosition(5, 5, 0, 0)\n     .build()\n\n sheet.insertChart(chart);\n ",
                "!type": "fn(anchorRowPos: number, anchorColPos: number, offsetX: number, offsetY: number) -> SpreadsheetApp.EmbeddedChartBuilder"
            }
        },
        "SpreadsheetApp.EmbeddedColumnChartBuilder": {
            "addRange": {
                "!doc": "Adds a Range to the chart represented by this builder. Will not add the Range\n if it has already been added to the chart.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(sheet.getRange(&quot;A1:B8&quot;))\n     .setPosition(5, 5, 0, 0)\n     .build();\n\n sheet.insertChart(chart);\n ",
                "!type": "fn(range: SpreadsheetApp.Range) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "asAreaChart": {
                "!doc": "Sets the chart type to AreaChart and returns an EmbeddedAreaChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedAreaChartBuilder"
            },
            "asBarChart": {
                "!doc": "Sets the chart type to BarChart and returns an EmbeddedBarChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedBarChartBuilder"
            },
            "asColumnChart": {
                "!doc": "Sets the chart type to ColumnChart and returns an EmbeddedColumnChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedColumnChartBuilder"
            },
            "asLineChart": {
                "!doc": "Sets the chart type to LineChart and returns an EmbeddedLineChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedLineChartBuilder"
            },
            "asPieChart": {
                "!doc": "Sets the chart type to PieChart and returns an EmbeddedPieChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedPieChartBuilder"
            },
            "asScatterChart": {
                "!doc": "Sets the chart type to ScatterChart and returns an EmbeddedScatterChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedScatterChartBuilder"
            },
            "asTableChart": {
                "!doc": "Sets the chart type to TableChart and returns an EmbeddedTableChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedTableChartBuilder"
            },
            "build": {
                "!doc": "Builds the chart to reflect all changes made to it.\n\n This method will not automatically draw the chart on top of the spreadsheet. A new chart\n must be inserted via sheet.insertChart(chart), and an existing chart should be updated via\n sheet.update(chart);\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;A1:B5&quot;);\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(range)\n     .setPosition(5, 5, 0, 0)\n     .build()\n\n sheet.insertChart(chart);\n ",
                "!type": "fn() -> SpreadsheetApp.EmbeddedChart"
            },
            "getChartType": {
                "!doc": "Returns the current chart type.",
                "!type": "fn() -> Charts.ChartType"
            },
            "getContainer": {
                "!doc": "Return the ContainerInfo, which encapsulates where the chart appears on the sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var chartBuilder = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(sheet.getRange(&quot;A1:B8&quot;))\n     .setPosition(5, 5, 0, 0);\n\n \/\/ This method returns the exact same data as Chart#getContainerInfo()\n var containerInfo = chartBuilder.getContainer();\n\n \/\/ Logs the values we used in setPosition()\n Logger.log(&quot;Anchor Column: %s\\r\\nAnchor Row %s\\r\\nOffset X %s\\r\\nOffset Y %s&quot;,\n           containerInfo.getAnchorColumn(),\n           containerInfo.getAnchorRow(),\n           containerInfo.getOffsetX(),\n           containerInfo.getOffsetY());\n ",
                "!type": "fn() -> SpreadsheetApp.ContainerInfo"
            },
            "getRanges": {
                "!doc": "Returns a copy of the list of ranges currently providing data for this chart. Use addRange and\n removeRange to modify this list.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var chartBuilder = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(sheet.getRange(&quot;A1:B8&quot;))\n     .setPosition(5, 5, 0, 0)\n\n var ranges = chartBuilder.getRanges();\n\n \/\/ There&#39;s only one range as a data source for this chart,\n \/\/ so this logs &quot;A1:B8&quot;\n for (var i in ranges) {\n   var range = ranges[i];\n   Logger.log(range.getA1Notation());\n }\n ",
                "!type": "fn() -> [SpreadsheetApp.Range]"
            },
            "removeRange": {
                "!doc": "Removes the specified Range from the chart represented by this builder. Will not throw an error\n if the Range is not in this chart.\n\n The range removed must match up with a range added via addRange(range), or it will\n not be removed, and it will not throw an exception. This method cannot be used to partially\n remove values from a range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var firstRange = sheet.getRange(&quot;A1:B5&quot;);\n var secondRange = sheet.getRange(&quot;A6:B8&quot;);\n\n var chartBuilder = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(firstRange)\n     \/\/ This range will render in a different color\n     .addRange(secondRange)\n     .setPosition(5, 5, 0, 0);\n\n \/\/ Note that you can use either of these two formats, but the range\n \/\/ MUST match up with a range that was added via addRange(), or it\n \/\/ will not be removed, and will not throw an exception\n chartBuilder.removeRange(firstRange);\n chartBuilder.removeRange(sheet.getRange(&quot;A6:B8&quot;));\n\n var chart = chartBuilder.build();\n\n sheet.insertChart(chart);\n  ",
                "!type": "fn(range: SpreadsheetApp.Range) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "reverseCategories": {
                "!doc": "Reverses the drawing of series in the domain axis.  For vertical-range charts (such as line,\n area or column charts), this means the horizontal axis is drawn from right to left.  For\n horizontal-range charts (such as bar charts), this means the vertical axis is drawn from top\n to bottom.  For pie charts, this means the slices are drawn counterclockwise.\n\n \n \n \/\/ Creates a pie chart builder and sets drawing of the slices in a counter-clockwise manner.\n var builder = Charts.newPieChart();\n builder.reverseCategories();\n ",
                "!type": "fn() -> SpreadsheetApp.EmbeddedColumnChartBuilder"
            },
            "setBackgroundColor": {
                "!doc": "Sets the background color for the chart.\n\n \n \n \/\/ Creates a line chart builder and sets the background color to gray\n var builder = Charts.newLineChart();\n builder.setBackgroundColor(&quot;gray&quot;);\n ",
                "!type": "fn(cssValue: string) -> SpreadsheetApp.EmbeddedColumnChartBuilder"
            },
            "setChartType": {
                "!doc": "Changes the type of chart. Not all embedded chart types are currently supported. See\n ChartType.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;A1:B5&quot;);\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(range)\n     .setPosition(5, 5, 0, 0)\n     .build()\n\n sheet.insertChart(chart);\n ",
                "!type": "fn(type: Charts.ChartType) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "setColors": {
                "!doc": "Sets the colors for the lines in the chart.\n\n \n \n \/\/ Creates a line chart builder and sets the first two lines to be drawn in green and red,\n \/\/ respectively.\n var builder = Charts.newLineChart();\n builder.setColors([&quot;green&quot;, &quot;red&quot;]);\n ",
                "!type": "fn(cssValues: [string]) -> SpreadsheetApp.EmbeddedColumnChartBuilder"
            },
            "setLegendPosition": {
                "!doc": "Sets the position of the legend with respect to the chart.  By default, there will be no\n legend.\n\n \n \n \/\/ Creates a line chart builder and sets the legend position to right.\n var builder = Charts.newLineChart();\n builder.setLegendPosition(Charts.Position.RIGHT);\n ",
                "!type": "fn(position: Charts.Position) -> SpreadsheetApp.EmbeddedColumnChartBuilder"
            },
            "setLegendTextStyle": {
                "!doc": "Sets the text style of the chart legend.\n\n \n \n \/\/ Creates a line chart builder and sets it up for a  blue, 26-point legend.\n var textStyleBuilder = Charts.newTextStyle().setColor(&#39;#0000FF&#39;).setFontSize(26);\n var style = textStyleBuilder.build();\n var builder = Charts.newLineChart();\n builder.setLegendTextStyle(style);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> SpreadsheetApp.EmbeddedColumnChartBuilder"
            },
            "setOption": {
                "!doc": "Sets advanced options for this chart. See\n \n https:\/\/developers.google.com\/chart\/interactive\/docs\/reference for what\n options are available.\n\n This method will NOT validate the option you specify is valid for this\n chart type nor if the value is of the correct format\/structure.\n\n This example shows how to change the animation duration to 1 second and\n set a legend.\n\n \n \n builder.setOption(&#39;title&#39;, &#39;Earnings projections&#39;);\n builder.setOption(&#39;animation.duration&#39;, 1000);\n builder.setOption(&#39;legend&#39;, {position: &#39;top&#39;, textStyle: {color: &#39;blue&#39;, fontSize: 16}});\n ",
                "!type": "fn(option: string, value: object) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "setPosition": {
                "!doc": "Sets the position, changing where the chart appears on the sheet. AnchorRowPos and AnchorColPos\n are 1-indexed.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;A1:B5&quot;);\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(range)\n     .setPosition(5, 5, 0, 0)\n     .build()\n\n sheet.insertChart(chart);\n ",
                "!type": "fn(anchorRowPos: number, anchorColPos: number, offsetX: number, offsetY: number) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "setRange": {
                "!doc": "Sets the range for the chart.\n \n If any data points fall outside the range, the range will be expanded to include those data\n points.",
                "!type": "fn(start: number, end: number) -> SpreadsheetApp.EmbeddedColumnChartBuilder"
            },
            "setStacked": {
                "!doc": "Uses stacked lines, meaning that line and bar values are stacked (accumulated).  By default,\n there is no stacking.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedColumnChartBuilder"
            },
            "setTitle": {
                "!doc": "Sets the title of the chart.  The title will be displayed centered above the chart.\n\n \n \n \/\/ Creates a line chart builder and title to &#39;My Line Chart&#39;.\n var builder = Charts.newLineChart();\n builder.setTitle(&#39;My Line Chart&#39;)\n ",
                "!type": "fn(chartTitle: string) -> SpreadsheetApp.EmbeddedColumnChartBuilder"
            },
            "setTitleTextStyle": {
                "!doc": "Sets the text style of the chart title.\n\n \n \n \/\/ Creates a line chart builder and sets it up for a  blue, 26-point title.\n var textStyleBuilder = Charts.newTextStyle().setColor(&#39;#0000FF&#39;).setFontSize(26);\n var style = textStyleBuilder.build();\n var builder = Charts.newLineChart();\n builder.setTitleTextStyle(style);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> SpreadsheetApp.EmbeddedColumnChartBuilder"
            },
            "setXAxisTextStyle": {
                "!doc": "Sets the horizontal axis text style.\n\n \n \n \/\/ Creates a line chart builder and sets the X-axis text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setXAxisTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> SpreadsheetApp.EmbeddedColumnChartBuilder"
            },
            "setXAxisTitle": {
                "!doc": "Adds a title to the horizontal axis.  The title will be centered and will appear below\n the axis value labels.\n\n \n \n \/\/ Creates a line chart builder and sets the X-axis title.\n var builder = Charts.newLineChart();\n builder.setTitle(&#39;X-axis Title&#39;)\n ",
                "!type": "fn(title: string) -> SpreadsheetApp.EmbeddedColumnChartBuilder"
            },
            "setXAxisTitleTextStyle": {
                "!doc": "Sets the horizontal axis title text style.\n\n \n \n \/\/ Creates a line chart builder and sets the X-axis title text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setXAxisTitleTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> SpreadsheetApp.EmbeddedColumnChartBuilder"
            },
            "setYAxisTextStyle": {
                "!doc": "Sets the vertical axis text style.\n\n \n \n \/\/ Creates a line chart builder and sets the Y-axis text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setYAxisTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> SpreadsheetApp.EmbeddedColumnChartBuilder"
            },
            "setYAxisTitle": {
                "!doc": "Adds a title to the vertical axis.  The title will be centered and will appear to the\n left of the value labels.\n\n \n \n \/\/ Creates a line chart builder and sets the Y-axis title.\n var builder = Charts.newLineChart();\n builder.setYAxisTitle(&#39;Y-axis Title&#39;)\n ",
                "!type": "fn(title: string) -> SpreadsheetApp.EmbeddedColumnChartBuilder"
            },
            "setYAxisTitleTextStyle": {
                "!doc": "Sets the vertical axis title text style.\n\n \n \n \/\/ Creates a line chart builder and sets the Y-axis title text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setYAxisTitleTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> SpreadsheetApp.EmbeddedColumnChartBuilder"
            },
            "useLogScale": {
                "!doc": "Makes the range axis into a logarithmic scale (requires all values to be positive).  The range\n axis will be the vertical axis for vertical charts (line, area, column, etc.) and the\n horizontal axis for horizontal charts (bar, etc.)",
                "!type": "fn() -> SpreadsheetApp.EmbeddedColumnChartBuilder"
            }
        },
        "SpreadsheetApp.EmbeddedLineChartBuilder": {
            "addRange": {
                "!doc": "Adds a Range to the chart represented by this builder. Will not add the Range\n if it has already been added to the chart.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(sheet.getRange(&quot;A1:B8&quot;))\n     .setPosition(5, 5, 0, 0)\n     .build();\n\n sheet.insertChart(chart);\n ",
                "!type": "fn(range: SpreadsheetApp.Range) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "asAreaChart": {
                "!doc": "Sets the chart type to AreaChart and returns an EmbeddedAreaChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedAreaChartBuilder"
            },
            "asBarChart": {
                "!doc": "Sets the chart type to BarChart and returns an EmbeddedBarChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedBarChartBuilder"
            },
            "asColumnChart": {
                "!doc": "Sets the chart type to ColumnChart and returns an EmbeddedColumnChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedColumnChartBuilder"
            },
            "asLineChart": {
                "!doc": "Sets the chart type to LineChart and returns an EmbeddedLineChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedLineChartBuilder"
            },
            "asPieChart": {
                "!doc": "Sets the chart type to PieChart and returns an EmbeddedPieChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedPieChartBuilder"
            },
            "asScatterChart": {
                "!doc": "Sets the chart type to ScatterChart and returns an EmbeddedScatterChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedScatterChartBuilder"
            },
            "asTableChart": {
                "!doc": "Sets the chart type to TableChart and returns an EmbeddedTableChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedTableChartBuilder"
            },
            "build": {
                "!doc": "Builds the chart to reflect all changes made to it.\n\n This method will not automatically draw the chart on top of the spreadsheet. A new chart\n must be inserted via sheet.insertChart(chart), and an existing chart should be updated via\n sheet.update(chart);\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;A1:B5&quot;);\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(range)\n     .setPosition(5, 5, 0, 0)\n     .build()\n\n sheet.insertChart(chart);\n ",
                "!type": "fn() -> SpreadsheetApp.EmbeddedChart"
            },
            "getChartType": {
                "!doc": "Returns the current chart type.",
                "!type": "fn() -> Charts.ChartType"
            },
            "getContainer": {
                "!doc": "Return the ContainerInfo, which encapsulates where the chart appears on the sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var chartBuilder = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(sheet.getRange(&quot;A1:B8&quot;))\n     .setPosition(5, 5, 0, 0);\n\n \/\/ This method returns the exact same data as Chart#getContainerInfo()\n var containerInfo = chartBuilder.getContainer();\n\n \/\/ Logs the values we used in setPosition()\n Logger.log(&quot;Anchor Column: %s\\r\\nAnchor Row %s\\r\\nOffset X %s\\r\\nOffset Y %s&quot;,\n           containerInfo.getAnchorColumn(),\n           containerInfo.getAnchorRow(),\n           containerInfo.getOffsetX(),\n           containerInfo.getOffsetY());\n ",
                "!type": "fn() -> SpreadsheetApp.ContainerInfo"
            },
            "getRanges": {
                "!doc": "Returns a copy of the list of ranges currently providing data for this chart. Use addRange and\n removeRange to modify this list.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var chartBuilder = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(sheet.getRange(&quot;A1:B8&quot;))\n     .setPosition(5, 5, 0, 0)\n\n var ranges = chartBuilder.getRanges();\n\n \/\/ There&#39;s only one range as a data source for this chart,\n \/\/ so this logs &quot;A1:B8&quot;\n for (var i in ranges) {\n   var range = ranges[i];\n   Logger.log(range.getA1Notation());\n }\n ",
                "!type": "fn() -> [SpreadsheetApp.Range]"
            },
            "removeRange": {
                "!doc": "Removes the specified Range from the chart represented by this builder. Will not throw an error\n if the Range is not in this chart.\n\n The range removed must match up with a range added via addRange(range), or it will\n not be removed, and it will not throw an exception. This method cannot be used to partially\n remove values from a range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var firstRange = sheet.getRange(&quot;A1:B5&quot;);\n var secondRange = sheet.getRange(&quot;A6:B8&quot;);\n\n var chartBuilder = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(firstRange)\n     \/\/ This range will render in a different color\n     .addRange(secondRange)\n     .setPosition(5, 5, 0, 0);\n\n \/\/ Note that you can use either of these two formats, but the range\n \/\/ MUST match up with a range that was added via addRange(), or it\n \/\/ will not be removed, and will not throw an exception\n chartBuilder.removeRange(firstRange);\n chartBuilder.removeRange(sheet.getRange(&quot;A6:B8&quot;));\n\n var chart = chartBuilder.build();\n\n sheet.insertChart(chart);\n  ",
                "!type": "fn(range: SpreadsheetApp.Range) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "reverseCategories": {
                "!doc": "Reverses the drawing of series in the domain axis.  For vertical-range charts (such as line,\n area or column charts), this means the horizontal axis is drawn from right to left.  For\n horizontal-range charts (such as bar charts), this means the vertical axis is drawn from top\n to bottom.  For pie charts, this means the slices are drawn counterclockwise.\n\n \n \n \/\/ Creates a pie chart builder and sets drawing of the slices in a counter-clockwise manner.\n var builder = Charts.newPieChart();\n builder.reverseCategories();\n ",
                "!type": "fn() -> SpreadsheetApp.EmbeddedLineChartBuilder"
            },
            "setBackgroundColor": {
                "!doc": "Sets the background color for the chart.\n\n \n \n \/\/ Creates a line chart builder and sets the background color to gray\n var builder = Charts.newLineChart();\n builder.setBackgroundColor(&quot;gray&quot;);\n ",
                "!type": "fn(cssValue: string) -> SpreadsheetApp.EmbeddedLineChartBuilder"
            },
            "setChartType": {
                "!doc": "Changes the type of chart. Not all embedded chart types are currently supported. See\n ChartType.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;A1:B5&quot;);\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(range)\n     .setPosition(5, 5, 0, 0)\n     .build()\n\n sheet.insertChart(chart);\n ",
                "!type": "fn(type: Charts.ChartType) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "setColors": {
                "!doc": "Sets the colors for the lines in the chart.\n\n \n \n \/\/ Creates a line chart builder and sets the first two lines to be drawn in green and red,\n \/\/ respectively.\n var builder = Charts.newLineChart();\n builder.setColors([&quot;green&quot;, &quot;red&quot;]);\n ",
                "!type": "fn(cssValues: [string]) -> SpreadsheetApp.EmbeddedLineChartBuilder"
            },
            "setCurveStyle": {
                "!doc": "Sets the style to use for curves in the chart.  See CurveStyle for allowed curve\n styles.\n\n \n \n \/\/ Creates a line chart builder and curves the lines in the chart.\n var builder = Charts.newLineChart();\n builder.setCurveStyle(Charts.CurveStyle.SMOOTH)\n ",
                "!type": "fn(style: Charts.CurveStyle) -> SpreadsheetApp.EmbeddedLineChartBuilder"
            },
            "setLegendPosition": {
                "!doc": "Sets the position of the legend with respect to the chart.  By default, there will be no\n legend.\n\n \n \n \/\/ Creates a line chart builder and sets the legend position to right.\n var builder = Charts.newLineChart();\n builder.setLegendPosition(Charts.Position.RIGHT);\n ",
                "!type": "fn(position: Charts.Position) -> SpreadsheetApp.EmbeddedLineChartBuilder"
            },
            "setLegendTextStyle": {
                "!doc": "Sets the text style of the chart legend.\n\n \n \n \/\/ Creates a line chart builder and sets it up for a  blue, 26-point legend.\n var textStyleBuilder = Charts.newTextStyle().setColor(&#39;#0000FF&#39;).setFontSize(26);\n var style = textStyleBuilder.build();\n var builder = Charts.newLineChart();\n builder.setLegendTextStyle(style);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> SpreadsheetApp.EmbeddedLineChartBuilder"
            },
            "setOption": {
                "!doc": "Sets advanced options for this chart. See\n \n https:\/\/developers.google.com\/chart\/interactive\/docs\/reference for what\n options are available.\n\n This method will NOT validate the option you specify is valid for this\n chart type nor if the value is of the correct format\/structure.\n\n This example shows how to change the animation duration to 1 second and\n set a legend.\n\n \n \n builder.setOption(&#39;title&#39;, &#39;Earnings projections&#39;);\n builder.setOption(&#39;animation.duration&#39;, 1000);\n builder.setOption(&#39;legend&#39;, {position: &#39;top&#39;, textStyle: {color: &#39;blue&#39;, fontSize: 16}});\n ",
                "!type": "fn(option: string, value: object) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "setPointStyle": {
                "!doc": "Sets the style for points in the line.  By default, points will have no particular styles,\n and only the line will be visible.\n\n \n \n \/\/ Creates a line chart builder and sets large point style.\n var builder = Charts.newLineChart();\n builder.setPointStyle(Charts.PointStyle.LARGE);\n ",
                "!type": "fn(style: Charts.PointStyle) -> SpreadsheetApp.EmbeddedLineChartBuilder"
            },
            "setPosition": {
                "!doc": "Sets the position, changing where the chart appears on the sheet. AnchorRowPos and AnchorColPos\n are 1-indexed.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;A1:B5&quot;);\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(range)\n     .setPosition(5, 5, 0, 0)\n     .build()\n\n sheet.insertChart(chart);\n ",
                "!type": "fn(anchorRowPos: number, anchorColPos: number, offsetX: number, offsetY: number) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "setRange": {
                "!doc": "Sets the range for the chart.\n \n If any data points fall outside the range, the range will be expanded to include those data\n points.",
                "!type": "fn(start: number, end: number) -> SpreadsheetApp.EmbeddedLineChartBuilder"
            },
            "setTitle": {
                "!doc": "Sets the title of the chart.  The title will be displayed centered above the chart.\n\n \n \n \/\/ Creates a line chart builder and title to &#39;My Line Chart&#39;.\n var builder = Charts.newLineChart();\n builder.setTitle(&#39;My Line Chart&#39;)\n ",
                "!type": "fn(chartTitle: string) -> SpreadsheetApp.EmbeddedLineChartBuilder"
            },
            "setTitleTextStyle": {
                "!doc": "Sets the text style of the chart title.\n\n \n \n \/\/ Creates a line chart builder and sets it up for a  blue, 26-point title.\n var textStyleBuilder = Charts.newTextStyle().setColor(&#39;#0000FF&#39;).setFontSize(26);\n var style = textStyleBuilder.build();\n var builder = Charts.newLineChart();\n builder.setTitleTextStyle(style);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> SpreadsheetApp.EmbeddedLineChartBuilder"
            },
            "setXAxisTextStyle": {
                "!doc": "Sets the horizontal axis text style.\n\n \n \n \/\/ Creates a line chart builder and sets the X-axis text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setXAxisTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> SpreadsheetApp.EmbeddedLineChartBuilder"
            },
            "setXAxisTitle": {
                "!doc": "Adds a title to the horizontal axis.  The title will be centered and will appear below\n the axis value labels.\n\n \n \n \/\/ Creates a line chart builder and sets the X-axis title.\n var builder = Charts.newLineChart();\n builder.setTitle(&#39;X-axis Title&#39;)\n ",
                "!type": "fn(title: string) -> SpreadsheetApp.EmbeddedLineChartBuilder"
            },
            "setXAxisTitleTextStyle": {
                "!doc": "Sets the horizontal axis title text style.\n\n \n \n \/\/ Creates a line chart builder and sets the X-axis title text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setXAxisTitleTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> SpreadsheetApp.EmbeddedLineChartBuilder"
            },
            "setYAxisTextStyle": {
                "!doc": "Sets the vertical axis text style.\n\n \n \n \/\/ Creates a line chart builder and sets the Y-axis text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setYAxisTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> SpreadsheetApp.EmbeddedLineChartBuilder"
            },
            "setYAxisTitle": {
                "!doc": "Adds a title to the vertical axis.  The title will be centered and will appear to the\n left of the value labels.\n\n \n \n \/\/ Creates a line chart builder and sets the Y-axis title.\n var builder = Charts.newLineChart();\n builder.setYAxisTitle(&#39;Y-axis Title&#39;)\n ",
                "!type": "fn(title: string) -> SpreadsheetApp.EmbeddedLineChartBuilder"
            },
            "setYAxisTitleTextStyle": {
                "!doc": "Sets the vertical axis title text style.\n\n \n \n \/\/ Creates a line chart builder and sets the Y-axis title text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setYAxisTitleTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> SpreadsheetApp.EmbeddedLineChartBuilder"
            },
            "useLogScale": {
                "!doc": "Makes the range axis into a logarithmic scale (requires all values to be positive).  The range\n axis will be the vertical axis for vertical charts (line, area, column, etc.) and the\n horizontal axis for horizontal charts (bar, etc.)",
                "!type": "fn() -> SpreadsheetApp.EmbeddedLineChartBuilder"
            }
        },
        "SpreadsheetApp.EmbeddedPieChartBuilder": {
            "addRange": {
                "!doc": "Adds a Range to the chart represented by this builder. Will not add the Range\n if it has already been added to the chart.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(sheet.getRange(&quot;A1:B8&quot;))\n     .setPosition(5, 5, 0, 0)\n     .build();\n\n sheet.insertChart(chart);\n ",
                "!type": "fn(range: SpreadsheetApp.Range) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "asAreaChart": {
                "!doc": "Sets the chart type to AreaChart and returns an EmbeddedAreaChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedAreaChartBuilder"
            },
            "asBarChart": {
                "!doc": "Sets the chart type to BarChart and returns an EmbeddedBarChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedBarChartBuilder"
            },
            "asColumnChart": {
                "!doc": "Sets the chart type to ColumnChart and returns an EmbeddedColumnChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedColumnChartBuilder"
            },
            "asLineChart": {
                "!doc": "Sets the chart type to LineChart and returns an EmbeddedLineChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedLineChartBuilder"
            },
            "asPieChart": {
                "!doc": "Sets the chart type to PieChart and returns an EmbeddedPieChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedPieChartBuilder"
            },
            "asScatterChart": {
                "!doc": "Sets the chart type to ScatterChart and returns an EmbeddedScatterChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedScatterChartBuilder"
            },
            "asTableChart": {
                "!doc": "Sets the chart type to TableChart and returns an EmbeddedTableChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedTableChartBuilder"
            },
            "build": {
                "!doc": "Builds the chart to reflect all changes made to it.\n\n This method will not automatically draw the chart on top of the spreadsheet. A new chart\n must be inserted via sheet.insertChart(chart), and an existing chart should be updated via\n sheet.update(chart);\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;A1:B5&quot;);\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(range)\n     .setPosition(5, 5, 0, 0)\n     .build()\n\n sheet.insertChart(chart);\n ",
                "!type": "fn() -> SpreadsheetApp.EmbeddedChart"
            },
            "getChartType": {
                "!doc": "Returns the current chart type.",
                "!type": "fn() -> Charts.ChartType"
            },
            "getContainer": {
                "!doc": "Return the ContainerInfo, which encapsulates where the chart appears on the sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var chartBuilder = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(sheet.getRange(&quot;A1:B8&quot;))\n     .setPosition(5, 5, 0, 0);\n\n \/\/ This method returns the exact same data as Chart#getContainerInfo()\n var containerInfo = chartBuilder.getContainer();\n\n \/\/ Logs the values we used in setPosition()\n Logger.log(&quot;Anchor Column: %s\\r\\nAnchor Row %s\\r\\nOffset X %s\\r\\nOffset Y %s&quot;,\n           containerInfo.getAnchorColumn(),\n           containerInfo.getAnchorRow(),\n           containerInfo.getOffsetX(),\n           containerInfo.getOffsetY());\n ",
                "!type": "fn() -> SpreadsheetApp.ContainerInfo"
            },
            "getRanges": {
                "!doc": "Returns a copy of the list of ranges currently providing data for this chart. Use addRange and\n removeRange to modify this list.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var chartBuilder = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(sheet.getRange(&quot;A1:B8&quot;))\n     .setPosition(5, 5, 0, 0)\n\n var ranges = chartBuilder.getRanges();\n\n \/\/ There&#39;s only one range as a data source for this chart,\n \/\/ so this logs &quot;A1:B8&quot;\n for (var i in ranges) {\n   var range = ranges[i];\n   Logger.log(range.getA1Notation());\n }\n ",
                "!type": "fn() -> [SpreadsheetApp.Range]"
            },
            "removeRange": {
                "!doc": "Removes the specified Range from the chart represented by this builder. Will not throw an error\n if the Range is not in this chart.\n\n The range removed must match up with a range added via addRange(range), or it will\n not be removed, and it will not throw an exception. This method cannot be used to partially\n remove values from a range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var firstRange = sheet.getRange(&quot;A1:B5&quot;);\n var secondRange = sheet.getRange(&quot;A6:B8&quot;);\n\n var chartBuilder = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(firstRange)\n     \/\/ This range will render in a different color\n     .addRange(secondRange)\n     .setPosition(5, 5, 0, 0);\n\n \/\/ Note that you can use either of these two formats, but the range\n \/\/ MUST match up with a range that was added via addRange(), or it\n \/\/ will not be removed, and will not throw an exception\n chartBuilder.removeRange(firstRange);\n chartBuilder.removeRange(sheet.getRange(&quot;A6:B8&quot;));\n\n var chart = chartBuilder.build();\n\n sheet.insertChart(chart);\n  ",
                "!type": "fn(range: SpreadsheetApp.Range) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "reverseCategories": {
                "!doc": "Reverses the drawing of series in the domain axis.  For vertical-range charts (such as line,\n area or column charts), this means the horizontal axis is drawn from right to left.  For\n horizontal-range charts (such as bar charts), this means the vertical axis is drawn from top\n to bottom.  For pie charts, this means the slices are drawn counterclockwise.\n\n \n \n \/\/ Creates a pie chart builder and sets drawing of the slices in a counter-clockwise manner.\n var builder = Charts.newPieChart();\n builder.reverseCategories();\n ",
                "!type": "fn() -> SpreadsheetApp.EmbeddedPieChartBuilder"
            },
            "set3D": {
                "!doc": "Sets the chart to be three-dimensional.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedPieChartBuilder"
            },
            "setBackgroundColor": {
                "!doc": "Sets the background color for the chart.\n\n \n \n \/\/ Creates a line chart builder and sets the background color to gray\n var builder = Charts.newLineChart();\n builder.setBackgroundColor(&quot;gray&quot;);\n ",
                "!type": "fn(cssValue: string) -> SpreadsheetApp.EmbeddedPieChartBuilder"
            },
            "setChartType": {
                "!doc": "Changes the type of chart. Not all embedded chart types are currently supported. See\n ChartType.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;A1:B5&quot;);\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(range)\n     .setPosition(5, 5, 0, 0)\n     .build()\n\n sheet.insertChart(chart);\n ",
                "!type": "fn(type: Charts.ChartType) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "setColors": {
                "!doc": "Sets the colors for the lines in the chart.\n\n \n \n \/\/ Creates a line chart builder and sets the first two lines to be drawn in green and red,\n \/\/ respectively.\n var builder = Charts.newLineChart();\n builder.setColors([&quot;green&quot;, &quot;red&quot;]);\n ",
                "!type": "fn(cssValues: [string]) -> SpreadsheetApp.EmbeddedPieChartBuilder"
            },
            "setLegendPosition": {
                "!doc": "Sets the position of the legend with respect to the chart.  By default, there will be no\n legend.\n\n \n \n \/\/ Creates a line chart builder and sets the legend position to right.\n var builder = Charts.newLineChart();\n builder.setLegendPosition(Charts.Position.RIGHT);\n ",
                "!type": "fn(position: Charts.Position) -> SpreadsheetApp.EmbeddedPieChartBuilder"
            },
            "setLegendTextStyle": {
                "!doc": "Sets the text style of the chart legend.\n\n \n \n \/\/ Creates a line chart builder and sets it up for a  blue, 26-point legend.\n var textStyleBuilder = Charts.newTextStyle().setColor(&#39;#0000FF&#39;).setFontSize(26);\n var style = textStyleBuilder.build();\n var builder = Charts.newLineChart();\n builder.setLegendTextStyle(style);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> SpreadsheetApp.EmbeddedPieChartBuilder"
            },
            "setOption": {
                "!doc": "Sets advanced options for this chart. See\n \n https:\/\/developers.google.com\/chart\/interactive\/docs\/reference for what\n options are available.\n\n This method will NOT validate the option you specify is valid for this\n chart type nor if the value is of the correct format\/structure.\n\n This example shows how to change the animation duration to 1 second and\n set a legend.\n\n \n \n builder.setOption(&#39;title&#39;, &#39;Earnings projections&#39;);\n builder.setOption(&#39;animation.duration&#39;, 1000);\n builder.setOption(&#39;legend&#39;, {position: &#39;top&#39;, textStyle: {color: &#39;blue&#39;, fontSize: 16}});\n ",
                "!type": "fn(option: string, value: object) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "setPosition": {
                "!doc": "Sets the position, changing where the chart appears on the sheet. AnchorRowPos and AnchorColPos\n are 1-indexed.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;A1:B5&quot;);\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(range)\n     .setPosition(5, 5, 0, 0)\n     .build()\n\n sheet.insertChart(chart);\n ",
                "!type": "fn(anchorRowPos: number, anchorColPos: number, offsetX: number, offsetY: number) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "setTitle": {
                "!doc": "Sets the title of the chart.  The title will be displayed centered above the chart.\n\n \n \n \/\/ Creates a line chart builder and title to &#39;My Line Chart&#39;.\n var builder = Charts.newLineChart();\n builder.setTitle(&#39;My Line Chart&#39;)\n ",
                "!type": "fn(chartTitle: string) -> SpreadsheetApp.EmbeddedPieChartBuilder"
            },
            "setTitleTextStyle": {
                "!doc": "Sets the text style of the chart title.\n\n \n \n \/\/ Creates a line chart builder and sets it up for a  blue, 26-point title.\n var textStyleBuilder = Charts.newTextStyle().setColor(&#39;#0000FF&#39;).setFontSize(26);\n var style = textStyleBuilder.build();\n var builder = Charts.newLineChart();\n builder.setTitleTextStyle(style);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> SpreadsheetApp.EmbeddedPieChartBuilder"
            }
        },
        "SpreadsheetApp.EmbeddedScatterChartBuilder": {
            "addRange": {
                "!doc": "Adds a Range to the chart represented by this builder. Will not add the Range\n if it has already been added to the chart.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(sheet.getRange(&quot;A1:B8&quot;))\n     .setPosition(5, 5, 0, 0)\n     .build();\n\n sheet.insertChart(chart);\n ",
                "!type": "fn(range: SpreadsheetApp.Range) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "asAreaChart": {
                "!doc": "Sets the chart type to AreaChart and returns an EmbeddedAreaChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedAreaChartBuilder"
            },
            "asBarChart": {
                "!doc": "Sets the chart type to BarChart and returns an EmbeddedBarChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedBarChartBuilder"
            },
            "asColumnChart": {
                "!doc": "Sets the chart type to ColumnChart and returns an EmbeddedColumnChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedColumnChartBuilder"
            },
            "asLineChart": {
                "!doc": "Sets the chart type to LineChart and returns an EmbeddedLineChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedLineChartBuilder"
            },
            "asPieChart": {
                "!doc": "Sets the chart type to PieChart and returns an EmbeddedPieChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedPieChartBuilder"
            },
            "asScatterChart": {
                "!doc": "Sets the chart type to ScatterChart and returns an EmbeddedScatterChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedScatterChartBuilder"
            },
            "asTableChart": {
                "!doc": "Sets the chart type to TableChart and returns an EmbeddedTableChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedTableChartBuilder"
            },
            "build": {
                "!doc": "Builds the chart to reflect all changes made to it.\n\n This method will not automatically draw the chart on top of the spreadsheet. A new chart\n must be inserted via sheet.insertChart(chart), and an existing chart should be updated via\n sheet.update(chart);\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;A1:B5&quot;);\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(range)\n     .setPosition(5, 5, 0, 0)\n     .build()\n\n sheet.insertChart(chart);\n ",
                "!type": "fn() -> SpreadsheetApp.EmbeddedChart"
            },
            "getChartType": {
                "!doc": "Returns the current chart type.",
                "!type": "fn() -> Charts.ChartType"
            },
            "getContainer": {
                "!doc": "Return the ContainerInfo, which encapsulates where the chart appears on the sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var chartBuilder = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(sheet.getRange(&quot;A1:B8&quot;))\n     .setPosition(5, 5, 0, 0);\n\n \/\/ This method returns the exact same data as Chart#getContainerInfo()\n var containerInfo = chartBuilder.getContainer();\n\n \/\/ Logs the values we used in setPosition()\n Logger.log(&quot;Anchor Column: %s\\r\\nAnchor Row %s\\r\\nOffset X %s\\r\\nOffset Y %s&quot;,\n           containerInfo.getAnchorColumn(),\n           containerInfo.getAnchorRow(),\n           containerInfo.getOffsetX(),\n           containerInfo.getOffsetY());\n ",
                "!type": "fn() -> SpreadsheetApp.ContainerInfo"
            },
            "getRanges": {
                "!doc": "Returns a copy of the list of ranges currently providing data for this chart. Use addRange and\n removeRange to modify this list.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var chartBuilder = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(sheet.getRange(&quot;A1:B8&quot;))\n     .setPosition(5, 5, 0, 0)\n\n var ranges = chartBuilder.getRanges();\n\n \/\/ There&#39;s only one range as a data source for this chart,\n \/\/ so this logs &quot;A1:B8&quot;\n for (var i in ranges) {\n   var range = ranges[i];\n   Logger.log(range.getA1Notation());\n }\n ",
                "!type": "fn() -> [SpreadsheetApp.Range]"
            },
            "removeRange": {
                "!doc": "Removes the specified Range from the chart represented by this builder. Will not throw an error\n if the Range is not in this chart.\n\n The range removed must match up with a range added via addRange(range), or it will\n not be removed, and it will not throw an exception. This method cannot be used to partially\n remove values from a range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var firstRange = sheet.getRange(&quot;A1:B5&quot;);\n var secondRange = sheet.getRange(&quot;A6:B8&quot;);\n\n var chartBuilder = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(firstRange)\n     \/\/ This range will render in a different color\n     .addRange(secondRange)\n     .setPosition(5, 5, 0, 0);\n\n \/\/ Note that you can use either of these two formats, but the range\n \/\/ MUST match up with a range that was added via addRange(), or it\n \/\/ will not be removed, and will not throw an exception\n chartBuilder.removeRange(firstRange);\n chartBuilder.removeRange(sheet.getRange(&quot;A6:B8&quot;));\n\n var chart = chartBuilder.build();\n\n sheet.insertChart(chart);\n  ",
                "!type": "fn(range: SpreadsheetApp.Range) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "setBackgroundColor": {
                "!doc": "Sets the background color for the chart.\n\n \n \n \/\/ Creates a line chart builder and sets the background color to gray\n var builder = Charts.newLineChart();\n builder.setBackgroundColor(&quot;gray&quot;);\n ",
                "!type": "fn(cssValue: string) -> SpreadsheetApp.EmbeddedScatterChartBuilder"
            },
            "setChartType": {
                "!doc": "Changes the type of chart. Not all embedded chart types are currently supported. See\n ChartType.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;A1:B5&quot;);\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(range)\n     .setPosition(5, 5, 0, 0)\n     .build()\n\n sheet.insertChart(chart);\n ",
                "!type": "fn(type: Charts.ChartType) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "setColors": {
                "!doc": "Sets the colors for the lines in the chart.\n\n \n \n \/\/ Creates a line chart builder and sets the first two lines to be drawn in green and red,\n \/\/ respectively.\n var builder = Charts.newLineChart();\n builder.setColors([&quot;green&quot;, &quot;red&quot;]);\n ",
                "!type": "fn(cssValues: [string]) -> SpreadsheetApp.EmbeddedScatterChartBuilder"
            },
            "setLegendPosition": {
                "!doc": "Sets the position of the legend with respect to the chart.  By default, there will be no\n legend.\n\n \n \n \/\/ Creates a line chart builder and sets the legend position to right.\n var builder = Charts.newLineChart();\n builder.setLegendPosition(Charts.Position.RIGHT);\n ",
                "!type": "fn(position: Charts.Position) -> SpreadsheetApp.EmbeddedScatterChartBuilder"
            },
            "setLegendTextStyle": {
                "!doc": "Sets the text style of the chart legend.\n\n \n \n \/\/ Creates a line chart builder and sets it up for a  blue, 26-point legend.\n var textStyleBuilder = Charts.newTextStyle().setColor(&#39;#0000FF&#39;).setFontSize(26);\n var style = textStyleBuilder.build();\n var builder = Charts.newLineChart();\n builder.setLegendTextStyle(style);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> SpreadsheetApp.EmbeddedScatterChartBuilder"
            },
            "setOption": {
                "!doc": "Sets advanced options for this chart. See\n \n https:\/\/developers.google.com\/chart\/interactive\/docs\/reference for what\n options are available.\n\n This method will NOT validate the option you specify is valid for this\n chart type nor if the value is of the correct format\/structure.\n\n This example shows how to change the animation duration to 1 second and\n set a legend.\n\n \n \n builder.setOption(&#39;title&#39;, &#39;Earnings projections&#39;);\n builder.setOption(&#39;animation.duration&#39;, 1000);\n builder.setOption(&#39;legend&#39;, {position: &#39;top&#39;, textStyle: {color: &#39;blue&#39;, fontSize: 16}});\n ",
                "!type": "fn(option: string, value: object) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "setPointStyle": {
                "!doc": "Sets the style for points in the line.  By default, points will have no particular styles,\n and only the line will be visible.\n\n \n \n \/\/ Creates a line chart builder and sets large point style.\n var builder = Charts.newLineChart();\n builder.setPointStyle(Charts.PointStyle.LARGE);\n ",
                "!type": "fn(style: Charts.PointStyle) -> SpreadsheetApp.EmbeddedScatterChartBuilder"
            },
            "setPosition": {
                "!doc": "Sets the position, changing where the chart appears on the sheet. AnchorRowPos and AnchorColPos\n are 1-indexed.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;A1:B5&quot;);\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(range)\n     .setPosition(5, 5, 0, 0)\n     .build()\n\n sheet.insertChart(chart);\n ",
                "!type": "fn(anchorRowPos: number, anchorColPos: number, offsetX: number, offsetY: number) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "setTitle": {
                "!doc": "Sets the title of the chart.  The title will be displayed centered above the chart.\n\n \n \n \/\/ Creates a line chart builder and title to &#39;My Line Chart&#39;.\n var builder = Charts.newLineChart();\n builder.setTitle(&#39;My Line Chart&#39;)\n ",
                "!type": "fn(chartTitle: string) -> SpreadsheetApp.EmbeddedScatterChartBuilder"
            },
            "setTitleTextStyle": {
                "!doc": "Sets the text style of the chart title.\n\n \n \n \/\/ Creates a line chart builder and sets it up for a  blue, 26-point title.\n var textStyleBuilder = Charts.newTextStyle().setColor(&#39;#0000FF&#39;).setFontSize(26);\n var style = textStyleBuilder.build();\n var builder = Charts.newLineChart();\n builder.setTitleTextStyle(style);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> SpreadsheetApp.EmbeddedScatterChartBuilder"
            },
            "setXAxisLogScale": {
                "!doc": "Makes the horizontal axis into a logarithmic scale (requires all values to be positive).",
                "!type": "fn() -> SpreadsheetApp.EmbeddedScatterChartBuilder"
            },
            "setXAxisRange": {
                "!doc": "Sets the range for the horizontal axis of the chart.\n \n If any data points fall outside the range, the range will be expanded to include those data\n points.\n\n \n \n \/\/ Creates a scatter chart builder and sets the X-axis range to be 0 to 100.\n var builder = Charts.newTableChart();\n builder.setXAxisRange(0, 100);\n ",
                "!type": "fn(start: number, end: number) -> SpreadsheetApp.EmbeddedScatterChartBuilder"
            },
            "setXAxisTextStyle": {
                "!doc": "Sets the horizontal axis text style.\n\n \n \n \/\/ Creates a line chart builder and sets the X-axis text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setXAxisTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> SpreadsheetApp.EmbeddedScatterChartBuilder"
            },
            "setXAxisTitle": {
                "!doc": "Adds a title to the horizontal axis.  The title will be centered and will appear below\n the axis value labels.\n\n \n \n \/\/ Creates a line chart builder and sets the X-axis title.\n var builder = Charts.newLineChart();\n builder.setTitle(&#39;X-axis Title&#39;)\n ",
                "!type": "fn(title: string) -> SpreadsheetApp.EmbeddedScatterChartBuilder"
            },
            "setXAxisTitleTextStyle": {
                "!doc": "Sets the horizontal axis title text style.\n\n \n \n \/\/ Creates a line chart builder and sets the X-axis title text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setXAxisTitleTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> SpreadsheetApp.EmbeddedScatterChartBuilder"
            },
            "setYAxisLogScale": {
                "!doc": "Makes the vertical axis into a logarithmic scale (requires all values to be positive).",
                "!type": "fn() -> SpreadsheetApp.EmbeddedScatterChartBuilder"
            },
            "setYAxisRange": {
                "!doc": "Sets the range for the vertical axis of the chart. If any data points fall outside the range,\n the range will be expanded to include those data points.\n\n \n \n \/\/ Creates a scatter chart builder and sets the Y-axis range to be 0 to 100.\n var builder = Charts.newTableChart();\n builder.setYAxisRange(0, 100);\n ",
                "!type": "fn(start: number, end: number) -> SpreadsheetApp.EmbeddedScatterChartBuilder"
            },
            "setYAxisTextStyle": {
                "!doc": "Sets the vertical axis text style.\n\n \n \n \/\/ Creates a line chart builder and sets the Y-axis text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setYAxisTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> SpreadsheetApp.EmbeddedScatterChartBuilder"
            },
            "setYAxisTitle": {
                "!doc": "Adds a title to the vertical axis.  The title will be centered and will appear to the\n left of the value labels.\n\n \n \n \/\/ Creates a line chart builder and sets the Y-axis title.\n var builder = Charts.newLineChart();\n builder.setYAxisTitle(&#39;Y-axis Title&#39;)\n ",
                "!type": "fn(title: string) -> SpreadsheetApp.EmbeddedScatterChartBuilder"
            },
            "setYAxisTitleTextStyle": {
                "!doc": "Sets the vertical axis title text style.\n\n \n \n \/\/ Creates a line chart builder and sets the Y-axis title text style to blue, 18-point font.\n var textStyle = Charts.newTextStyle().setColor(&#39;blue&#39;).setFontSize(18).build();\n var builder = Charts.newLineChart();\n builder.setYAxisTitleTextStyle(textStyle);\n ",
                "!type": "fn(textStyle: Charts.TextStyle) -> SpreadsheetApp.EmbeddedScatterChartBuilder"
            }
        },
        "SpreadsheetApp.EmbeddedTableChartBuilder": {
            "addRange": {
                "!doc": "Adds a Range to the chart represented by this builder. Will not add the Range\n if it has already been added to the chart.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(sheet.getRange(&quot;A1:B8&quot;))\n     .setPosition(5, 5, 0, 0)\n     .build();\n\n sheet.insertChart(chart);\n ",
                "!type": "fn(range: SpreadsheetApp.Range) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "asAreaChart": {
                "!doc": "Sets the chart type to AreaChart and returns an EmbeddedAreaChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedAreaChartBuilder"
            },
            "asBarChart": {
                "!doc": "Sets the chart type to BarChart and returns an EmbeddedBarChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedBarChartBuilder"
            },
            "asColumnChart": {
                "!doc": "Sets the chart type to ColumnChart and returns an EmbeddedColumnChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedColumnChartBuilder"
            },
            "asLineChart": {
                "!doc": "Sets the chart type to LineChart and returns an EmbeddedLineChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedLineChartBuilder"
            },
            "asPieChart": {
                "!doc": "Sets the chart type to PieChart and returns an EmbeddedPieChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedPieChartBuilder"
            },
            "asScatterChart": {
                "!doc": "Sets the chart type to ScatterChart and returns an EmbeddedScatterChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedScatterChartBuilder"
            },
            "asTableChart": {
                "!doc": "Sets the chart type to TableChart and returns an EmbeddedTableChartBuilder.",
                "!type": "fn() -> SpreadsheetApp.EmbeddedTableChartBuilder"
            },
            "build": {
                "!doc": "Builds the chart to reflect all changes made to it.\n\n This method will not automatically draw the chart on top of the spreadsheet. A new chart\n must be inserted via sheet.insertChart(chart), and an existing chart should be updated via\n sheet.update(chart);\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;A1:B5&quot;);\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(range)\n     .setPosition(5, 5, 0, 0)\n     .build()\n\n sheet.insertChart(chart);\n ",
                "!type": "fn() -> SpreadsheetApp.EmbeddedChart"
            },
            "enablePaging": {
                "!doc": "Sets whether to enable paging through the data.\n \n The default behavior is paging disabled. If paging is enabled the default page size is 10.",
                "!type": "fn(enablePaging: bool) -> SpreadsheetApp.EmbeddedTableChartBuilder"
            },
            "enablePaging ": {
                "!doc": "Enables paging and sets the number of rows in each page.\n \n The default page size is 10.\n\n \n \n \/\/ Creates a table chart builder and enables paging with page size of 5.\n var builder = Charts.newTableChart();\n builder.enablePaging(5);\n ",
                "!type": "fn(pageSize: number) -> SpreadsheetApp.EmbeddedTableChartBuilder"
            },
            "enablePaging  ": {
                "!doc": "Enables paging, sets the number of rows in each page and the first table page to display\n (page numbers are zero based).\n \n The default page size is 10, and the default start page is 0.\n\n \n \n \/\/ Creates a table chart builder and enables paging with page size of 5 and displays page 2\n \/\/ first.\n var builder = Charts.newTableChart();\n builder.enablePaging(5, 2);\n ",
                "!type": "fn(pageSize: number, startPage: number) -> SpreadsheetApp.EmbeddedTableChartBuilder"
            },
            "enableRtlTable": {
                "!doc": "Adds basic support for right-to-left languages (such as Arabic or Hebrew) by reversing\n the column order of the table, so that column zero is the right-most column, and the last\n column is the left-most column.\n \n This does not affect the column index in the underlying data, only the order of display.\n Full bi-directional (BiDi) language display is not supported by\n the table visualization even with this option. This option will be ignored if you enable\n paging (using the page option), or if the table has scroll bars because you have specified\n height and width options smaller than the required table size.\n The default behavior is RTL support disabled.",
                "!type": "fn(rtlEnabled: bool) -> SpreadsheetApp.EmbeddedTableChartBuilder"
            },
            "enableSorting": {
                "!doc": "Sets whether to sort columns when the user clicks a column heading.\n \n If sorting is enabled, when users click on the column header the rows will be automatically\n sorted. The default behavior is sorting enabled.",
                "!type": "fn(enableSorting: bool) -> SpreadsheetApp.EmbeddedTableChartBuilder"
            },
            "getChartType": {
                "!doc": "Returns the current chart type.",
                "!type": "fn() -> Charts.ChartType"
            },
            "getContainer": {
                "!doc": "Return the ContainerInfo, which encapsulates where the chart appears on the sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var chartBuilder = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(sheet.getRange(&quot;A1:B8&quot;))\n     .setPosition(5, 5, 0, 0);\n\n \/\/ This method returns the exact same data as Chart#getContainerInfo()\n var containerInfo = chartBuilder.getContainer();\n\n \/\/ Logs the values we used in setPosition()\n Logger.log(&quot;Anchor Column: %s\\r\\nAnchor Row %s\\r\\nOffset X %s\\r\\nOffset Y %s&quot;,\n           containerInfo.getAnchorColumn(),\n           containerInfo.getAnchorRow(),\n           containerInfo.getOffsetX(),\n           containerInfo.getOffsetY());\n ",
                "!type": "fn() -> SpreadsheetApp.ContainerInfo"
            },
            "getRanges": {
                "!doc": "Returns a copy of the list of ranges currently providing data for this chart. Use addRange and\n removeRange to modify this list.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var chartBuilder = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(sheet.getRange(&quot;A1:B8&quot;))\n     .setPosition(5, 5, 0, 0)\n\n var ranges = chartBuilder.getRanges();\n\n \/\/ There&#39;s only one range as a data source for this chart,\n \/\/ so this logs &quot;A1:B8&quot;\n for (var i in ranges) {\n   var range = ranges[i];\n   Logger.log(range.getA1Notation());\n }\n ",
                "!type": "fn() -> [SpreadsheetApp.Range]"
            },
            "removeRange": {
                "!doc": "Removes the specified Range from the chart represented by this builder. Will not throw an error\n if the Range is not in this chart.\n\n The range removed must match up with a range added via addRange(range), or it will\n not be removed, and it will not throw an exception. This method cannot be used to partially\n remove values from a range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var firstRange = sheet.getRange(&quot;A1:B5&quot;);\n var secondRange = sheet.getRange(&quot;A6:B8&quot;);\n\n var chartBuilder = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(firstRange)\n     \/\/ This range will render in a different color\n     .addRange(secondRange)\n     .setPosition(5, 5, 0, 0);\n\n \/\/ Note that you can use either of these two formats, but the range\n \/\/ MUST match up with a range that was added via addRange(), or it\n \/\/ will not be removed, and will not throw an exception\n chartBuilder.removeRange(firstRange);\n chartBuilder.removeRange(sheet.getRange(&quot;A6:B8&quot;));\n\n var chart = chartBuilder.build();\n\n sheet.insertChart(chart);\n  ",
                "!type": "fn(range: SpreadsheetApp.Range) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "setChartType": {
                "!doc": "Changes the type of chart. Not all embedded chart types are currently supported. See\n ChartType.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;A1:B5&quot;);\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(range)\n     .setPosition(5, 5, 0, 0)\n     .build()\n\n sheet.insertChart(chart);\n ",
                "!type": "fn(type: Charts.ChartType) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "setFirstRowNumber": {
                "!doc": "Sets the row number for the first row in the data table.\n \n The default row number of the first row is 1.\n\n \n \n \/\/ Creates a table chart builder and sets the first row to be 2.\n var builder = Charts.newTableChart();\n builder.setFirstRowNumber(2);\n ",
                "!type": "fn(number: number) -> SpreadsheetApp.EmbeddedTableChartBuilder"
            },
            "setInitialSortingAscending": {
                "!doc": "Sets the index of the column according to which the table should be initially sorted\n (ascending).\n \n The column will be sorted in ascending order and will be marked with a small arrow\n indicating that.\n\n \n \n \/\/ Creates a table chart builder and sorts it by the second column (ascending).\n var builder = Charts.newTableChart();\n builder.setInitialSortingAscending(2);\n ",
                "!type": "fn(column: number) -> SpreadsheetApp.EmbeddedTableChartBuilder"
            },
            "setInitialSortingDescending": {
                "!doc": "Sets the index of the column according to which the table should be initially sorted\n (descending).\n \n The column will be sorted in descending order and be marked with a a small arrow\n indicating that.\n\n \n \n \/\/ Creates a table chart builder and sorts it by the second column (descending).\n var builder = Charts.newTableChart();\n builder.setInitialSortingDescending(2);\n ",
                "!type": "fn(column: number) -> SpreadsheetApp.EmbeddedTableChartBuilder"
            },
            "setOption": {
                "!doc": "Sets advanced options for this chart. See\n \n https:\/\/developers.google.com\/chart\/interactive\/docs\/reference for what\n options are available.\n\n This method will NOT validate the option you specify is valid for this\n chart type nor if the value is of the correct format\/structure.\n\n This example shows how to change the animation duration to 1 second and\n set a legend.\n\n \n \n builder.setOption(&#39;title&#39;, &#39;Earnings projections&#39;);\n builder.setOption(&#39;animation.duration&#39;, 1000);\n builder.setOption(&#39;legend&#39;, {position: &#39;top&#39;, textStyle: {color: &#39;blue&#39;, fontSize: 16}});\n ",
                "!type": "fn(option: string, value: object) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "setPosition": {
                "!doc": "Sets the position, changing where the chart appears on the sheet. AnchorRowPos and AnchorColPos\n are 1-indexed.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;A1:B5&quot;);\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(range)\n     .setPosition(5, 5, 0, 0)\n     .build()\n\n sheet.insertChart(chart);\n ",
                "!type": "fn(anchorRowPos: number, anchorColPos: number, offsetX: number, offsetY: number) -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "showRowNumberColumn": {
                "!doc": "Sets whether to show the row number as the first column of the table.\n \n The default behavior is not showing row numbers.",
                "!type": "fn(showRowNumber: bool) -> SpreadsheetApp.EmbeddedTableChartBuilder"
            },
            "useAlternatingRowStyle": {
                "!doc": "Sets whether alternating color style will be assigned to odd and even rows of a table\n chart.\n \n The default behavior is the rows having alternating color style.",
                "!type": "fn(alternate: bool) -> SpreadsheetApp.EmbeddedTableChartBuilder"
            }
        },
        "SpreadsheetApp.PageProtection": {
            "addUser": {
                "!doc": "Adds a user to the list of users who can edit the sheet, if it is protected.\n\n \n \n \/\/ Add the &quot;user@example.com&quot; user to the list of users who can edit this sheet\n var sheet = SpreadsheetApp.getActiveSheet();\n var permissions = sheet.getSheetProtection();\n permissions.addUser(&#39;user@example.com&#39;);\n permissions.setProtected(true);\n sheet.setSheetProtection(permissions);\n ",
                "!type": "fn(email: string)"
            },
            "getUsers": {
                "!doc": "Returns a list of the email addresses of the users who can edit this sheet.\n\n If sheet protection is disabled, the value returned by this call is meaningless.",
                "!type": "fn() -> [string]"
            },
            "isProtected": {
                "!doc": "Indicates whether the sheet has sheet protection enabled or not.\n\n \n \n \/\/ Determine whether or not sheet protection is enabled\n var sheet = SpreadsheetApp.getActiveSheet();\n var permissions = sheet.getSheetProtection();\n var isProtected = permissions.isProtected();\n ",
                "!type": "fn() -> bool"
            },
            "removeUser": {
                "!doc": "Removes a user from the list of users who can edit the sheet.\n\n \n \n \/\/ Remove the &quot;user@example.com&quot; user to the list of users who can edit this sheet\n var sheet = SpreadsheetApp.getActiveSheet();\n var permissions = sheet.getSheetProtection();\n permissions.removeUser(&#39;user@example.com&#39;);\n permissions.setProtected(true);\n sheet.setSheetProtection(permissions);\n ",
                "!type": "fn(user: string)"
            },
            "setProtected": {
                "!doc": "Sets the protection status for the sheet.\n\n \n \n \/\/ Enables sheet protection for  this sheet\n var sheet = SpreadsheetApp.getActiveSheet();\n var permissions = sheet.getSheetProtection();\n permissions.setProtected(true);\n sheet.setSheetProtection(permissions);\n ",
                "!type": "fn(protection: bool)"
            }
        },
        "SpreadsheetApp.Protection": {
            "addEditor": {
                "!doc": "Adds the given user to the list of editors for the protected sheet or range. This method does\n not automatically give the user permission to edit the spreadsheet itself; to do that in\n addition, call Spreadsheet.addEditor(emailAddress).",
                "!type": "fn(emailAddress: string) -> SpreadsheetApp.Protection"
            },
            "addEditor ": {
                "!doc": "Adds the given user to the list of editors for the protected sheet or range. This method does\n not automatically give the user permission to edit the spreadsheet itself; to do that in\n addition, call Spreadsheet.addEditor(user).",
                "!type": "fn(user: User) -> SpreadsheetApp.Protection"
            },
            "addEditors": {
                "!doc": "Adds the given array of users to the list of editors for the protected sheet or range. This\n method does not automatically give the users permission to edit the spreadsheet itself; to do\n that in addition, call Spreadsheet.addEditors(emailAddresses).",
                "!type": "fn(emailAddresses: [string]) -> SpreadsheetApp.Protection"
            },
            "canDomainEdit": {
                "!doc": "Determines whether all users in the domain that owns the spreadsheet have permission to edit\n the protected range or sheet. Throws an exception if the user does not have permission to edit\n the protected range or sheet.",
                "!type": "fn() -> bool"
            },
            "canEdit": {
                "!doc": "Determines whether the user has permission to edit the protected range or sheet. The\n spreadsheet owner is always able to edit protected ranges and sheets.\n\n \n \n \/\/ Remove all range protections in the spreadsheet that the user has permission to edit.\n var ss = SpreadsheetApp.getActive();\n var protections = ss.getProtections(SpreadsheetApp.ProtectionType.RANGE);\n for (var i = 0; i &lt; protections.length; i++) {\n   var protection = protections[i];\n   if (protection.canEdit()) {\n     protection.remove();\n   }\n }\n ",
                "!type": "fn() -> bool"
            },
            "getDescription": {
                "!doc": "Gets the description of the protected range or sheet. If no description is set, this method\n returns an empty string.",
                "!type": "fn() -> string"
            },
            "getEditors": {
                "!doc": "Gets the list of editors for the protected range or sheet. Throws an exception if the user does\n not have permission to edit the protected range or sheet.\n\n \n \n \/\/ Protect the active sheet, then remove all other users from the list of editors.\n var sheet = SpreadsheetApp.getActiveSheet();\n var protection = sheet.protect().setDescription(&#39;Sample protected sheet&#39;);\n\n \/\/ Ensure the current user is an editor before removing others. Otherwise, if the user&#39;s edit\n \/\/ permission comes from a group, the script will throw an exception upon removing the group.\n var me = Session.getEffectiveUser();\n protection.addEditor(me);\n protection.removeEditors(protection.getEditors());\n if (protection.canDomainEdit()) {\n   protection.setDomainEdit(false);\n }\n ",
                "!type": "fn() -> [User]"
            },
            "getProtectionType": {
                "!doc": "Gets the type of the protected area, either SpreadsheetApp.ProtectionType.RANGE or\n SpreadsheetApp.ProtectionType.SHEET.",
                "!type": "fn() -> SpreadsheetApp.ProtectionType"
            },
            "getRange": {
                "!doc": "Gets the range that is being protected. If the protection applies to the sheet instead of a\n range, this method returns a range that spans the entire sheet.",
                "!type": "fn() -> SpreadsheetApp.Range"
            },
            "getRangeName": {
                "!doc": "Gets the name of the protected range if it is associated with a named range. Returns\n null if the protection is not associated with a named range. Note that scripts must\n explicitly call setRangeName(rangeName) to associate a protected range with a named\n range; calling Range.protect() to create a protection from a Range that\n happens to be a named range, without calling setRangeName(rangeName), is not sufficient\n to associate them. However, creating a protected range from a named range in the Google Sheets\n UI will associate them automatically.\n\n \n \n \/\/ Protect a named range in a spreadsheet and log the name of the protected range.\n var ss = SpreadsheetApp.getActive();\n var range = ss.getRange(&#39;A1:B10&#39;);\n var protection = range.protect();\n ss.setNamedRange(&#39;Test&#39;, range);       \/\/ Create a named range.\n protection.setRangeName(&#39;Test&#39;);       \/\/ Associate the protection with the named range.\n Logger.log(protection.getRangeName()); \/\/ Verify the name of the protected range.\n ",
                "!type": "fn() -> string"
            },
            "getUnprotectedRanges": {
                "!doc": "Gets an array of unprotected ranges within a protected sheet. If the Protection object\n corresponds to a protected range instead of a protected sheet, this method returns an empty\n array.  To change the unprotected ranges, use setUnprotectedRanges(ranges) to set\n a new array of ranges; to re-protect the entire sheet, set an empty array.\n\n \n \n \/\/ Unprotect cells E2:F5 in addition to any other unprotected ranges in the protected sheet.\n var sheet = SpreadsheetApp.getActiveSheet();\n var protection = sheet.protect();\n var unprotected = protection.getUnprotectedRanges();\n unprotected.push(sheet.getRange(&#39;E2:F5&#39;));\n protection.setUnprotectedRanges(unprotected);\n ",
                "!type": "fn() -> [SpreadsheetApp.Range]"
            },
            "isWarningOnly": {
                "!doc": "Determines if the protected area is using \"warning based\" protection. Warning-based protection\n means that every user can edit data in the area, except editing will prompt a warning asking\n the user to confirm the edit. By default, protected ranges or sheets are not warning-based.\n To change to the warning state, use setWarningOnly(warningOnly).",
                "!type": "fn() -> bool"
            },
            "remove": {
                "!doc": "Unprotects the range or sheet.\n\n \n \n \/\/ Remove all range protections in the spreadsheet that the user has permission to edit.\n var ss = SpreadsheetApp.getActive();\n var protections = ss.getProtections(SpreadsheetApp.ProtectionType.RANGE);\n for (var i = 0; i &lt; protections.length; i++) {\n   var protection = protections[i];\n   if (protection.canEdit()) {\n     protection.remove();\n   }\n }\n \n\n \n \n \/\/ Remove sheet protection from the active sheet, if the user has permission to edit it.\n var sheet = SpreadsheetApp.getActiveSheet();\n var protection = sheet.getProtections(SpreadsheetApp.ProtectionType.SHEET)[0];\n if (protection &amp;&amp; protection.canEdit()) {\n   protection.remove();\n }\n ",
                "!type": "fn()"
            },
            "removeEditor": {
                "!doc": "Removes the given user from the list of editors for the protected sheet or range. Note that if\n the user is a member of a Google Group that has edit permission, or if all users in the domain\n have edit permission, the user will still be able to edit the protected area. Neither the\n owner of the spreadsheet nor the current user can be removed.",
                "!type": "fn(emailAddress: string) -> SpreadsheetApp.Protection"
            },
            "removeEditor ": {
                "!doc": "Removes the given user from the list of editors for the protected sheet or range. Note that if\n the user is a member of a Google Group that has edit permission, or if all users in the domain\n have edit permission, the user will still be able to edit the protected area as well. Neither\n the owner of the spreadsheet nor the current user can be removed.",
                "!type": "fn(user: User) -> SpreadsheetApp.Protection"
            },
            "removeEditors": {
                "!doc": "Removes the given array of users from the list of editors for the protected sheet or range.\n Note that if any of the users are members of a Google Group that has edit permission, or if all\n users in the domain have edit permission, those users will still be able to edit the protected\n area. Neither the owner of the spreadsheet nor the current user can be removed.\n\n \n \n \/\/ Protect the active sheet, then remove all other users from the list of editors.\n var sheet = SpreadsheetApp.getActiveSheet();\n var protection = sheet.protect().setDescription(&#39;Sample protected sheet&#39;);\n\n \/\/ Ensure the current user is an editor before removing others. Otherwise, if the user&#39;s edit\n \/\/ permission comes from a group, the script will throw an exception upon removing the group.\n var me = Session.getEffectiveUser();\n protection.addEditor(me);\n protection.removeEditors(protection.getEditors());\n if (protection.canDomainEdit()) {\n   protection.setDomainEdit(false);\n }\n ",
                "!type": "fn(emailAddresses: [string]) -> SpreadsheetApp.Protection"
            },
            "setDescription": {
                "!doc": "Sets the description of the protected range or sheet.",
                "!type": "fn(description: string) -> SpreadsheetApp.Protection"
            },
            "setDomainEdit": {
                "!doc": "Sets whether all users in the domain that owns the spreadsheet have permission to edit the\n protected range or sheet. Note that any users who have explicit edit permission will be able to\n edit the protected area regardless of this setting. Throws an exception if the spreadsheet does\n not belong to a Google Apps domain (that is, if it is owned by a gmail.com account).",
                "!type": "fn(editable: bool) -> SpreadsheetApp.Protection"
            },
            "setRange": {
                "!doc": "Adjusts the range that is being protected. If the given range covers a different area from the\n current protected range, this method moves the protection to cover the new range instead.",
                "!type": "fn(range: SpreadsheetApp.Range) -> SpreadsheetApp.Protection"
            },
            "setRangeName": {
                "!doc": "Associates the protected range with an existing named range. If the named range covers a\n different area from the current protected range, this method moves the protection to cover the\n the named range instead. The named range must be on the same sheet as the current protected\n range. Note that scripts must explicitly call this method to associate a protected range with a\n named range; calling Range.protect() to create a protection from a Range\n that happens to be a named range, without calling setRangeName(rangeName), is not\n sufficient to associate them. However, creating a protected range from a named range in the\n Google Sheets UI will associate them automatically.\n\n \n \n \/\/ Protect a named range in a spreadsheet and log the name of the protected range.\n var ss = SpreadsheetApp.getActive();\n var range = ss.getRange(&#39;A1:B10&#39;);\n var protection = range.protect();\n ss.setNamedRange(&#39;Test&#39;, range);       \/\/ Create a named range.\n protection.setRangeName(&#39;Test&#39;);       \/\/ Associate the protection with the named range.\n Logger.log(protection.getRangeName()); \/\/ Verify the name of the protected range.\n ",
                "!type": "fn(rangeName: string) -> SpreadsheetApp.Protection"
            },
            "setUnprotectedRanges": {
                "!doc": "Unprotects the given array of ranges within a protected sheet. Throws an exception if the\n Protection object corresponds to a protected range instead of a protected sheet or if\n any of the ranges are not on the protected sheet. To change the unprotected ranges, set a new\n array of ranges; to re-protect the entire sheet, set an empty array.\n\n \n \n \/\/ Protect the active sheet except B2:C5, then remove all other users from the list of editors.\n var sheet = SpreadsheetApp.getActiveSheet();\n var protection = sheet.protect().setDescription(&#39;Sample protected sheet&#39;);\n var unprotected = sheet.getRange(&#39;B2:C5&#39;);\n protection.setUnprotectedRanges([unprotected]);\n\n \/\/ Ensure the current user is an editor before removing others. Otherwise, if the user&#39;s edit\n \/\/ permission comes from a group, the script will throw an exception upon removing the group.\n var me = Session.getEffectiveUser();\n protection.addEditor(me);\n protection.removeEditors(protection.getEditors());\n if (protection.canDomainEdit()) {\n   protection.setDomainEdit(false);\n }\n ",
                "!type": "fn(ranges: [SpreadsheetApp.Range]) -> SpreadsheetApp.Protection"
            },
            "setWarningOnly": {
                "!doc": "Sets whether or not this protected range is using \"warning based\" protection.\n Warning-based protection means that every user can edit data in the area, except editing\n will prompt a warning asking the user to confirm the edit. By default, protected ranges\n or sheets are not warning-based. To check warning state, use isWarningOnly().",
                "!type": "fn(warningOnly: bool) -> SpreadsheetApp.Protection"
            }
        },
        "SpreadsheetApp.ProtectionType": {
            "RANGE": {
                "!doc": "Protection for a range.",
                "!type": "SpreadsheetApp.ProtectionType"
            },
            "SHEET": {
                "!doc": "Protection for a sheet.",
                "!type": "SpreadsheetApp.ProtectionType"
            }
        },
        "SpreadsheetApp.Range": {
            "activate": {
                "!doc": "Make this range the active range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;A1:D10&quot;);\n range.activate();\n ",
                "!type": "fn() -> SpreadsheetApp.Range"
            },
            "breakApart": {
                "!doc": "Break any multi-column cells in the range into individual cells again.\n\n Calling this function on a range is equivalent to selecting a range and clicking\n Format -> Merge -> Unmerge.",
                "!type": "fn() -> SpreadsheetApp.Range"
            },
            "canEdit": {
                "!doc": "Determines whether the user has permission to edit every cell in the range. The spreadsheet\n owner is always able to edit protected ranges and sheets.",
                "!type": "fn() -> bool"
            },
            "clear": {
                "!doc": "Clears the range of contents, formats, and data-validation rules.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;A1:D10&quot;);\n range.clear();\n ",
                "!type": "fn() -> SpreadsheetApp.Range"
            },
            "clear ": {
                "!doc": "Clears the range of contents, format, data-validation rules, and\/or comments, as specified with\n the given advanced options. By default all data will be cleared.\n\n \n \n \/\/ The code below will clear range C2:G8 in the active sheet, but preserve the format,\n \/\/ data-validation rules, and comments.\n SpreadsheetApp.getActiveSheet().getRange(2, 3, 6, 4).clear({contentsOnly: true});\n ",
                "!type": "fn(options: object) -> SpreadsheetApp.Range"
            },
            "clearContent": {
                "!doc": "Clears the content of the range, leaving the formatting intact.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;A1:D10&quot;);\n range.clearContent();\n ",
                "!type": "fn() -> SpreadsheetApp.Range"
            },
            "clearDataValidations": {
                "!doc": "Clears the data-validation rules for the range.\n\n \n \/\/ Clear the data-validation rules for cells A1:B5.\n var range = SpreadsheetApp.getActive().getRange('A1:B5');\n range.clearDataValidations();\n ",
                "!type": "fn() -> SpreadsheetApp.Range"
            },
            "clearFormat": {
                "!doc": "Clears formatting for this range.\n\n This clears text formatting for the cell or cells in the range, but does not reset\n any number formatting rules.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;A1:D10&quot;);\n range.clearFormat();\n ",
                "!type": "fn() -> SpreadsheetApp.Range"
            },
            "clearNote": {
                "!doc": "Clears the note in the given cell or cells.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;A1:D10&quot;);\n range.clearNote();\n ",
                "!type": "fn() -> SpreadsheetApp.Range"
            },
            "copyFormatToRange": {
                "!doc": "Copy the formatting of the range to the given location. If the destination is larger or\n smaller than the source range then the source will be repeated or truncated accordingly. Note\n that this method copies the formatting only.\n\n For a detailed description of the gridId parameter, see getGridId().\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var source = ss.getSheets()[0];\n\n var range = source.getRange(&quot;B2:D4&quot;);\n\n \/\/ This copies the formatting in B2:D4 in the source sheet to\n \/\/ D4:F6 in the sheet with gridId 1555299895. Note that you can get the gridId\n \/\/ of a sheet by calling sheet.getSheetId() or range.getGridId().\n range.copyFormatToRange(1555299895, 4, 6, 4, 6);\n ",
                "!type": "fn(gridId: number, column: number, columnEnd: number, row: number, rowEnd: number)"
            },
            "copyFormatToRange ": {
                "!doc": "Copy the formatting of the range to the given location. If the destination is larger or\n smaller than the source range then the source will be repeated or truncated accordingly. Note\n that this method copies the formatting only.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var source = ss.getSheets()[0];\n var destination = ss.getSheets()[1];\n\n var range = source.getRange(&quot;B2:D4&quot;);\n\n \/\/ This copies the formatting in B2:D4 in the source sheet to\n \/\/ D4:F6 in the second sheet\n range.copyFormatToRange(destination, 4, 6, 4, 6);\n ",
                "!type": "fn(sheet: SpreadsheetApp.Sheet, column: number, columnEnd: number, row: number, rowEnd: number)"
            },
            "copyTo": {
                "!doc": "Copies the data from a range of cells to another range of cells. Both the values and formatting\n are copied.\n\n \n \/\/ The code below will copy the first 5 columns over to the 6th column.\n var sheet = SpreadsheetApp.getActiveSheet();\n var rangeToCopy = sheet.getRange(1, 1, sheet.getMaxRows(), 5);\n rangeToCopy.copyTo(sheet.getRange(1, 6));\n }",
                "!type": "fn(destination: SpreadsheetApp.Range)"
            },
            "copyTo ": {
                "!doc": "Copies the data from a range of cells to another range of cells. By default both the values\n and formatting are copied, but this can be overridden using advanced arguments.\n\n \n \/\/ The code below will copy only the values of the first 5 columns over to the 6th column.\n var sheet = SpreadsheetApp.getActiveSheet();\n sheet.getRange(\"A:E\").copyTo(sheet.getRange(\"F1\"), {contentsOnly:true});\n }",
                "!type": "fn(destination: SpreadsheetApp.Range, options: object)"
            },
            "copyValuesToRange": {
                "!doc": "Copy the content of the range to the given location. If the destination is larger or\n smaller than the source range then the source will be repeated or truncated accordingly.\n\n For a detailed description of the gridId parameter, see getGridId().\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var source = ss.getSheets()[0];\n\n var range = source.getRange(&quot;B2:D4&quot;);\n\n \/\/ This copies the data in B2:D4 in the source sheet to\n \/\/ D4:F6 in the sheet with gridId 0\n range.copyValuesToRange(0, 4, 6, 4, 6);\n ",
                "!type": "fn(gridId: number, column: number, columnEnd: number, row: number, rowEnd: number)"
            },
            "copyValuesToRange ": {
                "!doc": "Copy the content of the range to the given location. If the destination is larger or\n smaller than the source range then the source will be repeated or truncated accordingly.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var source = ss.getSheets()[0];\n var destination = ss.getSheets()[1];\n\n var range = source.getRange(&quot;B2:D4&quot;);\n\n \/\/ This copies the data in B2:D4 in the source sheet to\n \/\/ D4:F6 in the second sheet\n range.copyValuesToRange(destination, 4, 6, 4, 6);\n ",
                "!type": "fn(sheet: SpreadsheetApp.Sheet, column: number, columnEnd: number, row: number, rowEnd: number)"
            },
            "getA1Notation": {
                "!doc": "Returns a string description of the range, in A1 notation.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n var range = sheet.getRange(1, 1, 2, 5);\n\n \/\/ Logs &quot;A1:E2&quot;\n Logger.log(range.getA1Notation());\n ",
                "!type": "fn() -> string"
            },
            "getBackground": {
                "!doc": "Returns the background color of the top-left cell in the range (i.e., &#39;#ffffff&#39;).\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var cell = sheet.getRange(&quot;B5&quot;);\n Logger.log(cell.getBackground());\n ",
                "!type": "fn() -> string"
            },
            "getBackgrounds": {
                "!doc": "Returns the background colors of the cells in the range (i.e., &#39;#ffffff&#39;).\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;B5:C6&quot;);\n var bgColors = range.getBackgrounds();\n for (var i in bgColors) {\n   for (var j in bgColors[i]) {\n     Logger.log(bgColors[i][j]);\n   }\n }\n ",
                "!type": "fn() -> [[string]]"
            },
            "getCell": {
                "!doc": "Returns a given cell within a range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;B2:D4&quot;);\n\n \/\/ The row and column here are relative to the range\n \/\/ getCell(1,1) in this code returns the cell at B2, B2\n var cell = range.getCell(1, 1);\n Logger.log(cell.getValue());\n ",
                "!type": "fn(row: number, column: number) -> SpreadsheetApp.Range"
            },
            "getColumn": {
                "!doc": "Returns the starting column position for this range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;B2:D4&quot;);\n \/\/ Logs &quot;2.0&quot;\n Logger.log(range.getColumn());\n ",
                "!type": "fn() -> number"
            },
            "getDataSourceUrl": {
                "!doc": "Returns a URL for the data in this range, which can be used to create\n charts and queries.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n var range = sheet.getRange(&quot;A1:B7&quot;);\n\n var dataSourceUrl = range.getDataSourceUrl();\n\n \/\/ Note that this doesn&#39;t build an EmbeddedChart, so we can&#39;t just use\n \/\/ Sheet#insertChart(). If we want to do that, we should use\n \/\/ sheet.newChart().addRange() instead.\n var chart = Charts.newBarChart()\n     .setOption(&quot;title&quot;, &quot;Your Title Here&quot;)\n     .setDataSourceUrl(dataSourceUrl)\n     .build();\n\n var app = UiApp.createApplication();\n app.add(chart);\n ss.show(app);\n ",
                "!type": "fn() -> string"
            },
            "getDataTable": {
                "!doc": "Return the data inside this object as a DataTable.",
                "!type": "fn() -> DataTable"
            },
            "getDataTable ": {
                "!doc": "Return the data inside this Range as a DataTable.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n var range = sheet.getRange(&quot;A1:B7&quot;);\n\n \/\/ Calling this method with &quot;true&quot; sets the first line to be the title of the axes\n var datatable = range.getDataTable(true);\n\n \/\/ Note that this doesn&#39;t build an EmbeddedChart, so we can&#39;t just use\n \/\/ Sheet#insertChart(). If we want to do that, we should use\n \/\/ sheet.newChart().addRange() instead.\n var chart = Charts.newBarChart()\n     .setDataTable(datatable)\n     .setOption(&quot;title&quot;, &quot;Your Title Here&quot;)\n     .build();\n\n var app = UiApp.createApplication();\n app.add(chart);\n ss.show(app);\n ",
                "!type": "fn(firstRowIsHeader: bool) -> DataTable"
            },
            "getDataValidation": {
                "!doc": "Returns the data-validation rule for the top-left cell in the range. If data validation has not\n been set on the cell, this method returns null.\n\n \n \/\/ Log information about the data-validation rule for cell A1.\n var cell = SpreadsheetApp.getActive().getRange('A1');\n var rule = cell.getDataValidation();\n if (rule != null) {\n   var criteria = rule.getCriteriaType();\n   var args = rule.getCriteriaValues();\n   Logger.log('The data-validation rule is %s %s', criteria, args);\n } else {\n   Logger.log('The cell does not have a data-validation rule.')\n }\n ",
                "!type": "fn() -> SpreadsheetApp.DataValidation"
            },
            "getDataValidations": {
                "!doc": "Returns the data-validation rules for all cells in the range. If data validation has not been\n set on a given cell, this method returns null for that cell's position in the array.\n\n \n \/\/ Change existing data-validation rules that require a date in 2013 to require a date in 2014.\n var oldDates = [new Date(&#39;1\/1\/2013&#39;), new Date(&#39;12\/31\/2013&#39;)];\n var newDates = [new Date(&#39;1\/1\/2014&#39;), new Date(&#39;12\/31\/2014&#39;)];\n var sheet = SpreadsheetApp.getActiveSheet();\n var range = sheet.getRange(1, 1, sheet.getMaxRows(), sheet.getMaxColumns());\n var rules = range.getDataValidations();\n\n for (var i = 0; i &lt; rules.length; i++) {\n   for (var j = 0; j &lt; rules[i].length; j++) {\n     var rule = rules[i][j];\n\n     if (rule != null) {\n       var criteria = rule.getCriteriaType();\n       var args = rule.getCriteriaValues();\n\n       if (criteria == SpreadsheetApp.DataValidationCriteria.DATE_BETWEEN\n           &amp;&amp; args[0].getTime() == oldDates[0].getTime()\n           &amp;&amp; args[1].getTime() == oldDates[1].getTime()) {\n         \/\/ Create a builder from the existing rule, then change the dates.\n         rules[i][j] = rule.copy().withCriteria(criteria, newDates).build();\n       }\n     }\n   }\n }\n range.setDataValidations(rules);\n ",
                "!type": "fn() -> [[SpreadsheetApp.DataValidation]]"
            },
            "getFontColor": {
                "!doc": "Returns the font color of the cell in the top-left corner of the range, in CSS notation\n (like &#39;#ffffff&#39; or &#39;white&#39;).\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n var range = sheet.getRange(&quot;B2:D4&quot;);\n\n Logger.log(range.getFontColor());\n ",
                "!type": "fn() -> string"
            },
            "getFontColors": {
                "!doc": "Returns the font colors of the cells in the range in CSS notation (like &#39;#ffffff&#39; or\n &#39;white&#39;).\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n var range = sheet.getRange(&quot;B2:D4&quot;);\n\n var results = range.getFontColors();\n\n for (var i in results) {\n   for (var j in results[i]) {\n     Logger.log(results[i][j]);\n   }\n }\n ",
                "!type": "fn() -> [[string]]"
            },
            "getFontFamilies": {
                "!doc": "Returns the font families of the cells in the range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n var range = sheet.getRange(&quot;B2:D4&quot;);\n\n var results = range.getFontFamilies();\n\n for (var i in results) {\n   for (var j in results[i]) {\n     Logger.log(results[i][j]);\n   }\n }\n ",
                "!type": "fn() -> [[string]]"
            },
            "getFontFamily": {
                "!doc": "Returns the font family of the cell in the top-left corner of the range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n var range = sheet.getRange(&quot;B2:D4&quot;);\n\n Logger.log(range.getFontFamily());\n ",
                "!type": "fn() -> string"
            },
            "getFontLine": {
                "!doc": "Gets the line style of the cell in the top-left corner of the range (&#39;underline&#39;,\n &#39;line-through&#39;, or &#39;none&#39;).\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n var range = sheet.getRange(&quot;B2:D4&quot;);\n\n Logger.log(range.getFontLine());\n ",
                "!type": "fn() -> string"
            },
            "getFontLines": {
                "!doc": "Gets the line style of the cells in the range (&#39;underline&#39;, &#39;line-through&#39;, or\n &#39;none&#39;).\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n var range = sheet.getRange(&quot;B2:D4&quot;);\n\n var results = range.getFontLines();\n\n for (var i in results) {\n   for (var j in results[i]) {\n     Logger.log(results[i][j]);\n   }\n }\n ",
                "!type": "fn() -> [[string]]"
            },
            "getFontSize": {
                "!doc": "Returns the font size in point size of the cell in the top-left corner of the range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n var range = sheet.getRange(&quot;B2:D4&quot;);\n\n Logger.log(range.getFontSize());\n ",
                "!type": "fn() -> number"
            },
            "getFontSizes": {
                "!doc": "Returns the font sizes of the cells in the range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n var range = sheet.getRange(&quot;B2:D4&quot;);\n\n var results = range.getFontSizes();\n\n for (var i in results) {\n   for (var j in results[i]) {\n     Logger.log(results[i][j]);\n   }\n }\n ",
                "!type": "fn() -> [[number]]"
            },
            "getFontStyle": {
                "!doc": "Returns the font style (&#39;italic&#39; or &#39;normal&#39; of the cell in the top-left corner\n of the range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n var range = sheet.getRange(&quot;B2:D4&quot;);\n\n Logger.log(range.getFontStyle());\n ",
                "!type": "fn() -> string"
            },
            "getFontStyles": {
                "!doc": "Returns the font styles of the cells in the range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n var range = sheet.getRange(&quot;B2:D4&quot;);\n\n var results = range.getFontStyles();\n\n for (var i in results) {\n   for (var j in results[i]) {\n     Logger.log(results[i][j]);\n   }\n }\n ",
                "!type": "fn() -> [[string]]"
            },
            "getFontWeight": {
                "!doc": "Returns the font weight (normal\/bold) of the cell in the top-left corner of the range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n var range = sheet.getRange(&quot;B2:D4&quot;);\n\n Logger.log(range.getFontWeight());\n ",
                "!type": "fn() -> string"
            },
            "getFontWeights": {
                "!doc": "Returns the font weights of the cells in the range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n var range = sheet.getRange(&quot;B2:D4&quot;);\n\n var results = range.getFontWeights();\n\n for (var i in results) {\n   for (var j in results[i]) {\n     Logger.log(results[i][j]);\n   }\n }\n ",
                "!type": "fn() -> [[string]]"
            },
            "getFormula": {
                "!doc": "Returns the formula (A1 notation) for the top-left cell of the range,\n or an empty string if the cell is empty or doesn't contain a formula.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This assumes we have a function in B5 that sums up\n \/\/ B2:B4\n var range = sheet.getRange(&quot;B5&quot;);\n\n \/\/ Logs the calculated value and the formula\n Logger.log(&quot;Calculated value: %s Formula: %s&quot;,\n            range.getValue(),\n            range.getFormula());\n ",
                "!type": "fn() -> string"
            },
            "getFormulaR1C1": {
                "!doc": "Returns the formula (R1C1 notation) for a given cell, or null if none.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;B5&quot;);\n var formula = range.getFormulaR1C1();\n Logger.log(formula);\n ",
                "!type": "fn() -> string"
            },
            "getFormulas": {
                "!doc": "Returns the formulas (A1 notation) for the cells in the range.\n Entries in the 2D array will be an empty string for cells with no formula.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;B5:C6&quot;);\n var formulas = range.getFormulas();\n for (var i in formulas) {\n   for (var j in formulas[i]) {\n     Logger.log(formulas[i][j]);\n   }\n }\n ",
                "!type": "fn() -> [[string]]"
            },
            "getFormulasR1C1": {
                "!doc": "Returns the formulas (R1C1 notation) for the cells in the range. Entries in the 2D array will\n be null for cells with no formula.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;B5:C6&quot;);\n var formulas = range.getFormulasR1C1();\n for (var i in formulas) {\n   for (var j in formulas[i]) {\n     Logger.log(formulas[i][j]);\n   }\n }\n ",
                "!type": "fn() -> [[string]]"
            },
            "getGridId": {
                "!doc": "Returns the grid ID of the range's parent sheet. The first sheet created in a spreadsheet has a\n grid ID of 0, and each sheet created thereafter increments the ID. The ID does not\n necessarily correspond to a sheet's tab position because sheets may have been reordered or\n deleted. If a sheet is deleted, the grid ID for subsequent sheets continues to increment, and\n the grid ID of the deleted sheet is not reused.\n\n \n \n \/\/ Log the grid ID of the first sheet (by tab position) in the spreadsheet.\n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n var range = sheet.getRange(&quot;B2:D4&quot;);\n\n Logger.log(range.getGridId());\n ",
                "!type": "fn() -> number"
            },
            "getHeight": {
                "!doc": "Returns the height of the range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;B2:D4&quot;);\n \/\/ logs 3.0\n Logger.log(range.getHeight());\n ",
                "!type": "fn() -> number"
            },
            "getHorizontalAlignment": {
                "!doc": "Returns the horizontal alignment of the text (left\/center\/right) of the cell in the top-left\n corner of the range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n var range = sheet.getRange(&quot;B2:D4&quot;);\n\n Logger.log(range.getHorizontalAlignment());\n ",
                "!type": "fn() -> string"
            },
            "getHorizontalAlignments": {
                "!doc": "Returns the horizontal alignments of the cells in the range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n var range = sheet.getRange(&quot;B2:D4&quot;);\n\n var results = range.getHorizontalAlignments();\n\n for (var i in results) {\n   for (var j in results[i]) {\n     Logger.log(results[i][j]);\n   }\n }\n ",
                "!type": "fn() -> [[string]]"
            },
            "getLastColumn": {
                "!doc": "Returns the end column position.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;B2:D4&quot;);\n \/\/ Logs &quot;4.0&quot;\n Logger.log(range.getLastColumn());\n ",
                "!type": "fn() -> number"
            },
            "getLastRow": {
                "!doc": "Returns the end row position.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;B2:D4&quot;);\n \/\/ Logs &quot;4.0&quot;\n Logger.log(range.getLastRow());\n ",
                "!type": "fn() -> number"
            },
            "getNote": {
                "!doc": "Returns the note associated with the given range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n var range = sheet.getRange(&quot;B2:D4&quot;);\n\n Logger.log(range.getNote());\n ",
                "!type": "fn() -> string"
            },
            "getNotes": {
                "!doc": "Returns the notes associated with the cells in the range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n var range = sheet.getRange(&quot;B2:D4&quot;);\n\n var results = range.getNotes();\n\n for (var i in results) {\n   for (var j in results[i]) {\n     Logger.log(results[i][j]);\n   }\n }\n ",
                "!type": "fn() -> [[string]]"
            },
            "getNumColumns": {
                "!doc": "Returns the number of columns in this range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;B2:D5&quot;);\n Logger.log(range.getNumColumns());\n ",
                "!type": "fn() -> number"
            },
            "getNumRows": {
                "!doc": "Returns the number of rows in this range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;B2:D5&quot;);\n Logger.log(range.getNumRows());\n ",
                "!type": "fn() -> number"
            },
            "getNumberFormat": {
                "!doc": "Get the number formatting of the top-left cell of the given range.\n\n The number format corresponds to a formatting created when a user clicks Format -> Number.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var cell = sheet.getRange(&quot;C4&quot;);\n Logger.log(cell.getNumberFormat());\n ",
                "!type": "fn() -> string"
            },
            "getNumberFormats": {
                "!doc": "Returns the number formats for the cells in the range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;B5:C6&quot;);\n var formats = range.getNumberFormats();\n for (var i in formats) {\n   for (var j in formats[i]) {\n     Logger.log(formats[i][j]);\n   }\n }\n ",
                "!type": "fn() -> [[string]]"
            },
            "getRow": {
                "!doc": "Returns the row position for this range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;B2&quot;);\n Logger.log(range.getRow());\n ",
                "!type": "fn() -> number"
            },
            "getRowIndex": {
                "!doc": "Returns the row position for this range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;B2&quot;);\n Logger.log(range.getRowIndex());\n ",
                "!type": "fn() -> number"
            },
            "getSheet": {
                "!doc": "Returns the sheet this range belongs to.",
                "!type": "fn() -> SpreadsheetApp.Sheet"
            },
            "getValue": {
                "!doc": "Returns the value of the top-left cell in the range. The value may be of type Number,\n Boolean, Date, or String depending on the value of the cell. Empty\n cells will return an empty string.",
                "!type": "fn() -> object"
            },
            "getValues": {
                "!doc": "Returns the rectangular grid of values for this range.\n\n Returns a two-dimensional array of values, indexed by row, then by column. The values may be of\n type Number, Boolean, Date, or String, depending on the value of\n the cell. Empty cells will be represented by an empty string in the array. Remember that while a\n range index starts at 1, 1, the JavaScript array will be indexed from [0][0].\n\n \n \n \/\/ The code below will get the values for the range C2:G8\n \/\/ in the active spreadsheet.  Note that this will be a javascript array.\n var values = SpreadsheetApp.getActiveSheet().getRange(2, 3, 6, 4).getValues();\n Logger.log(values[0][0]);\n ",
                "!type": "fn() -> [[object]]"
            },
            "getVerticalAlignment": {
                "!doc": "Returns the vertical alignment (top\/middle\/bottom) of the cell in the top-left corner\n of the range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n var range = sheet.getRange(&quot;B2:D4&quot;);\n\n Logger.log(range.getVerticalAlignment());\n ",
                "!type": "fn() -> string"
            },
            "getVerticalAlignments": {
                "!doc": "Returns the vertical alignments of the cells in the range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n var range = sheet.getRange(&quot;B2:D4&quot;);\n\n var results = range.getVerticalAlignments();\n\n for (var i in results) {\n   for (var j in results[i]) {\n     Logger.log(results[i][j]);\n   }\n }\n ",
                "!type": "fn() -> [[string]]"
            },
            "getWidth": {
                "!doc": "Returns the width of the range in columns.",
                "!type": "fn() -> number"
            },
            "getWrap": {
                "!doc": "Returns the wrapping policy of the cell in the top-left corner of the range. true if\n the text wraps, false if the text does not.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n var range = sheet.getRange(&quot;B2:D4&quot;);\n\n Logger.log(range.getWrap());\n ",
                "!type": "fn() -> bool"
            },
            "getWraps": {
                "!doc": "Returns the wrapping policy of the cells in the range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n var range = sheet.getRange(&quot;B2:D4&quot;);\n\n var results = range.getVerticalAlignments();\n\n for (var i in results) {\n   for (var j in results[i]) {\n     var isWrapped = results[i][j];\n     if (isWrapped) {\n        Logger.log(&quot;Cell [%s, %s] has wrapped text&quot;, i, j);\n     }\n   }\n }\n ",
                "!type": "fn() -> [[bool]]"
            },
            "isBlank": {
                "!doc": "Returns true if the range is totally blank.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n var range = sheet.getRange(&quot;B2:D4&quot;);\n\n Logger.log(range.isBlank());\n ",
                "!type": "fn() -> bool"
            },
            "isEndColumnBounded": {
                "!doc": "Determines whether the end of the range is bound to a particular column. For example, for the\n ranges A1:B10 or B:B, which are bound to columns at the end of the range, this\n method returns true; for the ranges 3:7 or A1:5, which are bound only\n to particular rows at the end of the range, this method returns false.",
                "!type": "fn() -> bool"
            },
            "isEndRowBounded": {
                "!doc": "Determines whether the end of the range is bound to a particular row. For example, for the\n ranges A1:B10 or 3:7, which are bound to rows at the end of the range, this\n method returns true; for the ranges B:B or A1:C, which are bound only\n to particular columns at the end of the range, this method returns false.",
                "!type": "fn() -> bool"
            },
            "isStartColumnBounded": {
                "!doc": "Determines whether the start of the range is bound to a particular column. For example, for the\n ranges A1:B10 or B:B, which are bound to columns at the start of the range,\n this method returns true; for the range 3:7, which is bound only to a\n row at the start of the range, this method returns false.",
                "!type": "fn() -> bool"
            },
            "isStartRowBounded": {
                "!doc": "Determines whether the start of the range is bound to a particular row. For example, for the\n ranges A1:B10 or 3:7, which are bound to rows at the start of the range, this\n method returns true; for the range B:B, which is bound only to a\n particular column at the start of the range, this method returns false.",
                "!type": "fn() -> bool"
            },
            "merge": {
                "!doc": "Merges the cells in the range together into a single block.\n\n \n \n  var sheet = SpreadsheetApp.getActiveSheet();\n\n  \/\/ The code below will 2-dimensionally merge the cells in A1 to B3\n  sheet.getRange(&#39;A1:B3&#39;).merge();\n ",
                "!type": "fn() -> SpreadsheetApp.Range"
            },
            "mergeAcross": {
                "!doc": "Merge the cells in the range across the columns of the range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ The code below will merge cells C5:E5 into one cell\n var range1 = sheet.getRange(&quot;C5:E5&quot;);\n range1.mergeAcross();\n\n \/\/ The code below will create 2 horizontal cells, F5:H5 and F6:H6\n var range2 = sheet.getRange(&quot;F5:H6&quot;);\n range2.mergeAcross();\n ",
                "!type": "fn() -> SpreadsheetApp.Range"
            },
            "mergeVertically": {
                "!doc": "Merges the cells in the range together.\n\n \n \n  var sheet = SpreadsheetApp.getActiveSheet();\n\n  \/\/ The code below will vertically merge the cells in A1 to A10\n  sheet.getRange(&#39;A1:A10&#39;).mergeVertically();\n\n  \/\/ The code below will create 3 merged columns: B1 to B10, C1 to C10, and D1 to D10\n  sheet.getRange(&#39;B1:D10&#39;).mergeVertically();\n ",
                "!type": "fn() -> SpreadsheetApp.Range"
            },
            "moveTo": {
                "!doc": "Cut and paste (both format and values) from this range to the target range.\n\n \n \n \/\/ The code below will move the first 5 columns over to the 6th column\n var sheet = SpreadsheetApp.getActiveSheet()\n sheet.getRange(&quot;A1:E&quot;).moveTo(sheet.getRange(&quot;F1&quot;));\n ",
                "!type": "fn(target: SpreadsheetApp.Range)"
            },
            "offset": {
                "!doc": "Returns a new range that is offset from this range by the given number of rows and columns\n (which can be negative). The new range will be the same size as the original range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var cell = sheet.getRange(&quot;A1&quot;);\n\n \/\/ newCell references B2\n var newCell = cell.offset(1, 1);\n ",
                "!type": "fn(rowOffset: number, columnOffset: number) -> SpreadsheetApp.Range"
            },
            "offset ": {
                "!doc": "Returns a new range that is relative to the current range, whose  upper left point is offset\n from the current range by the given rows and columns, and with the given height in cells.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var cell = sheet.getRange(&quot;A1&quot;);\n\n \/\/ newCell references B2:B3\n var newRange = cell.offset(1, 1, 2);\n ",
                "!type": "fn(rowOffset: number, columnOffset: number, numRows: number) -> SpreadsheetApp.Range"
            },
            "offset  ": {
                "!doc": "Returns a new range that is relative to the current range, whose upper left point is offset\n from the current range by the given rows and columns, and with the given height and width in\n cells.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var cell = sheet.getRange(&quot;A1&quot;);\n\n \/\/ newCell references B2:C3\n var newRange = cell.offset(1, 1, 2, 2);\n ",
                "!type": "fn(rowOffset: number, columnOffset: number, numRows: number, numColumns: number) -> SpreadsheetApp.Range"
            },
            "protect": {
                "!doc": "Creates an object that can protect the range from being edited except by users who have\n permission. Until the script actually changes the list of editors for the range (by calling\n Protection.removeEditor(emailAddress), Protection.removeEditor(user),\n Protection.removeEditors(emailAddresses), Protection.addEditor(emailAddress),\n Protection.addEditor(user), Protection.addEditors(emailAddresses), or\n setting a new value for Protection.setDomainEdit(editable)), the permissions will\n mirror those of the spreadsheet itself, which effectively means that the range remains\n unprotected. If the range is already protected, this method creates a new protected range that\n overlaps the existing one. If a cell is covered by two protected ranges and one of the\n protected ranges allows a particular user to edit the cell and the other does not, the user\n will not be able to edit.\n\n \n \n \/\/ Protect range A1:B10, then remove all other users from the list of editors.\n var ss = SpreadsheetApp.getActive();\n var range = ss.getRange(&#39;A1:B10&#39;);\n var protection = range.protect().setDescription(&#39;Sample protected range&#39;);\n\n \/\/ Ensure the current user is an editor before removing others. Otherwise, if the user&#39;s edit\n \/\/ permission comes from a group, the script will throw an exception upon removing the group.\n var me = Session.getEffectiveUser();\n protection.addEditor(me);\n protection.removeEditors(protection.getEditors());\n if (protection.canDomainEdit()) {\n   protection.setDomainEdit(false);\n }\n ",
                "!type": "fn() -> SpreadsheetApp.Protection"
            },
            "setBackground": {
                "!doc": "Sets the background color of all cells in the range in CSS notation (like &#39;#ffffff&#39; or\n &#39;white&#39;).\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;B2:D5&quot;);\n range.setBackground(&quot;red&quot;);\n ",
                "!type": "fn(color: string) -> SpreadsheetApp.Range"
            },
            "setBackgroundRGB": {
                "!doc": "Sets the background to the given RGB color.  This is a convenience\n wrapper for the setBackground call that takes a string color.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var cell = sheet.getRange(&quot;B2&quot;);\n\n \/\/ Sets the background to white\n cell.setBackgroundRGB(255, 255, 255);\n\n \/\/ Sets the background to red\n cell.setBackgroundRGB(255, 0, 0);\n ",
                "!type": "fn(red: number, green: number, blue: number) -> SpreadsheetApp.Range"
            },
            "setBackgrounds": {
                "!doc": "Sets a rectangular grid of background colors (must match dimensions of this range). The colors\n are in CSS notation (like &#39;#ffffff&#39; or &#39;white&#39;).\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var colors = [\n   [&quot;red&quot;, &quot;white&quot;, &quot;blue&quot;],\n   [&quot;#FF0000&quot;, &quot;#FFFFFF&quot;, &quot;#0000FF&quot;] \/\/ These are the hex equivalents\n ];\n\n var cell = sheet.getRange(&quot;B5:D6&quot;);\n cell.setBackgrounds(colors);\n ",
                "!type": "fn(color: [[string]]) -> SpreadsheetApp.Range"
            },
            "setBorder": {
                "!doc": "Sets the border property. Valid values are true (on), false (off) and\n null (no change).\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var cell = sheet.getRange(&quot;B2&quot;);\n \/\/ Sets borders on the top and bottom, but leaves the left and right unchanged\n cell.setBorder(true, null, true, null, false, false);\n ",
                "!type": "fn(top: bool, left: bool, bottom: bool, right: bool, vertical: bool, horizontal: bool) -> SpreadsheetApp.Range"
            },
            "setBorder ": {
                "!doc": "Sets the border property with color and\/or style.\n  Valid values are true (on), false (off) and\n null (no change). For color, use Color in CSS notation (like &#39;#ffffff&#39; or\n &#39;white&#39;)\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var cell = sheet.getRange(&quot;B2&quot;);\n \/\/ Sets borders on the top and bottom, but leaves the left and right unchanged\n \/\/ Also sets the color to &quot;red&quot;, and the border to &quot;DASHED&quot;.\n cell.setBorder(true, null, true, null, false, false, &quot;red&quot;, Range.BorderStyle.DASHED);\n ",
                "!type": "fn(top: bool, left: bool, bottom: bool, right: bool, vertical: bool, horizontal: bool, color: string, style: SpreadsheetApp.BorderStyle) -> SpreadsheetApp.Range"
            },
            "setDataValidation": {
                "!doc": "Sets one data-validation rule for all cells in the range.\n\n \n \/\/ Set the data-validation rule for cell A1 to require a value from B1:B10.\n var cell = SpreadsheetApp.getActive().getRange('A1');\n var range = SpreadsheetApp.getActive().getRange('B1:B10');\n var rule = SpreadsheetApp.newDataValidation().requireValueInRange(range).build();\n cell.setDataValidation(rule);\n ",
                "!type": "fn(rule: SpreadsheetApp.DataValidation) -> SpreadsheetApp.Range"
            },
            "setDataValidations": {
                "!doc": "Sets the data-validation rules for all cells in the range. This method takes a two-dimensional\n array of data validations, indexed by row then by column. The array dimensions must correspond\n to the range dimensions.\n\n \n \/\/ Set the data-validation rules for Sheet1!A1:B5 to require a value from Sheet2!A1:A10.\n var destinationRange = SpreadsheetApp.getActive().getSheetByName(&#39;Sheet1&#39;).getRange(&#39;A1:B5&#39;);\n var sourceRange = SpreadsheetApp.getActive().getSheetByName(&#39;Sheet2&#39;).getRange(&#39;A1:A10&#39;);\n var rule = SpreadsheetApp.newDataValidation().requireValueInRange(sourceRange).build();\n var rules = destinationRange.getDataValidations();\n for (var i = 0; i &lt; rules.length; i++) {\n   for (var j = 0; j &lt; rules[i].length; j++) {\n     rules[i][j] = rule;\n   }\n }\n destinationRange.setDataValidations(rules);\n ",
                "!type": "fn(rules: [[SpreadsheetApp.DataValidation]]) -> SpreadsheetApp.Range"
            },
            "setFontColor": {
                "!doc": "Sets the font color in CSS notation (like &#39;#ffffff&#39; or &#39;white&#39;).\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var cell = sheet.getRange(&quot;B2&quot;);\n cell.setFontColor(&quot;red&quot;);\n ",
                "!type": "fn(color: string) -> SpreadsheetApp.Range"
            },
            "setFontColors": {
                "!doc": "Sets a rectangular grid of font colors (must match dimensions of this range). The colors are in\n CSS notation (like &#39;#ffffff&#39; or &#39;white&#39;).\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var colors = [\n   [&quot;red&quot;, &quot;white&quot;, &quot;blue&quot;],\n   [&quot;#FF0000&quot;, &quot;#FFFFFF&quot;, &quot;#0000FF&quot;] \/\/ These are the hex equivalents\n ];\n\n var cell = sheet.getRange(&quot;B5:D6&quot;);\n cell.setFontColors(colors);\n ",
                "!type": "fn(colors: [[object]]) -> SpreadsheetApp.Range"
            },
            "setFontFamilies": {
                "!doc": "Sets a rectangular grid of font families (must match dimensions of this range).\n Examples of font families are \"Arial\" or \"Helvetica\".\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var fonts = [\n   [&quot;Arial&quot;, &quot;Helvetica&quot;, &quot;Verdana&quot;],\n   [&quot;Courier New&quot;, &quot;Arial&quot;, &quot;Helvetica] \/\/ These are the hex equivalents\n ];\n\n var cell = sheet.getRange(&quot;B2:D3&quot;);\n cell.setFontFamilies(fonts);\n ",
                "!type": "fn(fontFamilies: [[object]]) -> SpreadsheetApp.Range"
            },
            "setFontFamily": {
                "!doc": "Sets the font family, such as \"Arial\" or \"Helvetica\".\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var cell = sheet.getRange(&quot;B2&quot;);\n cell.setFontFamily(&quot;Helvetica&quot;);\n ",
                "!type": "fn(fontFamily: string) -> SpreadsheetApp.Range"
            },
            "setFontLine": {
                "!doc": "Sets the line style of the given range (&#39;underline&#39;, &#39;line-through&#39;, or\n &#39;none&#39;).\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var cell = sheet.getRange(&quot;B2&quot;);\n cell.setFontLine(&quot;line-through&quot;);\n ",
                "!type": "fn(fontLine: string) -> SpreadsheetApp.Range"
            },
            "setFontLines": {
                "!doc": "Sets a rectangular grid of line styles (must match dimensions of this range).\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ The size of the two-dimensional array must match the size of the range.\n var fontLines = [\n   [&quot;underline&quot;, &quot;line-through&quot;, &quot;none&quot;]\n ];\n\n var range = sheet.getRange(&quot;B2:D2&quot;);\n range.setFontLines(fontLines);\n ",
                "!type": "fn(fontLines: [[object]]) -> SpreadsheetApp.Range"
            },
            "setFontSize": {
                "!doc": "Sets the font size, with the size being the point size to use.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var cell = sheet.getRange(&quot;B2&quot;);\n cell.setFontSize(20);\n ",
                "!type": "fn(size: number) -> SpreadsheetApp.Range"
            },
            "setFontSizes": {
                "!doc": "Sets a rectangular grid of font sizes (must match dimensions of this range).\n The sizes are in points.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ The size of the two-dimensional array must match the size of the range.\n var fontSizes = [\n   [16, 20, 24]\n ];\n\n var range = sheet.getRange(&quot;B2:D2&quot;);\n range.setFontSizes(fontSizes);\n ",
                "!type": "fn(sizes: [[object]]) -> SpreadsheetApp.Range"
            },
            "setFontStyle": {
                "!doc": "Set the font style for the given range (&#39;italic&#39; or &#39;normal&#39;).\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var cell = sheet.getRange(&quot;B2&quot;);\n cell.setFontStyle(&quot;italic&quot;);\n ",
                "!type": "fn(fontStyle: string) -> SpreadsheetApp.Range"
            },
            "setFontStyles": {
                "!doc": "Sets a rectangular grid of font styles (must match dimensions of this range).\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ The size of the two-dimensional array must match the size of the range.\n var fontStyles = [\n   [&quot;italic&quot;, &quot;normal&quot;]\n ];\n\n var range = sheet.getRange(&quot;B2:C2&quot;);\n range.setFontSizes(fontStyles);\n ",
                "!type": "fn(fontStyles: [[object]]) -> SpreadsheetApp.Range"
            },
            "setFontWeight": {
                "!doc": "Set the font weight for the given range (normal\/bold).\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var cell = sheet.getRange(&quot;B2&quot;);\n cell.setFontWeight(&quot;bold&quot;);\n ",
                "!type": "fn(fontWeight: string) -> SpreadsheetApp.Range"
            },
            "setFontWeights": {
                "!doc": "Sets a rectangular grid of font weights (must match dimensions of this range).\n An example of a font weight is \"bold\".\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ The size of the two-dimensional array must match the size of the range.\n var fontStyles = [\n   [ &quot;bold&quot;, &quot;bold&quot;, &quot;normal&quot; ]\n ];\n\n var range = sheet.getRange(&quot;B2:D2&quot;);\n range.setFontWeights(fontStyles);\n ",
                "!type": "fn(fontWeights: [[object]]) -> SpreadsheetApp.Range"
            },
            "setFormula": {
                "!doc": "Updates the formula for this range. The given formula must be in A1 notation.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var cell = sheet.getRange(&quot;B5&quot;);\n cell.setFormula(&quot;=SUM(B3:B4)&quot;);\n ",
                "!type": "fn(formula: string) -> SpreadsheetApp.Range"
            },
            "setFormulaR1C1": {
                "!doc": "Updates the formula for this range. The given formula must be in R1C1 notation.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var cell = sheet.getRange(&quot;B5&quot;);\n \/\/ This sets the formula to be the sum of the 3 rows above B5\n cell.setFormulaR1C1(&quot;=SUM(R[-3]C[0]:R[-1]C[0])&quot;);\n ",
                "!type": "fn(formula: string) -> SpreadsheetApp.Range"
            },
            "setFormulas": {
                "!doc": "Sets a rectangular grid of formulas (must match dimensions of this range). The given formulas\n must be in A1 notation. This method takes a two-dimensional array of formulas, indexed by row,\n then by column. The array dimensions must correspond to the range dimensions.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This sets the formulas to be a row of sums, followed by a row of averages right below.\n \/\/ The size of the two-dimensional array must match the size of the range.\n var formulas = [\n   [&quot;=SUM(B2:B4)&quot;, &quot;=SUM(C2:C4)&quot;, &quot;=SUM(D2:D4)&quot;],\n   [&quot;=AVERAGE(B2:B4)&quot;, &quot;=AVERAGE(C2:C4)&quot;, &quot;=AVERAGE(D2:D4)&quot;]\n ];\n\n var cell = sheet.getRange(&quot;B5:D6&quot;);\n cell.setFormulas(formulas);\n ",
                "!type": "fn(formulas: [[string]]) -> SpreadsheetApp.Range"
            },
            "setFormulasR1C1": {
                "!doc": "Sets a rectangular grid of formulas (must match dimensions of this range). The given formulas\n must be in R1C1 notation.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This creates formulas for a row of sums, followed by a row of averages.\n var sumOfRowsAbove = &quot;=SUM(R[-3]C[0]:R[-1]C[0])&quot;;\n var averageOfRowsAbove = &quot;=AVERAGE(R[-4]C[0]:R[-2]C[0])&quot;;\n\n \/\/ The size of the two-dimensional array must match the size of the range.\n var formulas = [\n   [sumOfRowsAbove, sumOfRowsAbove, sumOfRowsAbove],\n   [averageOfRowsAbove, averageOfRowsAbove, averageOfRowsAbove]\n ];\n\n var cell = sheet.getRange(&quot;B5:D6&quot;);\n \/\/ This sets the formula to be the sum of the 3 rows above B5.\n cell.setFormulasR1C1(formulas);\n ",
                "!type": "fn(formulas: [[string]]) -> SpreadsheetApp.Range"
            },
            "setHorizontalAlignment": {
                "!doc": "Set the horizontal (left to right) alignment for the given range (left\/center\/right).\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var cell = sheet.getRange(&quot;B2&quot;);\n cell.setHorizontalAlignment(&quot;center&quot;);\n ",
                "!type": "fn(alignment: string) -> SpreadsheetApp.Range"
            },
            "setHorizontalAlignments": {
                "!doc": "Sets a rectangular grid of horizontal alignments.\n see setHorizontalAlignment(alignment)\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ The size of the two-dimensional array must match the size of the range.\n var horizontalAlignments = [\n   [ &quot;left&quot;, &quot;right&quot;, &quot;center&quot; ]\n ];\n\n var range = sheet.getRange(&quot;B2:D2&quot;);\n range.setHorizontalAlignments(horizontalAlignments);\n ",
                "!type": "fn(alignments: [[object]]) -> SpreadsheetApp.Range"
            },
            "setNote": {
                "!doc": "Sets the note to the given value.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var cell = sheet.getRange(&quot;B2&quot;);\n cell.setNote(&quot;This is a note&quot;);\n ",
                "!type": "fn(note: string) -> SpreadsheetApp.Range"
            },
            "setNotes": {
                "!doc": "Sets a rectangular grid of notes (must match dimensions of this range).\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ The size of the two-dimensional array must match the size of the range.\n var notes = [\n   [&quot;it goes&quot;, &quot;like this&quot;, &quot;the fourth, the fifth&quot;],\n   [&quot;the minor fall&quot;, &quot;and the&quot;, &quot;major lift&quot;]\n ];\n\n var cell = sheet.getRange(&quot;B2:D3&quot;);\n cell.setNotes(notes)\n ",
                "!type": "fn(notes: [[object]]) -> SpreadsheetApp.Range"
            },
            "setNumberFormat": {
                "!doc": "Sets the number or date format to the given formatting string. Date formats follow the\n java.text.SimpleDateFormat specification.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var cell = sheet.getRange(&quot;B2&quot;);\n \/\/ Always show 3 decimal points\n cell.setNumberFormat(&quot;0.000&quot;);\n ",
                "!type": "fn(numberFormat: string) -> SpreadsheetApp.Range"
            },
            "setNumberFormats": {
                "!doc": "Sets a rectangular grid of number or date formats (must match dimensions of this range). The\n values are formatting strings, see setNumberFormat(numberFormat). Date formats follow the\n java.text.SimpleDateFormat specification.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ The size of the two-dimensional array must match the size of the range.\n var formats = [\n   [ &quot;0.000&quot;, &quot;0,000,000&quot;, &quot;$0.00&quot; ]\n ];\n\n var range = sheet.getRange(&quot;B2:D2&quot;);\n range.setNumberFormats(formats);\n ",
                "!type": "fn(numberFormats: [[object]]) -> SpreadsheetApp.Range"
            },
            "setValue": {
                "!doc": "Sets the value of the range. The value can be numeric, string,\n boolean or date.  If it begins with '=' it is interpreted\n as a formula.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var cell = sheet.getRange(&quot;B2&quot;);\n cell.setValue(100);\n ",
                "!type": "fn(value: object) -> SpreadsheetApp.Range"
            },
            "setValues": {
                "!doc": "Sets a rectangular grid of values (must match dimensions of this range).\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ The size of the two-dimensional array must match the size of the range.\n var values = [\n   [ &quot;2.000&quot;, &quot;1,000,000&quot;, &quot;$2.99&quot; ]\n ];\n\n var range = sheet.getRange(&quot;B2:D2&quot;);\n range.setValues(values);\n ",
                "!type": "fn(values: [[object]]) -> SpreadsheetApp.Range"
            },
            "setVerticalAlignment": {
                "!doc": "Set the vertical (top to bottom) alignment for the given range (top\/middle\/bottom).\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var cell = sheet.getRange(&quot;B2&quot;);\n cell.setVerticalAlignment(&quot;middle&quot;);\n ",
                "!type": "fn(alignment: string) -> SpreadsheetApp.Range"
            },
            "setVerticalAlignments": {
                "!doc": "Sets a rectangular grid of vertical alignments (must match dimensions of this range).\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ The size of the two-dimensional array must match the size of the range.\n var alignments = [\n   [ &quot;top&quot;, &quot;middle&quot;, &quot;bottom&quot; ]\n ];\n\n var range = sheet.getRange(&quot;B2:D2&quot;);\n range.setVerticalAlignments(alignments);\n ",
                "!type": "fn(alignments: [[object]]) -> SpreadsheetApp.Range"
            },
            "setWrap": {
                "!doc": "Set the cell wrap of the given range.\n\n Cells with wrap enabled (the default) will resize to display their full content. Cells with\n wrap disabled will display as much as possible in the cell without resizing or running to\n multiple lines.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var cell = sheet.getRange(&quot;B2&quot;);\n cell.setWrap(true);\n ",
                "!type": "fn(isWrapEnabled: bool) -> SpreadsheetApp.Range"
            },
            "setWraps": {
                "!doc": "Sets a rectangular grid of word wrap policies (must match dimensions of this range). Cells with\n wrap enabled (the default) will resize to display their full content. Cells with wrap disabled\n will display as much as possible in the cell without resizing or running to multiple lines.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ The size of the two-dimensional array must match the size of the range.\n var wraps = [\n   [ true, true, false ]\n ];\n\n var range = sheet.getRange(&quot;B2:D2&quot;);\n range.setWraps(wraps);\n ",
                "!type": "fn(isWrapEnabled: [[object]]) -> SpreadsheetApp.Range"
            },
            "sort": {
                "!doc": "Sorts the cells in the given range.\n\n Sorts the cells in a given range, by column and order specified.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n var range = sheet.getRange(&quot;A1:C7&quot;);\n\n \/\/ Sorts by the values in the first column (A)\n range.sort(1);\n\n \/\/ Sorts by the values in the second column (B)\n range.sort(2);\n\n \/\/ Sorts descending by column B\n range.sort({column: 2, ascending: false});\n\n \/\/ Sorts descending by column B, then ascending by column A\n \/\/ Note the use of an array\n range.sort([{column: 2, ascending: false}, {column: 1, ascending: true}]);\n\n \/\/ For rows that are sorted in ascending order, the &quot;ascending&quot; parameter is\n \/\/ optional, and just an integer with the column can be used instead. Note that\n \/\/ in general, keeping the sort specification consistent results in more readable\n \/\/ code. We could have expressed the earlier sort as:\n range.sort([{column: 2, ascending: false}, 1]);\n\n \/\/ Alternatively, if we wanted all columns to be in ascending order, we would use\n \/\/ the following (this would make column 2 ascending)\n range.sort([2, 1]);\n \/\/ ... which is equivalent to\n range.sort([{column: 2, ascending: true}, {column: 1, ascending: true}]);\n ",
                "!type": "fn(sortSpecObj: object) -> SpreadsheetApp.Range"
            }
        },
        "SpreadsheetApp.Sheet": {
            "activate": {
                "!doc": "Activates this sheet. Does not alter the sheet itself, only\n the parent's notion of the active sheet.\n\n \n \n \/\/ This example assumes there is a sheet named &quot;first&quot;\n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var first = ss.getSheetByName(&quot;first&quot;);\n first.activate();\n ",
                "!type": "fn() -> SpreadsheetApp.Sheet"
            },
            "appendRow": {
                "!doc": "Appends a row to the spreadsheet.  This operation is atomic; it prevents issues where\n a user asks for the last row, and then writes to that row, and an intervening mutation\n occurs between getting the last row and writing to it.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ Appends a new row with 3 columns to the bottom of the\n \/\/ spreadsheet containing the values in the array\n sheet.appendRow([&quot;a man&quot;, &quot;a plan&quot;, &quot;panama&quot;]);\n ",
                "!type": "fn(rowContents: [object]) -> SpreadsheetApp.Sheet"
            },
            "autoResizeColumn": {
                "!doc": "Sets the width of the given column to fit its contents\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n sheet.getRange(&#39;a1&#39;).setValue(&#39;Whenever it is a damp, drizzly November in my soul...&#39;);\n\n \/\/ Sets the first column to a width which fits the text\n sheet.autoResizeColumn(1);\n ",
                "!type": "fn(columnPosition: number) -> SpreadsheetApp.Sheet"
            },
            "clear": {
                "!doc": "Clears the sheet of content and formatting information.\n\n \n \n \/\/ This example assumes there is a sheet named &quot;first&quot;\n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var first = ss.getSheetByName(&quot;first&quot;);\n first.clear();\n ",
                "!type": "fn() -> SpreadsheetApp.Sheet"
            },
            "clear ": {
                "!doc": "Clears the sheet of contents and\/or format, as specified with the given\n advanced options.\n\n The advanced options are:\n \n   contentsOnly\n   formatOnly\n \n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n sheet.clear({ formatOnly: true, contentsOnly: true });\n ",
                "!type": "fn(options: object) -> SpreadsheetApp.Sheet"
            },
            "clearContents": {
                "!doc": "Clears the sheet of contents, while preserving formatting information.\n\n \n \n \/\/ This example assumes there is a sheet named &quot;first&quot;\n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var first = ss.getSheetByName(&quot;first&quot;);\n first.clearContents();\n ",
                "!type": "fn() -> SpreadsheetApp.Sheet"
            },
            "clearFormats": {
                "!doc": "Clears the sheet of formatting, while preserving contents.\n\n Formatting refers to how data is formatted as allowed by choices under the \"Format\" menu\n (ex: bold, italics, conditional formatting) and not width or height of cells.\n\n \n \n \/\/ This example assumes there is a sheet named &quot;first&quot;\n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var first = ss.getSheetByName(&quot;first&quot;);\n first.clearFormats();\n ",
                "!type": "fn() -> SpreadsheetApp.Sheet"
            },
            "clearNotes": {
                "!doc": "Clears the sheet of all notes.\n\n \n \n \/\/ This example assumes there is a sheet named &quot;first&quot;\n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var first = ss.getSheetByName(&quot;first&quot;);\n first.clearNotes();\n ",
                "!type": "fn() -> SpreadsheetApp.Sheet"
            },
            "copyTo": {
                "!doc": "Copies the sheet to a given spreadsheet, which can be the same spreadsheet\n as the source. The copied sheet will be named \"Copy of [original name]\".\n\n \n \n var source = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = source.getSheets()[0];\n\n var destination = SpreadsheetApp.openById(&#39;ID_GOES HERE&#39;);\n sheet.copyTo(destination);\n ",
                "!type": "fn(spreadsheet: SpreadsheetApp.Spreadsheet) -> SpreadsheetApp.Sheet"
            },
            "deleteColumn": {
                "!doc": "Deletes the column at the given column position.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n \/\/ Columns start at &quot;1&quot; - this will delete the first column\n sheet.deleteColumn(1);\n ",
                "!type": "fn(columnPosition: number) -> SpreadsheetApp.Sheet"
            },
            "deleteColumns": {
                "!doc": "Deletes a number of columns starting at the given column position.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n \/\/ Columns start at &quot;1&quot; - this will delete the first two columns\n sheet.deleteColumns(1, 2);\n ",
                "!type": "fn(columnPosition: number, howMany: number)"
            },
            "deleteRow": {
                "!doc": "Deletes the row at the given row position.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n \/\/ Rows start at &quot;1&quot; - this will delete the first row\n sheet.deleteRow(1);\n ",
                "!type": "fn(rowPosition: number) -> SpreadsheetApp.Sheet"
            },
            "deleteRows": {
                "!doc": "Deletes a number of rows starting at the given row position.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n \/\/ Rows start at &quot;1&quot; - this will delete the first two rows\n sheet.deleteRows(1, 2);\n ",
                "!type": "fn(rowPosition: number, howMany: number)"
            },
            "getActiveCell": {
                "!doc": "Returns the active cell in this sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n \/\/ Returns the active cell\n var cell = sheet.getActiveCell();\n ",
                "!type": "fn() -> SpreadsheetApp.Range"
            },
            "getActiveRange": {
                "!doc": "Returns the active range for the active sheet.\n\n Returns the range of cells that is currently considered active. This generally means the\n range that a user has selected in the active sheet, but in a custom function it refers to\n the cell being actively recalculated.\n\n Note that when called on a SpreadsheetApp it effectively calls getActiveSpreadsheet and\n then getActiveSheet to act on the active Sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n \/\/ Returns the active cell\n var range = sheet.getActiveRange();\n ",
                "!type": "fn() -> SpreadsheetApp.Range"
            },
            "getCharts": {
                "!doc": "Returns an array of charts on this sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n var charts = sheet.getCharts();\n\n for (var i in charts) {\n   var chart = charts[i];\n   \/\/ Do something with the chart\n }\n ",
                "!type": "fn() -> [SpreadsheetApp.EmbeddedChart]"
            },
            "getColumnWidth": {
                "!doc": "Gets the width in pixels of the given column.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ Columns start at 1\n Logger.log(sheet.getColumnWidth(1));\n ",
                "!type": "fn(columnPosition: number) -> number"
            },
            "getDataRange": {
                "!doc": "Returns a Range corresponding to the dimensions in which data is present.\n\n This is functionally equivalent to creating a Range bounded by A1 and\n (Range.getLastColumn(), Range.getLastRow()).\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This represents ALL the data\n var range = sheet.getDataRange();\n var values = range.getValues();\n\n \/\/ This logs the spreadsheet in CSV format with a trailing comma\n for (var i = 0; i &lt; values.length; i++) {\n   var row = &quot;&quot;;\n   for (var j = 0; j &lt; values[i].length; j++) {\n     if (values[i][j]) {\n       row = row + values[i][j];\n     }\n     row = row + &quot;,&quot;;\n   }\n   Logger.log(row);\n }\n ",
                "!type": "fn() -> SpreadsheetApp.Range"
            },
            "getFrozenColumns": {
                "!doc": "Returns the number of frozen columns.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n Logger.log(&quot;Number of frozen columns: %s&quot;, sheet.getFrozenColumns());\n ",
                "!type": "fn() -> number"
            },
            "getFrozenRows": {
                "!doc": "Returns the number of frozen rows.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n Logger.log(&quot;Number of frozen rows: %s&quot;, sheet.getFrozenRows());\n ",
                "!type": "fn() -> number"
            },
            "getIndex": {
                "!doc": "Gets the position of the sheet in its parent spreadsheet. Starts at 1.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n \/\/ Note that the JavaScript index is 0, but this will log 1\n var sheet = ss.getSheets()[0];\n \/\/ ... because spreadsheets are 1-indexed\n Logger.log(sheet.getIndex());\n ",
                "!type": "fn() -> number"
            },
            "getLastColumn": {
                "!doc": "Returns the position of the last column that has content.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This logs the value in the very last cell of this sheet\n var lastRow = sheet.getLastRow();\n var lastColumn = sheet.getLastColumn();\n var lastCell = sheet.getRange(lastRow, lastColumn);\n Logger.log(lastCell.getValue());\n ",
                "!type": "fn() -> number"
            },
            "getLastRow": {
                "!doc": "Returns the position of the last row that has content.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This logs the value in the very last cell of this sheet\n var lastRow = sheet.getLastRow();\n var lastColumn = sheet.getLastColumn();\n var lastCell = sheet.getRange(lastRow, lastColumn);\n Logger.log(lastCell.getValue());\n ",
                "!type": "fn() -> number"
            },
            "getMaxColumns": {
                "!doc": "The maximum width of the sheet, regardless of content.\n\n \n \n \/\/ This example assumes there is a sheet named &quot;first&quot;\n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var first = ss.getSheetByName(&quot;first&quot;);\n Logger.log(first.getMaxColumns());\n ",
                "!type": "fn() -> number"
            },
            "getMaxRows": {
                "!doc": "The maximum height of the sheet, regardless of content.\n\n \n \n \/\/ This example assumes there is a sheet named &quot;first&quot;\n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var first = ss.getSheetByName(&quot;first&quot;);\n Logger.log(first.getMaxRows());\n ",
                "!type": "fn() -> number"
            },
            "getName": {
                "!doc": "Returns the name of the sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n Logger.log(sheet.getName());\n ",
                "!type": "fn() -> string"
            },
            "getParent": {
                "!doc": "Returns the Spreadsheet that contains this sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n \/\/ parent is identical to ss\n var parent = sheet.getParent();\n ",
                "!type": "fn() -> SpreadsheetApp.Spreadsheet"
            },
            "getProtections": {
                "!doc": "Gets an array of objects representing all protected ranges in the sheet, or a single-element\n array representing the protection on the sheet itself.\n\n \n \n \/\/ Remove all range protections in the spreadsheet that the user has permission to edit.\n var sheet = SpreadsheetApp.getActiveSheet();\n var protections = sheet.getProtections(SpreadsheetApp.ProtectionType.RANGE);\n for (var i = 0; i &lt; protections.length; i++) {\n   var protection = protections[i];\n   if (protection.canEdit()) {\n     protection.remove();\n   }\n }\n \n\n \n \n \/\/ Remove sheet protection from the active sheet, if the user has permission to edit it.\n var sheet = SpreadsheetApp.getActiveSheet();\n var protection = sheet.getProtections(SpreadsheetApp.ProtectionType.SHEET)[0];\n if (protection &amp;&amp; protection.canEdit()) {\n   protection.remove();\n }\n ",
                "!type": "fn(type: SpreadsheetApp.ProtectionType) -> [SpreadsheetApp.Protection]"
            },
            "getRange": {
                "!doc": "Returns the range with the top left cell at the given coordinates.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n \/\/ Passing only two arguments returns a &quot;range&quot; with a single cell.\n var range = sheet.getRange(1, 1);\n var values = range.getValues();\n Logger.log(values[0][0]);\n ",
                "!type": "fn(row: number, column: number) -> SpreadsheetApp.Range"
            },
            "getRange ": {
                "!doc": "Returns the range with the top left cell at the given coordinates, and with the given\n number of rows.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n \/\/ When the &quot;numRows&quot; argument is used, only a single column of data is returned.\n var range = sheet.getRange(1, 1, 3);\n var values = range.getValues();\n\n \/\/ Prints 3 values from the first column, starting from row 1.\n for (var row in values) {\n   for (var col in values[row]) {\n     Logger.log(values[row][col]);\n   }\n }\n ",
                "!type": "fn(row: number, column: number, numRows: number) -> SpreadsheetApp.Range"
            },
            "getRange  ": {
                "!doc": "Returns the range with the top left cell at the given coordinates with the given\n number of rows and columns.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n var range = sheet.getRange(1, 1, 3, 3);\n var values = range.getValues();\n\n \/\/ Print values from a 3x3 box.\n for (var row in values) {\n   for (var col in values[row]) {\n     Logger.log(values[row][col]);\n   }\n }\n ",
                "!type": "fn(row: number, column: number, numRows: number, numColumns: number) -> SpreadsheetApp.Range"
            },
            "getRange   ": {
                "!doc": "Returns the range as specified in A1 notation or R1C1 notation.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n \/\/ Returns the first cell\n var cell = sheet.getRange(&quot;A1&quot;);\n ",
                "!type": "fn(a1Notation: string) -> SpreadsheetApp.Range"
            },
            "getRowHeight": {
                "!doc": "Gets the height in pixels of the given row.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ Rows start at 1\n Logger.log(sheet.getRowHeight(1));\n ",
                "!type": "fn(rowPosition: number) -> number"
            },
            "getSheetId": {
                "!doc": "Returns the ID of the sheet represented by this object.\n\n This is an ID for the sheet that is unique to the spreadsheet. The ID is a monotonically\n increasing integer assigned at sheet creation time that is independent of sheet position.\n This is useful in conjunction with methods such as\n Range.copyFormatToRange(gridId, column, columnEnd, row, rowEnd) that take a gridId\n parameter rather than a Sheet instance.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n Logger.log(sheet.getSheetId());\n ",
                "!type": "fn() -> number"
            },
            "getSheetName": {
                "!doc": "Returns the sheet name.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n Logger.log(sheet.getSheetName());\n ",
                "!type": "fn() -> string"
            },
            "getSheetProtection": {
                "!doc": "Returns a PageProtection instance describing the permissions for the current sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var permissions = sheet.getSheetProtection();\n\n permissions.setProtected(true);\n permissions.addUser(&quot;user@example.com&quot;);\n\n \/\/ Logs the users that have access to edit this sheet. Note that this\n \/\/ is different from access to the entire spreadsheet - getUsers() will\n \/\/ only return users if permissions.isProtected() is set to true.\n var users = permissions.getUsers();\n Logger.log(users);\n ",
                "!type": "fn() -> SpreadsheetApp.PageProtection"
            },
            "getSheetValues": {
                "!doc": "Returns the rectangular grid of values for this range starting at the given\n coordinates. A -1 value given as the row or column position is equivalent to getting the\n very last row or column that has data in the sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ The two samples below produce the same output\n var values = sheet.getSheetValues(1, 1, 3, 3);\n Logger.log(values);\n\n var range = sheet.getRange(1, 1, 3, 3);\n values = range.getValues();\n Logger.log(values);\n ",
                "!type": "fn(startRow: number, startColumn: number, numRows: number, numColumns: number) -> [[object]]"
            },
            "hideColumn": {
                "!doc": "Hides the columns in the given range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This hides the first column\n var range = sheet.getRange(&quot;A1&quot;);\n sheet.hideColumn(range);\n ",
                "!type": "fn(column: SpreadsheetApp.Range)"
            },
            "hideColumns": {
                "!doc": "Hides the column at the given index.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n \/\/ Hides the first column\n sheet.hideColumns(1);\n ",
                "!type": "fn(columnIndex: number)"
            },
            "hideColumns ": {
                "!doc": "Hides one or more consecutive columns starting at the given index.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n \/\/ Hides the first three columns\n sheet.hideColumns(1, 3);\n ",
                "!type": "fn(columnIndex: number, numColumns: number)"
            },
            "hideRow": {
                "!doc": "Hides the rows in the given range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This hides the first row\n var range = sheet.getRange(&quot;A1&quot;);\n sheet.hideRow(range);\n ",
                "!type": "fn(row: SpreadsheetApp.Range)"
            },
            "hideRows": {
                "!doc": "Hides the row at the given index.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n \/\/ Hides the first row\n sheet.hideRows(1);\n ",
                "!type": "fn(rowIndex: number)"
            },
            "hideRows ": {
                "!doc": "Hides one or more consecutive rows starting at the given index.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n \/\/ Hides the first three rows\n sheet.hideRows(1, 3);\n ",
                "!type": "fn(rowIndex: number, numRows: number)"
            },
            "hideSheet": {
                "!doc": "Hides this sheet.  Has no effect if the sheet is already hidden.  If this method is called\n on the only visible sheet, it will throw an exception.\n\n \n \n var sheet = SpreadsheetApp.getActiveSheet();\n sheet.hideSheet();\n ",
                "!type": "fn() -> SpreadsheetApp.Sheet"
            },
            "insertChart": {
                "!doc": "Adds a new chart to this sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This creates a simple bar chart from the first three rows\n \/\/ of the first two columns of the spreadsheet\n var chart = sheet.newChart()\n     .setChartType(Charts.ChartType.BAR)\n     .addRange(sheet.getRange(&quot;A1:B4&quot;))\n     .setPosition(5, 5, 0, 0)\n     .setOption(&quot;title&quot;, &quot;Dynamic Chart&quot;)\n     .build();\n sheet.insertChart(chart);\n ",
                "!type": "fn(chart: SpreadsheetApp.EmbeddedChart)"
            },
            "insertColumnAfter": {
                "!doc": "Inserts a column after the given column position.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This inserts a column after the first column position\n sheet.insertColumnAfter(1);\n ",
                "!type": "fn(afterPosition: number) -> SpreadsheetApp.Sheet"
            },
            "insertColumnBefore": {
                "!doc": "Inserts a column before the given column position.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This inserts a column in the first column position\n sheet.insertColumnBefore(1);\n ",
                "!type": "fn(beforePosition: number) -> SpreadsheetApp.Sheet"
            },
            "insertColumns": {
                "!doc": "Inserts a blank column in a sheet at the specified location.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n \/\/ Shifts all columns by one\n sheet.insertColumns(1);\n ",
                "!type": "fn(columnIndex: number)"
            },
            "insertColumns ": {
                "!doc": "Inserts one or more consecutive blank columns in a sheet starting at the specified location.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n \/\/ Shifts all columns by three\n sheet.insertColumns(1, 3);\n ",
                "!type": "fn(columnIndex: number, numColumns: number)"
            },
            "insertColumnsAfter": {
                "!doc": "Inserts a number of columns after the given column position.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This inserts a column in the second column position\n sheet.insertColumnsAfter(1);\n ",
                "!type": "fn(afterPosition: number, howMany: number) -> SpreadsheetApp.Sheet"
            },
            "insertColumnsBefore": {
                "!doc": "Inserts a number of columns before the given column position.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This inserts five columns before the first column\n sheet.insertColumnsBefore(1, 5);\n ",
                "!type": "fn(beforePosition: number, howMany: number) -> SpreadsheetApp.Sheet"
            },
            "insertImage": {
                "!doc": "Inserts a Blob as an image in the document at a given row and column. The image size\n is retrieved from the blob contents.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var blob = Utilities.newBlob(binaryData, &#39;image\/png&#39;, &#39;MyImageName&#39;);\n sheet.insertImage(blob, 1, 1);\n ",
                "!type": "fn(blob: Blob, column: number, row: number)"
            },
            "insertImage ": {
                "!doc": "Inserts a Blob as an image in the document at a given row and column, with a pixel\n offset. The image size is retrieved from the blob contents.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var blob = Utilities.newBlob(binaryData, &#39;image\/png&#39;, &#39;MyImageName&#39;);\n sheet.insertImage(blob, 1, 1, 10, 10);\n ",
                "!type": "fn(blob: Blob, column: number, row: number, offsetX: number, offsetY: number)"
            },
            "insertImage  ": {
                "!doc": "Inserts an image in the document at a given row and column.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n sheet.insertImage(&quot;https:\/\/www.google.com\/images\/srpr\/logo3w.png&quot;, 1, 1);\n ",
                "!type": "fn(url: string, column: number, row: number)"
            },
            "insertImage   ": {
                "!doc": "Inserts an image in the document at a given row and column, with a pixel offset.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n sheet.insertImage(&quot;https:\/\/www.google.com\/images\/srpr\/logo3w.png&quot;, 1, 1, 10, 10);\n ",
                "!type": "fn(url: string, column: number, row: number, offsetX: number, offsetY: number)"
            },
            "insertRowAfter": {
                "!doc": "Inserts a row after the given row position.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This inserts a row after the first row position\n sheet.insertRowAfter(1);\n ",
                "!type": "fn(afterPosition: number) -> SpreadsheetApp.Sheet"
            },
            "insertRowBefore": {
                "!doc": "Inserts a row before the given row position.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This inserts a row before the first row position\n sheet.insertRowBefore(1);\n ",
                "!type": "fn(beforePosition: number) -> SpreadsheetApp.Sheet"
            },
            "insertRows": {
                "!doc": "Inserts a blank row in a sheet at the specified location.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n \/\/ Shifts all rows down by one\n sheet.insertRows(1);\n ",
                "!type": "fn(rowIndex: number)"
            },
            "insertRows ": {
                "!doc": "Inserts one or more consecutive blank rows in a sheet starting at the specified location.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n \/\/ Shifts all rows down by three\n sheet.insertRows(1, 3);\n ",
                "!type": "fn(rowIndex: number, numRows: number)"
            },
            "insertRowsAfter": {
                "!doc": "Inserts a number of rows after the given row position.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This inserts five rows after the first row\n sheet.insertRowsAfter(1, 5);\n ",
                "!type": "fn(afterPosition: number, howMany: number) -> SpreadsheetApp.Sheet"
            },
            "insertRowsBefore": {
                "!doc": "Inserts a number of rows before the given row position.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This inserts five rows before the first row\n sheet.insertRowsBefore(1, 5);\n ",
                "!type": "fn(beforePosition: number, howMany: number) -> SpreadsheetApp.Sheet"
            },
            "isSheetHidden": {
                "!doc": "Returns true if the sheet is currently hidden.\n\n \n \n var sheet = SpreadsheetApp.getActiveSheet();\n if (sheet.isSheetHidden()) {\n   \/\/ do something...\n }\n ",
                "!type": "fn() -> bool"
            },
            "newChart": {
                "!doc": "Returns a builder to create a new chart for this sheet.\n\n This example shows how to create a new chart:\n \n \n var sheet = SpreadsheetApp.getActiveSheet();\n var range = sheet.getRange(&quot;A1:B8&quot;);\n var chartBuilder = sheet.newChart();\n chartBuilder.addRange(range)\n     .setChartType(Charts.ChartType.LINE)\n     .setPosition(2, 2, 0, 0)\n     .setOption(&#39;title&#39;, &#39;My Line Chart!&#39;);\n sheet.insertChart(chartBuilder.build());\n ",
                "!type": "fn() -> SpreadsheetApp.EmbeddedChartBuilder"
            },
            "protect": {
                "!doc": "Creates an object that can protect the sheet from being edited except by users who have\n permission. Until the script actually changes the list of editors for the sheet (by calling\n Protection.removeEditor(emailAddress), Protection.removeEditor(user),\n Protection.removeEditors(emailAddresses), Protection.addEditor(emailAddress),\n Protection.addEditor(user), Protection.addEditors(emailAddresses), or\n setting a new value for Protection.setDomainEdit(editable)), the permissions will\n mirror those of the spreadsheet itself, which effectively means that the sheet remains\n unprotected. If the sheet is already protected, this method returns an object representing its\n existing protection settings. A protected sheet may include unprotected regions.\n\n \n \n \/\/ Protect the active sheet, then remove all other users from the list of editors.\n var sheet = SpreadsheetApp.getActiveSheet();\n var protection = sheet.protect().setDescription(&#39;Sample protected sheet&#39;);\n\n \/\/ Ensure the current user is an editor before removing others. Otherwise, if the user&#39;s edit\n \/\/ permission comes from a group, the script will throw an exception upon removing the group.\n var me = Session.getEffectiveUser();\n protection.addEditor(me);\n protection.removeEditors(protection.getEditors());\n if (protection.canDomainEdit()) {\n   protection.setDomainEdit(false);\n }\n ",
                "!type": "fn() -> SpreadsheetApp.Protection"
            },
            "removeChart": {
                "!doc": "Removes a chart from the parent sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This removes all the embedded charts from the spreadsheet\n var charts = sheet.getCharts();\n for (var i in charts) {\n   sheet.removeChart(charts[i]);\n }\n ",
                "!type": "fn(chart: SpreadsheetApp.EmbeddedChart)"
            },
            "setActiveRange": {
                "!doc": "Sets the active range for the active sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;A1:D4&quot;);\n sheet.setActiveRange(range);\n ",
                "!type": "fn(range: SpreadsheetApp.Range) -> SpreadsheetApp.Range"
            },
            "setActiveSelection": {
                "!doc": "Sets the active selection region for this sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;A1:D4&quot;);\n sheet.setActiveSelection(range);\n ",
                "!type": "fn(range: SpreadsheetApp.Range) -> SpreadsheetApp.Range"
            },
            "setActiveSelection ": {
                "!doc": "Sets the active selection, as specified in A1 notation or R1C1 notation.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n sheet.setActiveSelection(&quot;A1:D4&quot;);\n ",
                "!type": "fn(a1Notation: string) -> SpreadsheetApp.Range"
            },
            "setColumnWidth": {
                "!doc": "Sets the width of the given column in pixels.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ Sets the first column to a width of 200 pixels\n sheet.setColumnWidth(1, 200);\n ",
                "!type": "fn(columnPosition: number, width: number) -> SpreadsheetApp.Sheet"
            },
            "setFrozenColumns": {
                "!doc": "Freezes the given number of columns. If zero, no columns are frozen.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ Freezes the first column\n sheet.setFrozenColumns(1);\n ",
                "!type": "fn(columns: number)"
            },
            "setFrozenRows": {
                "!doc": "Freezes the given number of rows. If zero, no rows are frozen.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ Freezes the first row\n sheet.setFrozenRows(1);\n ",
                "!type": "fn(rows: number)"
            },
            "setName": {
                "!doc": "Sets the sheet name.\n\n \n \n \/\/ This example assumes there is a sheet named &quot;first&quot;\n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var first = ss.getSheetByName(&quot;first&quot;);\n first.setName(&quot;not first anymore&quot;);\n ",
                "!type": "fn(name: string) -> SpreadsheetApp.Sheet"
            },
            "setRowHeight": {
                "!doc": "Sets the row height of the given row in pixels.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ Sets the first row to a height of 200 pixels\n sheet.setRowHeight(1, 200);\n ",
                "!type": "fn(rowPosition: number, height: number) -> SpreadsheetApp.Sheet"
            },
            "setSheetProtection": {
                "!doc": "Sets the permissions for the current sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var permissions = sheet.getSheetProtection();\n\n \/\/ This copies the permissions on the first sheet to the second sheet\n var sheetToClonePermissionsTo = ss.getSheets()[1];\n sheetToClonePermissionsTo.setSheetProtection(permissions);\n ",
                "!type": "fn(permissions: SpreadsheetApp.PageProtection)"
            },
            "showColumns": {
                "!doc": "Unhides the column at the given index.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n \/\/ Unhides the first column\n sheet.showColumns(1);\n ",
                "!type": "fn(columnIndex: number)"
            },
            "showColumns ": {
                "!doc": "Unhides one or more consecutive columns starting at the given index.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n \/\/ Unhides the first three columns\n sheet.showColumns(1, 3);\n ",
                "!type": "fn(columnIndex: number, numColumns: number)"
            },
            "showRows": {
                "!doc": "Unhides the row at the given index.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n \/\/ Unhides the first row\n sheet.showRows(1);\n ",
                "!type": "fn(rowIndex: number)"
            },
            "showRows ": {
                "!doc": "Unhides one or more consecutive rows starting at the given index.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n \/\/ Unhides the first three rows\n sheet.showRows(1, 3);\n ",
                "!type": "fn(rowIndex: number, numRows: number)"
            },
            "showSheet": {
                "!doc": "Makes the sheet visible.  Has no effect if the sheet is already visible.\n\n \n \n var sheet = SpreadsheetApp.getActiveSheet();\n sheet.showSheet();\n ",
                "!type": "fn() -> SpreadsheetApp.Sheet"
            },
            "sort": {
                "!doc": "Sorts a sheet by column, ascending.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ Sorts the sheet by the first column, ascending\n sheet.sort(1);\n ",
                "!type": "fn(columnPosition: number) -> SpreadsheetApp.Sheet"
            },
            "sort ": {
                "!doc": "Sorts a sheet by column. Takes a parameter to specify ascending or descending.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ Sorts the sheet by the first column, descending\n sheet.sort(1, false);\n ",
                "!type": "fn(columnPosition: number, ascending: bool) -> SpreadsheetApp.Sheet"
            },
            "unhideColumn": {
                "!doc": "Unhides the column in the given range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This unhides the first column if it was previously hidden\n var range = sheet.getRange(&quot;A1&quot;);\n sheet.unhideColumn(range);\n ",
                "!type": "fn(column: SpreadsheetApp.Range)"
            },
            "unhideRow": {
                "!doc": "Unhides the row in the given range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This unhides the first row if it was previously hidden\n var range = sheet.getRange(&quot;A1&quot;);\n sheet.unhideRow(range);\n ",
                "!type": "fn(row: SpreadsheetApp.Range)"
            },
            "updateChart": {
                "!doc": "Updates the chart on this sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This code is going to loop through all the charts and change them to\n \/\/ column charts\n var charts = sheet.getCharts();\n for (var i in charts) {\n   var chart = charts[i];\n   var newChart = chart\n       .modify()\n       .setChartType(Charts.ChartType.COLUMN)\n       .build();\n   sheet.updateChart(newChart);\n }\n ",
                "!type": "fn(chart: SpreadsheetApp.EmbeddedChart)"
            }
        },
        "SpreadsheetApp.Spreadsheet": {
            "addEditor": {
                "!doc": "Adds the given user to the list of editors for the Spreadsheet. If the user was already\n on the list of viewers, this method promotes the user out of the list of viewers.",
                "!type": "fn(emailAddress: string) -> SpreadsheetApp.Spreadsheet"
            },
            "addEditor ": {
                "!doc": "Adds the given user to the list of editors for the Spreadsheet. If the user was already\n on the list of viewers, this method promotes the user out of the list of viewers.",
                "!type": "fn(user: User) -> SpreadsheetApp.Spreadsheet"
            },
            "addEditors": {
                "!doc": "Adds the given array of users to the list of editors for the Spreadsheet. If any of the\n users were already on the list of viewers, this method promotes them out of the list of\n viewers.",
                "!type": "fn(emailAddresses: [string]) -> SpreadsheetApp.Spreadsheet"
            },
            "addMenu": {
                "!doc": "Creates a new menu in the Spreadsheet UI.\n\n Each menu entry runs a user-defined function. Usually, you will want to call it from\n the onOpen function so that the menu is automatically created when the Spreadsheet is loaded.\n\n \n \n \/\/ The onOpen function is executed automatically every time a Spreadsheet is loaded\n function onOpen() {\n   var ss = SpreadsheetApp.getActiveSpreadsheet();\n   var menuEntries = [];\n   \/\/ When the user clicks on &quot;addMenuExample&quot; then &quot;Menu Entry 1&quot;, the function function1 is\n   \/\/ executed.\n   menuEntries.push({name: &quot;Menu Entry 1&quot;, functionName: &quot;function1&quot;});\n   menuEntries.push(null); \/\/ line separator\n   menuEntries.push({name: &quot;Menu Entry 2&quot;, functionName: &quot;function2&quot;});\n\n   ss.addMenu(&quot;addMenuExample&quot;, menuEntries);\n }\n ",
                "!type": "fn(name: string, subMenus: [object])"
            },
            "addViewer": {
                "!doc": "Adds the given user to the list of viewers for the Spreadsheet. If the user was already\n on the list of editors, this method has no effect.",
                "!type": "fn(emailAddress: string) -> SpreadsheetApp.Spreadsheet"
            },
            "addViewer ": {
                "!doc": "Adds the given user to the list of viewers for the Spreadsheet. If the user was already\n on the list of editors, this method has no effect.",
                "!type": "fn(user: User) -> SpreadsheetApp.Spreadsheet"
            },
            "addViewers": {
                "!doc": "Adds the given array of users to the list of viewers for the Spreadsheet. If any of the\n users were already on the list of editors, this method has no effect for them.",
                "!type": "fn(emailAddresses: [string]) -> SpreadsheetApp.Spreadsheet"
            },
            "appendRow": {
                "!doc": "Appends a row to the spreadsheet.  This operation is atomic; it prevents issues where\n a user asks for the last row, and then writes to that row, and an intervening mutation\n occurs between getting the last row and writing to it.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ Appends a new row with 3 columns to the bottom of the\n \/\/ spreadsheet containing the values in the array\n sheet.appendRow([&quot;a man&quot;, &quot;a plan&quot;, &quot;panama&quot;]);\n ",
                "!type": "fn(rowContents: [object]) -> SpreadsheetApp.Sheet"
            },
            "autoResizeColumn": {
                "!doc": "Sets the width of the given column to fit its contents\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n sheet.getRange(&#39;a1&#39;).setValue(&#39;Whenever it is a damp, drizzly November in my soul...&#39;);\n\n \/\/ Sets the first column to a width which fits the text\n sheet.autoResizeColumn(1);\n ",
                "!type": "fn(columnPosition: number) -> SpreadsheetApp.Sheet"
            },
            "copy": {
                "!doc": "Copies the spreadsheet and returns the new one.\n\n \n \n \/\/ This code makes a copy of the current spreadsheet and names it appropriately\n var ss = SpreadsheetApp.getActiveSpreadsheet();\n ss.copy(&quot;Copy of &quot; + ss.getName());\n ",
                "!type": "fn(name: string) -> SpreadsheetApp.Spreadsheet"
            },
            "deleteActiveSheet": {
                "!doc": "Deletes the currently active sheet.\n\n \n \n \/\/ The code below deletes the currently active sheet and stores the new active sheet in a\n \/\/ variable\n var newSheet = SpreadsheetApp.getActiveSpreadsheet().deleteActiveSheet();\n ",
                "!type": "fn() -> SpreadsheetApp.Sheet"
            },
            "deleteColumn": {
                "!doc": "Deletes the column at the given column position.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n \/\/ Columns start at &quot;1&quot; - this will delete the first column\n sheet.deleteColumn(1);\n ",
                "!type": "fn(columnPosition: number) -> SpreadsheetApp.Sheet"
            },
            "deleteColumns": {
                "!doc": "Deletes a number of columns starting at the given column position.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n \/\/ Columns start at &quot;1&quot; - this will delete the first two columns\n sheet.deleteColumns(1, 2);\n ",
                "!type": "fn(columnPosition: number, howMany: number)"
            },
            "deleteRow": {
                "!doc": "Deletes the row at the given row position.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n \/\/ Rows start at &quot;1&quot; - this will delete the first row\n sheet.deleteRow(1);\n ",
                "!type": "fn(rowPosition: number) -> SpreadsheetApp.Sheet"
            },
            "deleteRows": {
                "!doc": "Deletes a number of rows starting at the given row position.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n \/\/ Rows start at &quot;1&quot; - this will delete the first two rows\n sheet.deleteRows(1, 2);\n ",
                "!type": "fn(rowPosition: number, howMany: number)"
            },
            "deleteSheet": {
                "!doc": "Deletes the specified sheet.\n\n \n \n \/\/ The code below deletes the specified sheet.\n var ss = SpreadsheetApp.getActive();\n var sheet = ss.getSheetByName(&#39;My Sheet&#39;);\n ss.deleteSheet(sheet);\n ",
                "!type": "fn(sheet: SpreadsheetApp.Sheet)"
            },
            "duplicateActiveSheet": {
                "!doc": "Duplicates the active sheet and makes it the active sheet.\n\n \n \n \/\/ The code below makes a duplicate of the active sheet\n SpreadsheetApp.getActiveSpreadsheet().duplicateActiveSheet();\n ",
                "!type": "fn() -> SpreadsheetApp.Sheet"
            },
            "getActiveCell": {
                "!doc": "Returns the active cell in this sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n \/\/ Returns the active cell\n var cell = sheet.getActiveCell();\n ",
                "!type": "fn() -> SpreadsheetApp.Range"
            },
            "getActiveRange": {
                "!doc": "Returns the active range for the active sheet.\n\n Returns the range of cells that is currently considered active. This generally means the\n range that a user has selected in the active sheet, but in a custom function it refers to\n the cell being actively recalculated.\n\n Note that when called on a SpreadsheetApp it effectively calls getActiveSpreadsheet and\n then getActiveSheet to act on the active Sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n \/\/ Returns the active cell\n var range = sheet.getActiveRange();\n ",
                "!type": "fn() -> SpreadsheetApp.Range"
            },
            "getActiveSheet": {
                "!doc": "Gets the active sheet in a spreadsheet.\n\n The active sheet in a spreadsheet is the sheet that is being displayed in the spreadsheet UI.\n\n \n \n var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\n ",
                "!type": "fn() -> SpreadsheetApp.Sheet"
            },
            "getAs": {
                "!doc": "Return the data inside this object as a blob converted to the specified content type. This\n method adds the appropriate extension to the filename ? for example, \"myfile.pdf\". However, it\n assumes that the part of the filename that follows the last period (if any) is an existing\n extension that should be replaced. Consequently, \"ChristmasList.12.25.2014\" will become\n \"ChristmasList.12.25.pdf\".",
                "!type": "fn(contentType: string) -> Blob"
            },
            "getBlob": {
                "!doc": "Return the data inside this object as a blob.",
                "!type": "fn() -> Blob"
            },
            "getColumnWidth": {
                "!doc": "Gets the width in pixels of the given column.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ Columns start at 1\n Logger.log(sheet.getColumnWidth(1));\n ",
                "!type": "fn(columnPosition: number) -> number"
            },
            "getDataRange": {
                "!doc": "Returns a Range corresponding to the dimensions in which data is present.\n\n This is functionally equivalent to creating a Range bounded by A1 and\n (Range.getLastColumn(), Range.getLastRow()).\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This represents ALL the data\n var range = sheet.getDataRange();\n var values = range.getValues();\n\n \/\/ This logs the spreadsheet in CSV format with a trailing comma\n for (var i = 0; i &lt; values.length; i++) {\n   var row = &quot;&quot;;\n   for (var j = 0; j &lt; values[i].length; j++) {\n     if (values[i][j]) {\n       row = row + values[i][j];\n     }\n     row = row + &quot;,&quot;;\n   }\n   Logger.log(row);\n }\n ",
                "!type": "fn() -> SpreadsheetApp.Range"
            },
            "getEditors": {
                "!doc": "Gets the list of editors for this Spreadsheet. If the user who executes the script does\n not have edit access to the Spreadsheet, this method throws an exception.",
                "!type": "fn() -> [User]"
            },
            "getFormUrl": {
                "!doc": "Returns the url for the form attached to the spreadsheet, null if there is no form.",
                "!type": "fn() -> string"
            },
            "getFrozenColumns": {
                "!doc": "Returns the number of frozen columns.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n Logger.log(&quot;Number of frozen columns: %s&quot;, sheet.getFrozenColumns());\n ",
                "!type": "fn() -> number"
            },
            "getFrozenRows": {
                "!doc": "Returns the number of frozen rows.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n Logger.log(&quot;Number of frozen rows: %s&quot;, sheet.getFrozenRows());\n ",
                "!type": "fn() -> number"
            },
            "getId": {
                "!doc": "Gets a unique identifier for this spreadsheet. A spreadsheet ID can be extracted from its URL.\n For example, the spreadsheet ID in the URL\n https:\/\/docs.google.com\/spreadsheets\/d\/abc1234567\/edit#gid=0 is \"abc1234567\".\n\n \n \n \/\/ The code below logs the ID for the active spreadsheet.\n Logger.log(SpreadsheetApp.getActiveSpreadsheet().getId());\n ",
                "!type": "fn() -> string"
            },
            "getLastColumn": {
                "!doc": "Returns the position of the last column that has content.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This logs the value in the very last cell of this sheet\n var lastRow = sheet.getLastRow();\n var lastColumn = sheet.getLastColumn();\n var lastCell = sheet.getRange(lastRow, lastColumn);\n Logger.log(lastCell.getValue());\n ",
                "!type": "fn() -> number"
            },
            "getLastRow": {
                "!doc": "Returns the position of the last row that has content.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This logs the value in the very last cell of this sheet\n var lastRow = sheet.getLastRow();\n var lastColumn = sheet.getLastColumn();\n var lastCell = sheet.getRange(lastRow, lastColumn);\n Logger.log(lastCell.getValue());\n ",
                "!type": "fn() -> number"
            },
            "getName": {
                "!doc": "Gets the name of the document.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n Logger.log(ss.getName());\n ",
                "!type": "fn() -> string"
            },
            "getNumSheets": {
                "!doc": "Returns the number of sheets in this spreadsheet.\n\n \n \n \/\/ The code below logs the number of sheets in the active spreadsheet.\n Logger.log(SpreadsheetApp.getActiveSpreadsheet().getNumSheets());\n ",
                "!type": "fn() -> number"
            },
            "getOwner": {
                "!doc": "Returns the owner of the document.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var owner = ss.getOwner();\n Logger.log(owner.getEmail());\n ",
                "!type": "fn() -> User"
            },
            "getProtections": {
                "!doc": "Gets an array of objects representing all protected ranges or sheets in the spreadsheet.\n\n \n \n \/\/ Remove all range protections in the spreadsheet that the user has permission to edit.\n var ss = SpreadsheetApp.getActive();\n var protections = ss.getProtections(SpreadsheetApp.ProtectionType.RANGE);\n for (var i = 0; i &lt; protections.length; i++) {\n   var protection = protections[i];\n   if (protection.canEdit()) {\n     protection.remove();\n   }\n }\n \n\n \n \n \/\/ Remove all sheet protections in the spreadsheet that the user has permission to edit.\n var ss = SpreadsheetApp.getActive();\n var protections = ss.getProtections(SpreadsheetApp.ProtectionType.SHEET);\n for (var i = 0; i &lt; protections.length; i++) {\n   var protection = protections[i];\n   if (protection.canEdit()) {\n     protection.remove();\n   }\n }\n ",
                "!type": "fn(type: SpreadsheetApp.ProtectionType) -> [SpreadsheetApp.Protection]"
            },
            "getRange": {
                "!doc": "Returns the range as specified in A1 notation or R1C1 notation.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n \/\/ Returns the first cell\n var cell = sheet.getRange(&quot;A1&quot;);\n ",
                "!type": "fn(a1Notation: string) -> SpreadsheetApp.Range"
            },
            "getRangeByName": {
                "!doc": "Returns a named range, or null if no range with the given name is found. If multiple\n sheets of the spreadsheet use the same range name, specify the sheet name without additional\n quotation marks ? for example, getRangeByName(&#39;TaxRates&#39;) or\n getRangeByName(&#39;Sheet Name!TaxRates&#39;), but not\n getRangeByName(&#39;&quot;Sheet Name&quot;!TaxRates&#39;).\n\n \n \n \/\/ Log the number of columns for the range named &#39;TaxRates&#39; in the active spreadsheet.\n var range = SpreadsheetApp.getActiveSpreadsheet().getRangeByName(&#39;TaxRates&#39;);\n if (range != null) {\n   Logger.log(range.getNumColumns());\n }\n ",
                "!type": "fn(name: string) -> SpreadsheetApp.Range"
            },
            "getRowHeight": {
                "!doc": "Gets the height in pixels of the given row.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ Rows start at 1\n Logger.log(sheet.getRowHeight(1));\n ",
                "!type": "fn(rowPosition: number) -> number"
            },
            "getSheetByName": {
                "!doc": "Returns a sheet with the given name.\n\n If multiple sheets have the same name, the leftmost one is returned. Returns null if there is\n no sheet with the given name.\n\n \n \n \/\/ The code below will log the index of a sheet named &quot;Expenses&quot;\n var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(&quot;Expenses&quot;);\n if (sheet != null) {\n   Logger.log(sheet.getIndex());\n }\n ",
                "!type": "fn(name: string) -> SpreadsheetApp.Sheet"
            },
            "getSheetId": {
                "!doc": "Returns the ID of the sheet represented by this object.\n\n This is an ID for the sheet that is unique to the spreadsheet. The ID is a monotonically\n increasing integer assigned at sheet creation time that is independent of sheet position.\n This is useful in conjunction with methods such as\n Range.copyFormatToRange(gridId, column, columnEnd, row, rowEnd) that take a gridId\n parameter rather than a Sheet instance.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n Logger.log(sheet.getSheetId());\n ",
                "!type": "fn() -> number"
            },
            "getSheetName": {
                "!doc": "Returns the sheet name.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n Logger.log(sheet.getSheetName());\n ",
                "!type": "fn() -> string"
            },
            "getSheetProtection": {
                "!doc": "Returns a PageProtection instance describing the permissions for the current sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var permissions = sheet.getSheetProtection();\n\n permissions.setProtected(true);\n permissions.addUser(&quot;user@example.com&quot;);\n\n \/\/ Logs the users that have access to edit this sheet. Note that this\n \/\/ is different from access to the entire spreadsheet - getUsers() will\n \/\/ only return users if permissions.isProtected() is set to true.\n var users = permissions.getUsers();\n Logger.log(users);\n ",
                "!type": "fn() -> SpreadsheetApp.PageProtection"
            },
            "getSheetValues": {
                "!doc": "Returns the rectangular grid of values for this range starting at the given\n coordinates. A -1 value given as the row or column position is equivalent to getting the\n very last row or column that has data in the sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ The two samples below produce the same output\n var values = sheet.getSheetValues(1, 1, 3, 3);\n Logger.log(values);\n\n var range = sheet.getRange(1, 1, 3, 3);\n values = range.getValues();\n Logger.log(values);\n ",
                "!type": "fn(startRow: number, startColumn: number, numRows: number, numColumns: number) -> [[object]]"
            },
            "getSheets": {
                "!doc": "Gets all the sheets in this spreadsheet.\n\n \n \n \/\/ The code below will log the name of the second sheet\n var sheets = SpreadsheetApp.getActiveSpreadsheet().getSheets();\n if (sheets.length &gt; 1) {\n   Logger.log(sheets[1].getName());\n }\n ",
                "!type": "fn() -> [SpreadsheetApp.Sheet]"
            },
            "getSpreadsheetLocale": {
                "!doc": "Gets the spreadsheet locale.",
                "!type": "fn() -> string"
            },
            "getSpreadsheetTimeZone": {
                "!doc": "Gets the time zone for the spreadsheet.",
                "!type": "fn() -> string"
            },
            "getUrl": {
                "!doc": "Returns the url for the given spreadsheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n Logger.log(ss.getUrl());\n ",
                "!type": "fn() -> string"
            },
            "getViewers": {
                "!doc": "Gets the list of viewers and commenters for this Spreadsheet.  If the user who executes\n the script does not have edit access to the Spreadsheet, this method throws an exception.",
                "!type": "fn() -> [User]"
            },
            "hideColumn": {
                "!doc": "Hides the columns in the given range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This hides the first column\n var range = sheet.getRange(&quot;A1&quot;);\n sheet.hideColumn(range);\n ",
                "!type": "fn(column: SpreadsheetApp.Range)"
            },
            "hideRow": {
                "!doc": "Hides the rows in the given range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This hides the first row\n var range = sheet.getRange(&quot;A1&quot;);\n sheet.hideRow(range);\n ",
                "!type": "fn(row: SpreadsheetApp.Range)"
            },
            "insertColumnAfter": {
                "!doc": "Inserts a column after the given column position.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This inserts a column after the first column position\n sheet.insertColumnAfter(1);\n ",
                "!type": "fn(afterPosition: number) -> SpreadsheetApp.Sheet"
            },
            "insertColumnBefore": {
                "!doc": "Inserts a column before the given column position.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This inserts a column in the first column position\n sheet.insertColumnBefore(1);\n ",
                "!type": "fn(beforePosition: number) -> SpreadsheetApp.Sheet"
            },
            "insertColumnsAfter": {
                "!doc": "Inserts a number of columns after the given column position.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This inserts a column in the second column position\n sheet.insertColumnsAfter(1);\n ",
                "!type": "fn(afterPosition: number, howMany: number) -> SpreadsheetApp.Sheet"
            },
            "insertColumnsBefore": {
                "!doc": "Inserts a number of columns before the given column position.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This inserts five columns before the first column\n sheet.insertColumnsBefore(1, 5);\n ",
                "!type": "fn(beforePosition: number, howMany: number) -> SpreadsheetApp.Sheet"
            },
            "insertImage": {
                "!doc": "Inserts a Blob as an image in the document at a given row and column. The image size\n is retrieved from the blob contents.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var blob = Utilities.newBlob(binaryData, &#39;image\/png&#39;, &#39;MyImageName&#39;);\n sheet.insertImage(blob, 1, 1);\n ",
                "!type": "fn(blob: Blob, column: number, row: number)"
            },
            "insertImage ": {
                "!doc": "Inserts a Blob as an image in the document at a given row and column, with a pixel\n offset. The image size is retrieved from the blob contents.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var blob = Utilities.newBlob(binaryData, &#39;image\/png&#39;, &#39;MyImageName&#39;);\n sheet.insertImage(blob, 1, 1, 10, 10);\n ",
                "!type": "fn(blob: Blob, column: number, row: number, offsetX: number, offsetY: number)"
            },
            "insertImage  ": {
                "!doc": "Inserts an image in the document at a given row and column.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n sheet.insertImage(&quot;https:\/\/www.google.com\/images\/srpr\/logo3w.png&quot;, 1, 1);\n ",
                "!type": "fn(url: string, column: number, row: number)"
            },
            "insertImage   ": {
                "!doc": "Inserts an image in the document at a given row and column, with a pixel offset.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n sheet.insertImage(&quot;https:\/\/www.google.com\/images\/srpr\/logo3w.png&quot;, 1, 1, 10, 10);\n ",
                "!type": "fn(url: string, column: number, row: number, offsetX: number, offsetY: number)"
            },
            "insertRowAfter": {
                "!doc": "Inserts a row after the given row position.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This inserts a row after the first row position\n sheet.insertRowAfter(1);\n ",
                "!type": "fn(afterPosition: number) -> SpreadsheetApp.Sheet"
            },
            "insertRowBefore": {
                "!doc": "Inserts a row before the given row position.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This inserts a row before the first row position\n sheet.insertRowBefore(1);\n ",
                "!type": "fn(beforePosition: number) -> SpreadsheetApp.Sheet"
            },
            "insertRowsAfter": {
                "!doc": "Inserts a number of rows after the given row position.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This inserts five rows after the first row\n sheet.insertRowsAfter(1, 5);\n ",
                "!type": "fn(afterPosition: number, howMany: number) -> SpreadsheetApp.Sheet"
            },
            "insertRowsBefore": {
                "!doc": "Inserts a number of rows before the given row position.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This inserts five rows before the first row\n sheet.insertRowsBefore(1, 5);\n ",
                "!type": "fn(beforePosition: number, howMany: number) -> SpreadsheetApp.Sheet"
            },
            "insertSheet": {
                "!doc": "Inserts a new sheet in the spreadsheet, with a default name.\n\n As a side effect, it makes it the active sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n ss.insertSheet();\n ",
                "!type": "fn() -> SpreadsheetApp.Sheet"
            },
            "insertSheet ": {
                "!doc": "Inserts a new sheet in the spreadsheet at the given index.\n\n As a side effect, it makes it the active sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n ss.insertSheet(1);\n ",
                "!type": "fn(sheetIndex: number) -> SpreadsheetApp.Sheet"
            },
            "insertSheet  ": {
                "!doc": "Inserts a new sheet in the spreadsheet at the given index and uses optional advanced arguments.\n\n As a side effect, it makes it the active sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var templateSheet = ss.getSheetByName(&#39;Sales&#39;);\n ss.insertSheet(1, {template: templateSheet});\n ",
                "!type": "fn(sheetIndex: number, options: object) -> SpreadsheetApp.Sheet"
            },
            "insertSheet   ": {
                "!doc": "Inserts a new sheet in the spreadsheet, with a default name and uses optional advanced\n arguments.\n\n As a side effect, it makes it the active sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var templateSheet = ss.getSheetByName(&#39;Sales&#39;);\n ss.insertSheet({template: templateSheet});\n ",
                "!type": "fn(options: object) -> SpreadsheetApp.Sheet"
            },
            "insertSheet    ": {
                "!doc": "Inserts a new sheet in the spreadsheet with the given name.\n\n As a side effect, it makes it the active sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n ss.insertSheet(&#39;My New Sheet&#39;);\n ",
                "!type": "fn(sheetName: string) -> SpreadsheetApp.Sheet"
            },
            "insertSheet     ": {
                "!doc": "Inserts a new sheet in the spreadsheet with the given name\n at the given index.\n\n As a side effect, it makes it the active sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n ss.insertSheet(&#39;My New Sheet&#39;, 1);\n ",
                "!type": "fn(sheetName: string, sheetIndex: number) -> SpreadsheetApp.Sheet"
            },
            "insertSheet      ": {
                "!doc": "Inserts a new sheet in the spreadsheet with the given name at the given index and uses optional\n advanced arguments.\n\n As a side effect, it makes it the active sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var templateSheet = ss.getSheetByName(&#39;Sales&#39;);\n ss.insertSheet(&#39;My New Sheet&#39;, 1, {template: templateSheet});\n ",
                "!type": "fn(sheetName: string, sheetIndex: number, options: object) -> SpreadsheetApp.Sheet"
            },
            "insertSheet       ": {
                "!doc": "Inserts a new sheet in the spreadsheet with the given name and uses optional advanced\n arguments.\n\n As a side effect, it makes it the active sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var templateSheet = ss.getSheetByName(&#39;Sales&#39;);\n ss.insertSheet(&#39;My New Sheet&#39;, {template: templateSheet});\n ",
                "!type": "fn(sheetName: string, options: object) -> SpreadsheetApp.Sheet"
            },
            "isAnonymousView": {
                "!doc": "Indicates whether the document allows anonymous viewing. As this is no longer supported in the\n new version of Google Sheets, use\n File.getSharingAccess() and\n File.getSharingPermission() instead.\n\n \n \n \/\/ Determine if the document allows anonymous viewing via the Drive API.\n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var file = DriveApp.getFileById(ss.getId());\n var access = file.getSharingAccess();\n var permission = file.getSharingPermission();\n var isAnonymousAccess =\n     access == DriveApp.Access.ANYONE || access == DriveApp.Access.ANYONE_WITH_LINK;\n var isAnonymousEdit = isAnonymousAccess &amp;&amp; permission != DriveApp.Permission.NONE;\n ",
                "!type": "fn() -> bool"
            },
            "isAnonymousWrite": {
                "!doc": "Indicates whether the document allows edits from anonymous users. As this is no longer\n supported in the\n new version of Google Sheets, use\n File.getSharingAccess() and\n File.getSharingPermission() instead.\n\n \n \n \/\/ Determine if the document allow anonymous edits via the Drive API.\n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var file = DriveApp.getFileById(ss.getId());\n var access = file.getSharingAccess();\n var permission = file.getSharingPermission();\n var isAnonymousAccess =\n     access == DriveApp.Access.ANYONE || access == DriveApp.Access.ANYONE_WITH_LINK;\n var isAnonymousEdit = isAnonymousAccess &amp;&amp; permission == DriveApp.Permission.EDIT;\n ",
                "!type": "fn() -> bool"
            },
            "moveActiveSheet": {
                "!doc": "Moves the active sheet to the given position in the list of sheets.\n Throws an exception if the position is negative or greater than the\n number of sheets.\n\n \n \n \/\/ This example assumes there are two sheets in the current\n \/\/ active spreadsheet: one named &quot;first&quot;, and another named &quot;second&quot;,\n \/\/ and that the current active sheet (first) is in position 1\n var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = spreadsheet.getSheetByName(&quot;first&quot;);\n\n \/\/ This should output &#39;Current index of sheet: 1&#39;\n Logger.log(&quot;Current index of sheet: %s&quot;, sheet.getIndex());\n\n spreadsheet.moveActiveSheet(2);\n\n \/\/ This should output &#39;New index of sheet: 2&#39;\n Logger.log(&quot;New index of sheet: %s&quot;, sheet.getIndex());\n ",
                "!type": "fn(pos: number)"
            },
            "removeEditor": {
                "!doc": "Removes the given user from the list of editors for the Spreadsheet. This method does not\n block users from accessing the Spreadsheet if they belong to a class of users who have\n general access ? for example, if the Spreadsheet is shared with the user's entire domain.",
                "!type": "fn(emailAddress: string) -> SpreadsheetApp.Spreadsheet"
            },
            "removeEditor ": {
                "!doc": "Removes the given user from the list of editors for the Spreadsheet. This method does not\n block users from accessing the Spreadsheet if they belong to a class of users who have\n general access ? for example, if the Spreadsheet is shared with the user's entire domain.",
                "!type": "fn(user: User) -> SpreadsheetApp.Spreadsheet"
            },
            "removeMenu": {
                "!doc": "Removes a menu that was added by addMenu(name, subMenus). The name argument\n should have the same value as the corresponding call to addMenu(name, subMenus).\n\n \n \n \/\/ The onOpen function is executed automatically every time a Spreadsheet is loaded\n function onOpen() {\n   var ss = SpreadsheetApp.getActiveSpreadsheet();\n   ss.addMenu(&quot;badMenu&quot;, [{name: &quot;remove bad menu&quot;, functionName: &quot;removeBadMenu&quot;},\n                                        {name: &quot;foo&quot;, functionName: &quot;foo&quot;}]);\n }\n function removeBadMenu() {\n   var ss = SpreadsheetApp.getActiveSpreadsheet();\n   ss.removeMenu(&quot;badMenu&quot;);\/\/name must match the name we used when added the menu\n }\n function foo(){\n \/\/do nothing\n }\n ",
                "!type": "fn(name: string)"
            },
            "removeNamedRange": {
                "!doc": "Deletes a named range with the given name. Throws an exception if no range with the given name\n is found in the spreadsheet.\n\n \n \/\/ The code below will create a new named range &quot;foo&quot;, and then remove it.\n var ss = SpreadsheetApp.getActiveSpreadsheet();\n ss.setNamedRange(&quot;foo&quot;, ss.getActiveRange());\n ss.removeNamedRange(&quot;foo&quot;);\n ",
                "!type": "fn(name: string)"
            },
            "removeViewer": {
                "!doc": "Removes the given user from the list of viewers and commenters for the Spreadsheet.  This\n method has no effect if the user is an editor, not a viewer or commenter. This method also does\n not block users from accessing the Spreadsheet if they belong to a class of users who\n have general access ? for example, if the Spreadsheet is shared with the user's entire\n domain.",
                "!type": "fn(emailAddress: string) -> SpreadsheetApp.Spreadsheet"
            },
            "removeViewer ": {
                "!doc": "Removes the given user from the list of viewers and commenters for the Spreadsheet.  This\n method has no effect if the user is an editor, not a viewer. This method also does not block\n users from accessing the Spreadsheet if they belong to a class of users who have general\n access ? for example, if the Spreadsheet is shared with the user's entire domain.",
                "!type": "fn(user: User) -> SpreadsheetApp.Spreadsheet"
            },
            "rename": {
                "!doc": "Renames the document.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n ss.rename(&quot;This is the new name&quot;);\n ",
                "!type": "fn(newName: string)"
            },
            "renameActiveSheet": {
                "!doc": "Renames the current active sheet to the given new name.\n\n \n \n \/\/ The code below will rename the active sheet to &quot;Hello world&quot;\n SpreadsheetApp.getActiveSpreadsheet().renameActiveSheet(&quot;Hello world&quot;);\n ",
                "!type": "fn(newName: string)"
            },
            "setActiveRange": {
                "!doc": "Sets the active range for the active sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;A1:D4&quot;);\n sheet.setActiveRange(range);\n ",
                "!type": "fn(range: SpreadsheetApp.Range) -> SpreadsheetApp.Range"
            },
            "setActiveSelection": {
                "!doc": "Sets the active selection region for this sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var range = sheet.getRange(&quot;A1:D4&quot;);\n sheet.setActiveSelection(range);\n ",
                "!type": "fn(range: SpreadsheetApp.Range) -> SpreadsheetApp.Range"
            },
            "setActiveSelection ": {
                "!doc": "Sets the active selection, as specified in A1 notation or R1C1 notation.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n sheet.setActiveSelection(&quot;A1:D4&quot;);\n ",
                "!type": "fn(a1Notation: string) -> SpreadsheetApp.Range"
            },
            "setActiveSheet": {
                "!doc": "Sets the given sheet to be the active sheet in the spreadsheet.\n\n The spreadsheet UI will display the chosen sheet unless the sheet belongs to a different\n spreadsheet.\n\n \n \n \/\/ The code below will make the first sheet active in the active workbook\n var ss = SpreadsheetApp.getActiveSpreadsheet();\n ss.setActiveSheet(ss.getSheets()[0]);\n ",
                "!type": "fn(sheet: SpreadsheetApp.Sheet) -> SpreadsheetApp.Sheet"
            },
            "setAnonymousAccess": {
                "!doc": "Sets the document's policy on anonymous reading and writing. As this is no longer supported in\n the new version of Google Sheets,\n use File.setSharing(accessType, permissionType) as an alternative.\n\n \n \n \/\/ Set the document&#39;s policy on anonymous reading and writing via the Drive API.\n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var file = DriveApp.getFileById(ss.getId());\n\n \/\/ Set anonymous read.\n file.setSharing(DriveApi.Access.ANYONE, DriveApi.Permission.VIEW);\n\n \/\/ Set anonymous write.\n file.setSharing(DriveApi.Access.ANYONE, DriveApi.Permission.EDIT);\n\n \/\/ Disable anonymous access.\n file.setSharing(DriveApi.Access.PRIVATE, file.getSharingPermission());\n ",
                "!type": "fn(anonymousReadAllowed: bool, anonymousWriteAllowed: bool)"
            },
            "setColumnWidth": {
                "!doc": "Sets the width of the given column in pixels.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ Sets the first column to a width of 200 pixels\n sheet.setColumnWidth(1, 200);\n ",
                "!type": "fn(columnPosition: number, width: number) -> SpreadsheetApp.Sheet"
            },
            "setFrozenColumns": {
                "!doc": "Freezes the given number of columns. If zero, no columns are frozen.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ Freezes the first column\n sheet.setFrozenColumns(1);\n ",
                "!type": "fn(columns: number)"
            },
            "setFrozenRows": {
                "!doc": "Freezes the given number of rows. If zero, no rows are frozen.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ Freezes the first row\n sheet.setFrozenRows(1);\n ",
                "!type": "fn(rows: number)"
            },
            "setNamedRange": {
                "!doc": "Names a range.\n\n \n \n \/\/ The code below will create a new named range &quot;TaxRates&quot; in the active spreadsheet\n var ss = SpreadsheetApp.getActiveSpreadsheet();\n ss.setNamedRange(&quot;TaxRates&quot;, SpreadsheetApp.getActiveRange());\n ",
                "!type": "fn(name: string, range: SpreadsheetApp.Range)"
            },
            "setRowHeight": {
                "!doc": "Sets the row height of the given row in pixels.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ Sets the first row to a height of 200 pixels\n sheet.setRowHeight(1, 200);\n ",
                "!type": "fn(rowPosition: number, height: number) -> SpreadsheetApp.Sheet"
            },
            "setSheetProtection": {
                "!doc": "Sets the permissions for the current sheet.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n var permissions = sheet.getSheetProtection();\n\n \/\/ This copies the permissions on the first sheet to the second sheet\n var sheetToClonePermissionsTo = ss.getSheets()[1];\n sheetToClonePermissionsTo.setSheetProtection(permissions);\n ",
                "!type": "fn(permissions: SpreadsheetApp.PageProtection)"
            },
            "setSpreadsheetLocale": {
                "!doc": "Sets the spreadsheet locale.",
                "!type": "fn(locale: string)"
            },
            "setSpreadsheetTimeZone": {
                "!doc": "Sets the time zone for the spreadsheet.",
                "!type": "fn(timezone: string)"
            },
            "show": {
                "!doc": "Displays a custom user interface component in a dialog centered in the user's browser's\n viewport. The server-side script's execution will not be suspended. To communicate\n with the server side, the user interface component must make asynchronous callbacks to the\n server-side script.\n\n If the server-side script previously displayed a dialog that has not yet been dismissed,\n then the existing dialog will be replaced with the newly requested dialog's user interface.\n\n The following code snippet displays a simple\n HtmlService application in a dialog with\n the specified title, height, and width:\n\n \n \n var htmlApp = HtmlService\n     .createHtmlOutput(&#39;&lt;p&gt;A change of speed, a change of style...&lt;\/p&gt;&#39;)\n     .setSandboxMode(HtmlService.SandboxMode.IFRAME)\n     .setTitle(&#39;My HtmlService Application&#39;)\n     .setWidth(250)\n     .setHeight(300);\n\n SpreadsheetApp.getActiveSpreadsheet().show(htmlApp);\n\n \/\/ The script resumes execution immediately after showing the dialog.\n \n\n Likewise, the following code snippet displays a simple\n UiApp application in a dialog with the\n specified title, height, and width:\n\n \n \n var uiApp = UiApp.createApplication()\n     .setTitle(&#39;My UiApp Application&#39;)\n     .setWidth(250)\n     .setHeight(300);\n uiApp.add(uiApp.createLabel(&#39;The photograph on the dashboard taken years ago...&#39;));\n\n SpreadsheetApp.getActiveSpreadsheet().show(uiApp);\n\n \/\/ The script resumes execution immediately after showing the dialog.\n ",
                "!type": "fn(userInterface: object)"
            },
            "sort": {
                "!doc": "Sorts a sheet by column, ascending.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ Sorts the sheet by the first column, ascending\n sheet.sort(1);\n ",
                "!type": "fn(columnPosition: number) -> SpreadsheetApp.Sheet"
            },
            "sort ": {
                "!doc": "Sorts a sheet by column. Takes a parameter to specify ascending or descending.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ Sorts the sheet by the first column, descending\n sheet.sort(1, false);\n ",
                "!type": "fn(columnPosition: number, ascending: bool) -> SpreadsheetApp.Sheet"
            },
            "toast": {
                "!doc": "Shows a popup window in the lower right corner of the spreadsheet with the given message.\n\n \n \n \/\/ Show a popup with the message &quot;Task started&quot;.\n SpreadsheetApp.getActiveSpreadsheet().toast(&#39;Task started&#39;);\n ",
                "!type": "fn(msg: string)"
            },
            "toast ": {
                "!doc": "Shows a popup window in the lower right corner of the spreadsheet with the given message and\n title.\n\n \n \n \/\/ Show a popup with the title &quot;Status&quot; and the message &quot;Task started&quot;.\n SpreadsheetApp.getActiveSpreadsheet().toast(&#39;Task started&#39;, &#39;Status&#39;);\n ",
                "!type": "fn(msg: string, title: string)"
            },
            "toast  ": {
                "!doc": "Shows a popup window in the lower right corner of the spreadsheet with the given title and\n message, that stays visible for a certain length of time.\n\n \n \n \/\/ Show a 3-second popup with the title &quot;Status&quot; and the message &quot;Task started&quot;.\n SpreadsheetApp.getActiveSpreadsheet().toast(&#39;Task started&#39;, &#39;Status&#39;, 3);\n ",
                "!type": "fn(msg: string, title: string, timeoutSeconds: number)"
            },
            "unhideColumn": {
                "!doc": "Unhides the column in the given range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This unhides the first column if it was previously hidden\n var range = sheet.getRange(&quot;A1&quot;);\n sheet.unhideColumn(range);\n ",
                "!type": "fn(column: SpreadsheetApp.Range)"
            },
            "unhideRow": {
                "!doc": "Unhides the row in the given range.\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var sheet = ss.getSheets()[0];\n\n \/\/ This unhides the first row if it was previously hidden\n var range = sheet.getRange(&quot;A1&quot;);\n sheet.unhideRow(range);\n ",
                "!type": "fn(row: SpreadsheetApp.Range)"
            },
            "updateMenu": {
                "!doc": "Updates a menu that was added by addMenu(name, subMenus). Works exactly like\n addMenu(name, subMenus).\n\n \n \n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var menuEntries = [];\n menuEntries.push({name: &quot;Lone Menu Entry&quot;, functionName: &quot;function1&quot;});\n ss.updateMenu(&quot;addMenuExample&quot;, menuEntries);\n ",
                "!type": "fn(name: string, subMenus: [object])"
            }
        },
        "Tasks.Collection.TasklistsCollection": {
            "get": {
                "!type": "fn(tasklist: string) -> Tasks.Schema.TaskList"
            },
            "insert": {
                "!type": "fn(resource: Tasks.Schema.TaskList) -> Tasks.Schema.TaskList"
            },
            "list": {
                "!type": "fn() -> Tasks.Schema.TaskLists"
            },
            "list ": {
                "!type": "fn(optionalArgs: object) -> Tasks.Schema.TaskLists"
            },
            "patch": {
                "!type": "fn(resource: Tasks.Schema.TaskList, tasklist: string) -> Tasks.Schema.TaskList"
            },
            "remove": {
                "!type": "fn(tasklist: string)"
            },
            "update": {
                "!type": "fn(resource: Tasks.Schema.TaskList, tasklist: string) -> Tasks.Schema.TaskList"
            }
        },
        "Tasks.Collection.TasksCollection": {
            "clear": {
                "!type": "fn(tasklist: string)"
            },
            "get": {
                "!type": "fn(tasklist: string, task: string) -> Tasks.Schema.Task"
            },
            "insert": {
                "!type": "fn(resource: Tasks.Schema.Task, tasklist: string) -> Tasks.Schema.Task"
            },
            "insert ": {
                "!type": "fn(resource: Tasks.Schema.Task, tasklist: string, optionalArgs: object) -> Tasks.Schema.Task"
            },
            "list": {
                "!type": "fn(tasklist: string) -> Tasks.Schema.Tasks"
            },
            "list ": {
                "!type": "fn(tasklist: string, optionalArgs: object) -> Tasks.Schema.Tasks"
            },
            "move": {
                "!type": "fn(tasklist: string, task: string) -> Tasks.Schema.Task"
            },
            "move ": {
                "!type": "fn(tasklist: string, task: string, optionalArgs: object) -> Tasks.Schema.Task"
            },
            "patch": {
                "!type": "fn(resource: Tasks.Schema.Task, tasklist: string, task: string) -> Tasks.Schema.Task"
            },
            "remove": {
                "!type": "fn(tasklist: string, task: string)"
            },
            "update": {
                "!type": "fn(resource: Tasks.Schema.Task, tasklist: string, task: string) -> Tasks.Schema.Task"
            }
        },
        "Tasks.Schema.Task": {
            "completed": {
                "!type": "string"
            },
            "deleted": {
                "!type": "bool"
            },
            "due": {
                "!type": "string"
            },
            "etag": {
                "!type": "string"
            },
            "hidden": {
                "!type": "bool"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "links": {
                "!type": "[Tasks.Schema.TaskLinks]"
            },
            "notes": {
                "!type": "string"
            },
            "parent": {
                "!type": "string"
            },
            "position": {
                "!type": "string"
            },
            "selfLink": {
                "!type": "string"
            },
            "status": {
                "!type": "string"
            },
            "title": {
                "!type": "string"
            },
            "updated": {
                "!type": "string"
            }
        },
        "Tasks.Schema.TaskLinks": {
            "description": {
                "!type": "string"
            },
            "link": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            }
        },
        "Tasks.Schema.TaskList": {
            "etag": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "selfLink": {
                "!type": "string"
            },
            "title": {
                "!type": "string"
            },
            "updated": {
                "!type": "string"
            }
        },
        "Tasks.Schema.TaskLists": {
            "etag": {
                "!type": "string"
            },
            "items": {
                "!type": "[Tasks.Schema.TaskList]"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            }
        },
        "Tasks.Schema.Tasks": {
            "etag": {
                "!type": "string"
            },
            "items": {
                "!type": "[Tasks.Schema.Task]"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            }
        },
        "Ui": {
            "Button": {
                "!doc": "An enum representing predetermined, localized dialog buttons returned by an\n alert or PromptResponse.getSelectedButton()\n to indicate which button in a dialog the user clicked.",
                "!type": "Button"
            },
            "ButtonSet": {
                "!doc": "An enum representing predetermined, localized sets of one or more dialog buttons that can be\n added to an alert or a\n prompt.",
                "!type": "ButtonSet"
            },
            "alert": {
                "!doc": "Opens a dialog box in the user's editor with the given message and an \"OK\" button. This method\n suspends the server-side script while the dialog is open. The script will resume after the user\n dismisses the dialog, but Jdbc\n connections will not persist across the suspension. For more information, see the\n guide to dialogs and sidebars.\n\n \n \/\/ Display \"Hello, world!\" in a dialog box with an \"OK\" button. The user can also close the\n \/\/ dialog by clicking the close button in its title bar.\n SpreadsheetApp.getUi().alert('Hello, world!');\n ",
                "!type": "fn(prompt: string) -> Button"
            },
            "alert ": {
                "!doc": "Opens a dialog box in the user's editor with the given message and set of buttons. This method\n suspends the server-side script while the dialog is open. The script will resume after the user\n dismisses the dialog, but Jdbc\n connections will not persist across the suspension. For more information, see the\n guide to dialogs and sidebars.\n\n \n \/\/ Display a dialog box with a message and \"Yes\" and \"No\" buttons. The user can also close the\n \/\/ dialog by clicking the close button in its title bar.\n var ui = SpreadsheetApp.getUi();\n var response = ui.alert('Are you sure you want to continue?', ui.ButtonSet.YES_NO);\n\n \/\/ Process the user's response.\n if (response == ui.Button.YES) {\n   Logger.log('The user clicked \"Yes.\"');\n } else {\n   Logger.log('The user clicked \"No\" or the close button in the dialog\\'s title bar.');\n }\n ",
                "!type": "fn(prompt: string, buttons: ButtonSet) -> Button"
            },
            "alert  ": {
                "!doc": "Opens a dialog box in the user's editor with the given title, message, and set of buttons. This\n method suspends the server-side script while the dialog is open. The script will resume after\n the user dismisses the dialog, but Jdbc\n connections will not persist across the suspension. For more information, see the\n guide to dialogs and sidebars.\n\n \n \/\/ Display a dialog box with a title, message, and \"Yes\" and \"No\" buttons. The user can also\n \/\/ close the dialog by clicking the close button in its title bar.\n var ui = SpreadsheetApp.getUi();\n var response = ui.alert('Confirm', 'Are you sure you want to continue?', ui.ButtonSet.YES_NO);\n\n \/\/ Process the user's response.\n if (response == ui.Button.YES) {\n   Logger.log('The user clicked \"Yes.\"');\n } else {\n   Logger.log('The user clicked \"No\" or the close button in the dialog\\'s title bar.');\n }\n ",
                "!type": "fn(title: string, prompt: string, buttons: ButtonSet) -> Button"
            },
            "createAddonMenu": {
                "!doc": "Creates a builder that can be used to insert a sub-menu into the editor's Add-on menu. The\n menu will not actually be updated until Menu.addToUi() is called. If the script is\n running as an add-on, the sub-menu name will match the add-on's name in the web store; if\n the script is bound to the document directly,\n the sub-menu name will match the script's name. For more information, see the\n guide to menus.\n\n \n \/\/ Add an item to the Add-on menu, under a sub-menu whose name is set automatically.\n function onOpen(e) {\n   SpreadsheetApp.getUi()\n       .createAddonMenu()\n       .addItem('Show', 'showSidebar')\n       .addToUi();\n }",
                "!type": "fn() -> Menu"
            },
            "createMenu": {
                "!doc": "Creates a builder that can be used to add a menu to the editor's user interface. The menu will\n not actually be added until Menu.addToUi() is called. For more information, see the\n guide to menus. The label for a top-level menu should\n be in headline case (all major words capitalized), although the label for a sub-menu should be\n in sentence case (only the first word capitalized). If the script is published as an\n add-on, the caption parameter is ignored and the\n menu is added as a sub-menu of the Add-ons menu, equivalent to createAddonMenu().\n\n \n \/\/ Add a custom menu to the active document, including a separator and a sub-menu.\n function onOpen(e) {\n   SpreadsheetApp.getUi()\n       .createMenu('My Menu')\n       .addItem('My menu item', 'myFunction')\n       .addSeparator()\n       .addSubMenu(SpreadsheetApp.getUi().createMenu('My sub-menu')\n           .addItem('One sub-menu item', 'mySecondFunction')\n           .addItem('Another sub-menu item', 'myThirdFunction'))\n       .addToUi();\n }\n ",
                "!type": "fn(caption: string) -> Menu"
            },
            "prompt": {
                "!doc": "Opens an input dialog box in the user's editor with the given message and an \"OK\" button. This\n method suspends the server-side script while the dialog is open. The script will resume after\n the user dismisses the dialog, but Jdbc\n connections will not persist across the suspension. For more information, see the\n guide to dialogs and sidebars.\n\n \n \/\/ Display a dialog box with a message, input field, and an \"OK\" button. The user can also\n \/\/ close the dialog by clicking the close button in its title bar.\n var ui = SpreadsheetApp.getUi();\n var response = ui.prompt('Enter your name:');\n\n \/\/ Process the user's response.\n if (response.getSelectedButton() == ui.Button.OK) {\n   Logger.log('The user\\'s name is %s.', response.getResponseText());\n } else {\n   Logger.log('The user clicked the close button in the dialog\\'s title bar.');\n }\n ",
                "!type": "fn(prompt: string) -> PromptResponse"
            },
            "prompt ": {
                "!doc": "Opens an input dialog box in the user's editor with the given message and set of buttons. This\n method suspends the server-side script while the dialog is open. The script will resume after\n the user dismisses the dialog, but Jdbc\n connections will not persist across the suspension. For more information, see the\n guide to dialogs and sidebars.\n\n \n \/\/ Display a dialog box with a message, input field, and \"Yes\" and \"No\" buttons. The user can\n \/\/ also close the dialog by clicking the close button in its title bar.\n var ui = SpreadsheetApp.getUi();\n var response = ui.prompt('May I know your name?', ui.ButtonSet.YES_NO);\n\n \/\/ Process the user's response.\n if (response.getSelectedButton() == ui.Button.YES) {\n   Logger.log('The user\\'s name is %s.', response.getResponseText());\n } else if (response.getSelectedButton() == ui.Button.NO) {\n   Logger.log('The user didn\\'t want to provide a name.');\n } else {\n   Logger.log('The user clicked the close button in the dialog\\'s title bar.');\n }\n ",
                "!type": "fn(prompt: string, buttons: ButtonSet) -> PromptResponse"
            },
            "prompt  ": {
                "!doc": "Opens an input dialog box in the user's editor with the given title, message, and set of\n buttons. This method suspends the server-side script while the dialog is open. The script will\n resume after the user dismisses the dialog, but\n Jdbc connections will not persist across\n the suspension. For more information, see the\n guide to dialogs and sidebars.\n\n \n \/\/ Display a dialog box with a title, message, input field, and \"Yes\" and \"No\" buttons. The\n \/\/ user can also close the dialog by clicking the close button in its title bar.\n var ui = SpreadsheetApp.getUi();\n var response = ui.prompt('Getting to know you', 'May I know your name?', ui.ButtonSet.YES_NO);\n\n \/\/ Process the user's response.\n if (response.getSelectedButton() == ui.Button.YES) {\n   Logger.log('The user\\'s name is %s.', response.getResponseText());\n } else if (response.getSelectedButton() == ui.Button.NO) {\n   Logger.log('The user didn\\'t want to provide a name.');\n } else {\n   Logger.log('The user clicked the close button in the dialog\\'s title bar.');\n }\n ",
                "!type": "fn(title: string, prompt: string, buttons: ButtonSet) -> PromptResponse"
            },
            "showDialog": {
                "!doc": "Opens a dialog box in the user's editor with custom client-side content. This method does\n not suspend the server-side script while the dialog is open. To communicate with the\n server-side script, the client-side component must make asynchronous callbacks using either the\n google.script API for\n HtmlService or\n server handlers for\n UiApp. To close the dialog\n programmatically, call \n google.script.host.close() on the client side of an HtmlService web\n app or UiInstance.close() from a\n UiApp web app. For more information, see the\n guide to dialogs and sidebars.\n\n \n \n \/\/ Display a dialog box with custom HtmlService content.\n var htmlOutput = HtmlService\n     .createHtmlOutput(&#39;&lt;p&gt;A change of speed, a change of style...&lt;\/p&gt;&#39;)\n     .setSandboxMode(HtmlService.SandboxMode.IFRAME)\n     .setTitle(&#39;My add-on&#39;)\n     .setWidth(250)\n     .setHeight(300);\n SpreadsheetApp.getUi().showDialog(htmlOutput);\n\n \/\/ Display a dialog box with custom UiApp content.\n var uiInstance = UiApp.createApplication()\n     .setTitle(&#39;My add-on&#39;)\n     .setWidth(250)\n     .setHeight(300);\n uiInstance.add(uiInstance.createLabel(&#39;The photograph on the dashboard taken years ago...&#39;));\n SpreadsheetApp.getUi().showDialog(uiInstance);\n ",
                "!type": "fn(userInterface: object)"
            },
            "showModalDialog": {
                "!doc": "Opens a modal dialog box in the user's editor with custom client-side content. This method does\n not suspend the server-side script while the dialog is open. To communicate with the\n server-side script, the client-side component must make asynchronous callbacks using either\n the google.script API for\n HtmlService or\n server handlers for\n UiApp. To close the dialog\n programmatically, call \n google.script.host.close() on the client side of an HtmlService web\n app or UiInstance.close() from a\n UiApp web app. For more information, see the\n guide to dialogs and sidebars.\n\n Modal dialogs prevent the user from interacting with anything other than the dialog. By\n contrast, modeless dialogs and\n sidebars let the user interact with\n the editor. In almost all cases, a modal dialog or sidebar is a better choice than a modeless\n dialog.\n\n \n \n \/\/ Display a modal dialog box with custom HtmlService content.\n var htmlOutput = HtmlService\n     .createHtmlOutput(&#39;&lt;p&gt;A change of speed, a change of style...&lt;\/p&gt;&#39;)\n     .setSandboxMode(HtmlService.SandboxMode.IFRAME)\n     .setWidth(250)\n     .setHeight(300);\n SpreadsheetApp.getUi().showModalDialog(htmlOutput, &#39;My add-on&#39;);\n\n \/\/ Display a modal dialog box with custom UiApp content.\n var uiInstance = UiApp.createApplication()\n     .setWidth(250)\n     .setHeight(300);\n uiInstance.add(uiInstance.createLabel(&#39;The photograph on the dashboard taken years ago...&#39;));\n SpreadsheetApp.getUi().showModalDialog(uiInstance, &#39;My add-on&#39;);\n ",
                "!type": "fn(userInterface: object, title: string)"
            },
            "showModelessDialog": {
                "!doc": "Opens a modeless dialog box in the user's editor with custom client-side content. This method\n does not suspend the server-side script while the dialog is open. To communicate with\n the server-side script, the client-side component must make asynchronous callbacks using either\n the google.script API for\n HtmlService or\n server handlers for\n UiApp. To close the dialog\n programmatically, call \n google.script.host.close() on the client side of an HtmlService web\n app or UiInstance.close() from a\n UiApp web app. For more information, see the\n guide to dialogs and sidebars.\n\n Modeless dialogs let the user interact with the editor behind the dialog. By contrast,\n modal dialogs do not. In almost all cases, a modal\n dialog or sidebar is a better choice than a modeless dialog.\n \n\n \n \n \/\/ Display a modeless dialog box with custom HtmlService content.\n var htmlOutput = HtmlService\n     .createHtmlOutput(&#39;&lt;p&gt;A change of speed, a change of style...&lt;\/p&gt;&#39;)\n     .setSandboxMode(HtmlService.SandboxMode.IFRAME)\n     .setWidth(250)\n     .setHeight(300);\n SpreadsheetApp.getUi().showModelessDialog(htmlOutput, &#39;My add-on&#39;);\n\n \/\/ Display a modeless dialog box with custom UiApp content.\n var uiInstance = UiApp.createApplication()\n     .setWidth(250)\n     .setHeight(300);\n uiInstance.add(uiInstance.createLabel(&#39;The photograph on the dashboard taken years ago...&#39;));\n SpreadsheetApp.getUi().showModelessDialog(uiInstance, &#39;My add-on&#39;);\n ",
                "!type": "fn(userInterface: object, title: string)"
            },
            "showSidebar": {
                "!doc": "Opens a sidebar in the user's editor with custom client-side content. This method does\n not suspend the server-side script while the sidebar is open. To communicate with the\n server-side script, the client-side component must make asynchronous callbacks using either\n the google.script API for\n HtmlService or\n server handlers for\n UiApp. To close the sidebar\n programmatically, call \n google.script.host.close() on the client side of an HtmlService web\n app or UiInstance.close() from a\n UiApp web app. For more information, see the\n guide to dialogs and sidebars.\n\n The sidebar will display on the right side of the editor for users whose environments use a\n left-to-right language and on the left side of the editor for right-to-left languages. All\n sidebars shown by scripts are 300 pixels wide.\n\n \n \n \/\/ Display a sidebar with custom HtmlService content.\n var htmlOutput = HtmlService\n     .createHtmlOutput(&#39;&lt;p&gt;A change of speed, a change of style...&lt;\/p&gt;&#39;)\n     .setSandboxMode(HtmlService.SandboxMode.IFRAME)\n     .setTitle(&#39;My add-on&#39;);\n SpreadsheetApp.getUi().showSidebar(htmlOutput);\n\n \/\/ Display a sidebar with custom UiApp content.\n var uiInstance = UiApp.createApplication()\n     .setTitle(&#39;My add-on&#39;);\n uiInstance.add(uiInstance.createLabel(&#39;The photograph on the dashboard taken years ago...&#39;));\n SpreadsheetApp.getUi().showSidebar(uiInstance);\n ",
                "!type": "fn(userInterface: object)"
            }
        },
        "UrlFetchApp.HTTPResponse": {
            "getAllHeaders": {
                "!doc": "Returns an attribute\/value map of headers for the HTTP response, with headers that have\n multiple values returned as arrays.\n\n \n \n   \/\/ The code below logs the HTTP headers from the response\n   \/\/ received when fetching the Google home page.\n   var response = UrlFetchApp.fetch(&quot;http:\/\/www.google.com\/&quot;);\n   Logger.log(response.getAllHeaders().toSource());\n ",
                "!type": "fn() -> object"
            },
            "getAs": {
                "!doc": "Return the data inside this object as a blob converted to the specified content type. This\n method adds the appropriate extension to the filename ? for example, \"myfile.pdf\". However, it\n assumes that the part of the filename that follows the last period (if any) is an existing\n extension that should be replaced. Consequently, \"ChristmasList.12.25.2014\" will become\n \"ChristmasList.12.25.pdf\".",
                "!type": "fn(contentType: string) -> Blob"
            },
            "getBlob": {
                "!doc": "Return the data inside this object as a blob.",
                "!type": "fn() -> Blob"
            },
            "getContent": {
                "!doc": "Gets the raw binary content of an HTTP response.\n\n \n \n   \/\/ The code below logs the value of the first byte of the Google home page.\n   var response = UrlFetchApp.fetch(&quot;http:\/\/www.google.com\/&quot;);\n   Logger.log(response.getContent()[0]);\n ",
                "!type": "fn() -> [number]"
            },
            "getContentText": {
                "!doc": "Gets the content of an HTTP response encoded as a string.\n\n \n \n   \/\/ The code below logs the HTML code of the Google home page.\n   var response = UrlFetchApp.fetch(&quot;http:\/\/www.google.com\/&quot;);\n   Logger.log(response.getContentText());\n ",
                "!type": "fn() -> string"
            },
            "getContentText ": {
                "!doc": "Returns the content of an HTTP response encoded as a string of the given charset.\n\n \n \n   \/\/ The code below logs the HTML code of the Google home page with the UTF-8 charset.\n   var response = UrlFetchApp.fetch(&quot;http:\/\/www.google.com\/&quot;);\n   Logger.log(response.getContentText(&quot;UTF-8&quot;));\n ",
                "!type": "fn(charset: string) -> string"
            },
            "getHeaders": {
                "!doc": "Returns an attribute\/value map of headers for the HTTP response.\n\n \n \n   \/\/ The code below logs the HTTP headers from the response\n   \/\/ received when fetching the Google home page.\n   var response = UrlFetchApp.fetch(&quot;http:\/\/www.google.com\/&quot;);\n   Logger.log(response.getHeaders().toSource());\n ",
                "!type": "fn() -> object"
            },
            "getResponseCode": {
                "!doc": "Get the HTTP status code (200 for OK, etc.) of an HTTP response.\n\n \n \n   \/\/ The code below logs the HTTP status code from the response received\n   \/\/ when fetching the Google home page.\n   \/\/ It should be 200 if the request succeeded.\n   var response = UrlFetchApp.fetch(&quot;http:\/\/www.google.com\/&quot;);\n   Logger.log(response.getResponseCode());\n ",
                "!type": "fn() -> number"
            }
        },
        "User": {
            "getEmail": {
                "!doc": "Gets the user's email address, if available. If security policies do not allow access to the\n user's email address, this method returns a blank string. The circumstances in which the email\n address is available vary: for example, the user's email address is not available in any\n context that allows a script to run without that user's authorization, like a simple\n onOpen(e) or onEdit(e) trigger, a custom function in Google Sheets, or a web\n app deployed to \"execute as me\" (that is, authorized by the developer instead of the user).\n However, these restrictions generally do not apply if the developer and the user belong to the\n same Google Apps for Business domain.\n\n \n \/\/ Log the email address of the person running the script.\n Logger.log(Session.getActiveUser().getEmail());\n ",
                "!type": "fn() -> string"
            },
            "getUserLoginId": {
                "!doc": "Gets the user's email address.\n\n \n \/\/ Log the email address of the person running the script.\n Logger.log(Session.getActiveUser().getUserLoginId());\n ",
                "!type": "fn() -> string"
            }
        },
        "Utilities.Charset": {
            "US_ASCII": {
                "!doc": "",
                "!type": "Utilities.Charset"
            },
            "UTF_8": {
                "!doc": "",
                "!type": "Utilities.Charset"
            }
        },
        "Utilities.MacAlgorithm": {
            "HMAC_MD5": {
                "!doc": "",
                "!type": "Utilities.MacAlgorithm"
            },
            "HMAC_SHA_1": {
                "!doc": "",
                "!type": "Utilities.MacAlgorithm"
            },
            "HMAC_SHA_256": {
                "!doc": "",
                "!type": "Utilities.MacAlgorithm"
            },
            "HMAC_SHA_384": {
                "!doc": "",
                "!type": "Utilities.MacAlgorithm"
            },
            "HMAC_SHA_512": {
                "!doc": "",
                "!type": "Utilities.MacAlgorithm"
            }
        },
        "Weekday": {
            "FRIDAY": {
                "!doc": "Friday.",
                "!type": "Weekday"
            },
            "MONDAY": {
                "!doc": "Monday.",
                "!type": "Weekday"
            },
            "SATURDAY": {
                "!doc": "Saturday.",
                "!type": "Weekday"
            },
            "SUNDAY": {
                "!doc": "Sunday.",
                "!type": "Weekday"
            },
            "THURSDAY": {
                "!doc": "Thursday.",
                "!type": "Weekday"
            },
            "TUESDAY": {
                "!doc": "Tuesday.",
                "!type": "Weekday"
            },
            "WEDNESDAY": {
                "!doc": "Wednesday.",
                "!type": "Weekday"
            }
        },
        "XmlService.Attribute": {
            "getName": {
                "!doc": "Gets the local name of the attribute. If the attribute has a namespace prefix, use\n getNamespace().getPrefix() to get the prefix.",
                "!type": "fn() -> string"
            },
            "getNamespace": {
                "!doc": "Gets the namespace for the attribute.",
                "!type": "fn() -> XmlService.Namespace"
            },
            "getValue": {
                "!doc": "Gets the value of the attribute.",
                "!type": "fn() -> string"
            },
            "setName": {
                "!doc": "Sets the local name of the attribute. To set a namespace prefix for the attribute, use\n setNamespace(namespace) in conjunction with\n XmlService.getNamespace(prefix, uri).",
                "!type": "fn(name: string) -> XmlService.Attribute"
            },
            "setNamespace": {
                "!doc": "Sets the namespace for the attribute. The namespace must have a prefix.",
                "!type": "fn(namespace: XmlService.Namespace) -> XmlService.Attribute"
            },
            "setValue": {
                "!doc": "Sets the value of the attribute.",
                "!type": "fn(value: string) -> XmlService.Attribute"
            }
        },
        "XmlService.Cdata": {
            "append": {
                "!doc": "Appends the given text to any content that already exists in the node.",
                "!type": "fn(text: string) -> XmlService.Text"
            },
            "detach": {
                "!doc": "Detaches the node from its parent Element node. If the node does not have a parent,\n this method has no effect.",
                "!type": "fn() -> XmlService.Content"
            },
            "getParentElement": {
                "!doc": "Gets the node's parent Element node. If the node does not have a parent, this method\n returns null.",
                "!type": "fn() -> XmlService.Element"
            },
            "getText": {
                "!doc": "Gets the text value of the Text node.",
                "!type": "fn() -> string"
            },
            "getValue": {
                "!doc": "Gets the text value of all nodes that are direct or indirect children of the node, in the order\n they appear in the document.",
                "!type": "fn() -> string"
            },
            "setText": {
                "!doc": "Sets the text value of the Text node.",
                "!type": "fn(text: string) -> XmlService.Text"
            }
        },
        "XmlService.Comment": {
            "detach": {
                "!doc": "Detaches the node from its parent Element node. If the node does not have a parent,\n this method has no effect.",
                "!type": "fn() -> XmlService.Content"
            },
            "getParentElement": {
                "!doc": "Gets the node's parent Element node. If the node does not have a parent, this method\n returns null.",
                "!type": "fn() -> XmlService.Element"
            },
            "getText": {
                "!doc": "Gets the text value of the Comment node.",
                "!type": "fn() -> string"
            },
            "getValue": {
                "!doc": "Gets the text value of all nodes that are direct or indirect children of the node, in the order\n they appear in the document.",
                "!type": "fn() -> string"
            },
            "setText": {
                "!doc": "Sets the text value of the Comment node.",
                "!type": "fn(text: string) -> XmlService.Comment"
            }
        },
        "XmlService.Content": {
            "asCdata": {
                "!doc": "Casts the node as a CDATASection node for the purposes of autocomplete. If the\n node's ContentType is not already CDATA, this method returns null.",
                "!type": "fn() -> XmlService.Cdata"
            },
            "asComment": {
                "!doc": "Casts the node as a Comment node for the purposes of autocomplete. If the node's\n ContentType is not already COMMENT, this method returns null.",
                "!type": "fn() -> XmlService.Comment"
            },
            "asDocType": {
                "!doc": "Casts the node as a DocumentType node for the purposes of autocomplete. If\n the node's ContentType is not already DOCTYPE, this method returns\n null.",
                "!type": "fn() -> XmlService.DocType"
            },
            "asElement": {
                "!doc": "Casts the node as an Element node for the purposes of autocomplete. If the node's\n ContentType is not already ELEMENT, this method returns null.",
                "!type": "fn() -> XmlService.Element"
            },
            "asEntityRef": {
                "!doc": "Casts the node as a EntityReference node for the purposes of autocomplete.\n If the node's ContentType is not already ENTITYREF, this method returns\n null.",
                "!type": "fn() -> XmlService.EntityRef"
            },
            "asProcessingInstruction": {
                "!doc": "Casts the node as a ProcessingInstruction node for the purposes of autocomplete. If\n the node's ContentType is not already PROCESSINGINSTRUCTION, this method\n returns null.",
                "!type": "fn() -> XmlService.ProcessingInstruction"
            },
            "asText": {
                "!doc": "Casts the node as a Text node for the purposes of autocomplete. If the node's\n ContentType is not already TEXT, this method returns null.",
                "!type": "fn() -> XmlService.Text"
            },
            "detach": {
                "!doc": "Detaches the node from its parent Element node. If the node does not have a parent,\n this method has no effect.",
                "!type": "fn() -> XmlService.Content"
            },
            "getParentElement": {
                "!doc": "Gets the node's parent Element node. If the node does not have a parent, this method\n returns null.",
                "!type": "fn() -> XmlService.Element"
            },
            "getType": {
                "!doc": "Gets the node's content type.",
                "!type": "fn() -> XmlService.ContentType"
            },
            "getValue": {
                "!doc": "Gets the text value of all nodes that are direct or indirect children of the node, in the order\n they appear in the document.",
                "!type": "fn() -> string"
            }
        },
        "XmlService.ContentType": {
            "CDATA": {
                "!doc": "An XML CDATASection node.",
                "!type": "XmlService.ContentType"
            },
            "COMMENT": {
                "!doc": "An XML Comment node.",
                "!type": "XmlService.ContentType"
            },
            "DOCTYPE": {
                "!doc": "An XML DocumentType node.",
                "!type": "XmlService.ContentType"
            },
            "ELEMENT": {
                "!doc": "An XML Element node.",
                "!type": "XmlService.ContentType"
            },
            "ENTITYREF": {
                "!doc": "An XML EntityReference node.",
                "!type": "XmlService.ContentType"
            },
            "PROCESSINGINSTRUCTION": {
                "!doc": "An XML ProcessingInstruction node.",
                "!type": "XmlService.ContentType"
            },
            "TEXT": {
                "!doc": "An XML Text node.",
                "!type": "XmlService.ContentType"
            }
        },
        "XmlService.DocType": {
            "detach": {
                "!doc": "Detaches the node from its parent Element node. If the node does not have a parent,\n this method has no effect.",
                "!type": "fn() -> XmlService.Content"
            },
            "getElementName": {
                "!doc": "Gets the name of the root Element node specified in the DocType declaration.",
                "!type": "fn() -> string"
            },
            "getInternalSubset": {
                "!doc": "Gets the internal subset data for the DocumentType node.",
                "!type": "fn() -> string"
            },
            "getParentElement": {
                "!doc": "Gets the node's parent Element node. If the node does not have a parent, this method\n returns null.",
                "!type": "fn() -> XmlService.Element"
            },
            "getPublicId": {
                "!doc": "Gets the public ID of the external subset data for the DocumentType node.",
                "!type": "fn() -> string"
            },
            "getSystemId": {
                "!doc": "Gets the system ID of the external subset data for the DocumentType node.",
                "!type": "fn() -> string"
            },
            "getValue": {
                "!doc": "Gets the text value of all nodes that are direct or indirect children of the node, in the order\n they appear in the document.",
                "!type": "fn() -> string"
            },
            "setElementName": {
                "!doc": "Sets the name of the root Element node to specify in the DocType\n declaration.",
                "!type": "fn(name: string) -> XmlService.DocType"
            },
            "setInternalSubset": {
                "!doc": "Sets the internal subset data for the DocumentType node.",
                "!type": "fn(data: string) -> XmlService.DocType"
            },
            "setPublicId": {
                "!doc": "Sets the public ID of the external subset data for the DocumentType node.",
                "!type": "fn(id: string) -> XmlService.DocType"
            },
            "setSystemId": {
                "!doc": "Sets the system ID of the external subset data for the DocumentType node.",
                "!type": "fn(id: string) -> XmlService.DocType"
            }
        },
        "XmlService.Document": {
            "addContent": {
                "!doc": "Inserts the given node at the given index among all nodes that are immediate children of the\n document. The content argument can be a Content object or any node object\n that corresponds to a type listed in ContentType. Note, however, that a document\n can only have one child Element node, which is implicitly the root Element\n node.",
                "!type": "fn(index: number, content: XmlService.Content) -> XmlService.Document"
            },
            "addContent ": {
                "!doc": "Appends the given node to the end of the document. The content argument can be a\n Content object or any node object that corresponds to a type listed in \n ContentType. Note, however, that a document can only have one child\n Element node, which is implicitly the root Element node.",
                "!type": "fn(content: XmlService.Content) -> XmlService.Document"
            },
            "cloneContent": {
                "!doc": "Creates unattached copies of all nodes that are immediate children of the document.",
                "!type": "fn() -> [XmlService.Content]"
            },
            "detachRootElement": {
                "!doc": "Detaches and returns the document's root Element node. If the document does not have\n a root Element node, this method returns null.",
                "!type": "fn() -> XmlService.Element"
            },
            "getAllContent": {
                "!doc": "Gets all nodes that are immediate children of the document.",
                "!type": "fn() -> [XmlService.Content]"
            },
            "getContent": {
                "!doc": "Gets the node at the given index among all nodes that are immediate children of the\n document. If there is no node at the given index, this method returns null.",
                "!type": "fn(index: number) -> XmlService.Content"
            },
            "getContentSize": {
                "!doc": "Gets the number of nodes that are immediate children of the document.",
                "!type": "fn() -> number"
            },
            "getDescendants": {
                "!doc": "Gets all nodes that are direct or indirect children of the document, in the order they\n appear in the document.",
                "!type": "fn() -> [XmlService.Content]"
            },
            "getDocType": {
                "!doc": "Gets the document's DocType declaration. If the document does not have a\n DocumentType node, this method returns null.",
                "!type": "fn() -> XmlService.DocType"
            },
            "getRootElement": {
                "!doc": "Gets the document's root Element node. If the document does not have a root\n Element node, this method returns null.",
                "!type": "fn() -> XmlService.Element"
            },
            "hasRootElement": {
                "!doc": "Determines whether the document has a root Element node.",
                "!type": "fn() -> bool"
            },
            "removeContent": {
                "!doc": "Removes all nodes that are immediate children of the document.",
                "!type": "fn() -> [XmlService.Content]"
            },
            "removeContent ": {
                "!doc": "Removes the node at the given index among all nodes that are immediate children of the\n document. If there is no node at the given index, this method returns null.",
                "!type": "fn(index: number) -> XmlService.Content"
            },
            "removeContent  ": {
                "!doc": "Removes the given node, if the node is an immediate child of the document. The\n content argument can be a Content object or any node object that corresponds\n to a type listed in ContentType.",
                "!type": "fn(content: XmlService.Content) -> bool"
            },
            "setDocType": {
                "!doc": "Sets the document's DocType declaration. If the document already has a different\n DocType node, this method overwrites the old node. This method throws an exception if\n the document already contains the same DocType node that is being set.",
                "!type": "fn(docType: XmlService.DocType) -> XmlService.Document"
            },
            "setRootElement": {
                "!doc": "Sets the document's root Element node. If the document already has a root\n Element node, this method overwrites the old node.",
                "!type": "fn(element: XmlService.Element) -> XmlService.Document"
            }
        },
        "XmlService.Element": {
            "addContent": {
                "!doc": "Inserts the given node at the given index among all nodes that are immediate children of the\n Element node. The content argument can be a Element object or any\n node object that corresponds to a type listed in ContentType.",
                "!type": "fn(index: number, content: XmlService.Content) -> XmlService.Element"
            },
            "addContent ": {
                "!doc": "Appends the given node as the last child of the Element node. The content\n argument can be a Element object or any node object that corresponds to a type\n listed in ContentType.",
                "!type": "fn(content: XmlService.Content) -> XmlService.Element"
            },
            "cloneContent": {
                "!doc": "Creates unattached copies of all nodes that are immediate children of the {@code Element} node.",
                "!type": "fn() -> [XmlService.Content]"
            },
            "detach": {
                "!doc": "Detaches the node from its parent Element node. If the node does not have a parent,\n this method has no effect.",
                "!type": "fn() -> XmlService.Content"
            },
            "getAllContent": {
                "!doc": "Gets all nodes that are immediate children of the {@code Element} node.",
                "!type": "fn() -> [XmlService.Content]"
            },
            "getAttribute": {
                "!doc": "Gets the attribute for this Element node with the given name and no namespace. If there\n is no such attribute, this method returns null.",
                "!type": "fn(name: string) -> XmlService.Attribute"
            },
            "getAttribute ": {
                "!doc": "Gets the attribute for this Element node with the given name and namespace. If there is\n no such node, this method returns null.",
                "!type": "fn(name: string, namespace: XmlService.Namespace) -> XmlService.Attribute"
            },
            "getAttributes": {
                "!doc": "Gets all attributes for this Element node, in the order they appear in the document.",
                "!type": "fn() -> [XmlService.Attribute]"
            },
            "getChild": {
                "!doc": "Gets the first Element node with the given name and no namespace that is an immediate\n child of this Element node. If there is no such node, this method returns null.",
                "!type": "fn(name: string) -> XmlService.Element"
            },
            "getChild ": {
                "!doc": "Gets the first Element node with the given name and namespace that is an immediate\n child of this Element node. If there is no such node, this method returns null.",
                "!type": "fn(name: string, namespace: XmlService.Namespace) -> XmlService.Element"
            },
            "getChildText": {
                "!doc": "Gets the text value of the node with the given name and no namespace, if the node is an\n immediate child of the Element node. If there is no such node, this method returns\n null.",
                "!type": "fn(name: string) -> string"
            },
            "getChildText ": {
                "!doc": "Gets the text value of the node with the given name and namespace, if the node is an immediate\n child of the Element node. If there is no such node, this method returns null.",
                "!type": "fn(name: string, namespace: XmlService.Namespace) -> string"
            },
            "getChildren": {
                "!doc": "Gets all Element nodes that are immediate children of this Element node, in the\n order they appear in the document.",
                "!type": "fn() -> [XmlService.Element]"
            },
            "getChildren ": {
                "!doc": "Gets all Element nodes with the given name and no namespace that are immediate children\n of this Element node, in the order they appear in the document.",
                "!type": "fn(name: string) -> [XmlService.Element]"
            },
            "getChildren  ": {
                "!doc": "Gets all Element nodes with the given name and namespace that are immediate children of\n this Element node, in the order they appear in the document.",
                "!type": "fn(name: string, namespace: XmlService.Namespace) -> [XmlService.Element]"
            },
            "getContent": {
                "!doc": "Gets the node at the given index among all nodes that are immediate children of the\n {@code Element} node. If there is no node at the given index, this method returns null.",
                "!type": "fn(index: number) -> XmlService.Content"
            },
            "getContentSize": {
                "!doc": "Gets the number of nodes that are immediate children of the {@code Element} node.",
                "!type": "fn() -> number"
            },
            "getDescendants": {
                "!doc": "Gets all nodes that are direct or indirect children of the {@code Element} node, in the order they\n appear in the document.",
                "!type": "fn() -> [XmlService.Content]"
            },
            "getDocument": {
                "!doc": "Gets the XML document that contains the {@code Element} node.",
                "!type": "fn() -> XmlService.Document"
            },
            "getName": {
                "!doc": "Gets the local name of the Element node. If the node has a namespace prefix, use\n getQualifiedName() or\n getNamespace().getPrefix() to get the prefix.",
                "!type": "fn() -> string"
            },
            "getNamespace": {
                "!doc": "Gets the namespace for the Element node.",
                "!type": "fn() -> XmlService.Namespace"
            },
            "getNamespace ": {
                "!doc": "Gets the namespace with the given prefix for the Element node.",
                "!type": "fn(prefix: string) -> XmlService.Namespace"
            },
            "getParentElement": {
                "!doc": "Gets the node's parent Element node. If the node does not have a parent, this method\n returns null.",
                "!type": "fn() -> XmlService.Element"
            },
            "getQualifiedName": {
                "!doc": "Gets the local name and namespace prefix of the Element node, in the form\n [namespacePrefix]:[localName]. If the node does not have a namespace prefix, use\n getName().",
                "!type": "fn() -> string"
            },
            "getText": {
                "!doc": "Gets the text value of the Element node.",
                "!type": "fn() -> string"
            },
            "getValue": {
                "!doc": "Gets the text value of all nodes that are direct or indirect children of the node, in the order\n they appear in the document.",
                "!type": "fn() -> string"
            },
            "isAncestorOf": {
                "!doc": "Determines whether this Element node is a direct or indirect parent of a given\n Element node.",
                "!type": "fn(other: XmlService.Element) -> bool"
            },
            "isRootElement": {
                "!doc": "Determines whether the Element node is the document's root node.",
                "!type": "fn() -> bool"
            },
            "removeAttribute": {
                "!doc": "Removes the attribute for this Element node with the given name and no namespace, if\n such an attribute exists.",
                "!type": "fn(attributeName: string) -> bool"
            },
            "removeAttribute ": {
                "!doc": "Removes the attribute for this Element node with the given name and namespace, if such\n an attribute exists.",
                "!type": "fn(attributeName: string, namespace: XmlService.Namespace) -> bool"
            },
            "removeAttribute  ": {
                "!doc": "Removes the given attribute for this Element node, if such an attribute exists.",
                "!type": "fn(attribute: XmlService.Attribute) -> bool"
            },
            "removeContent": {
                "!doc": "Removes all nodes that are immediate children of the {@code Element} node.",
                "!type": "fn() -> [XmlService.Content]"
            },
            "removeContent ": {
                "!doc": "Removes the node at the given index among all nodes that are immediate children of the\n {@code Element} node. If there is no node at the given index, this method returns null.",
                "!type": "fn(index: number) -> XmlService.Content"
            },
            "removeContent  ": {
                "!doc": "Removes the given node, if the node is an immediate child of the {@code Element} node. The\n content argument can be a Element object or any node object that corresponds\n to a type listed in ContentType.",
                "!type": "fn(content: XmlService.Content) -> bool"
            },
            "setAttribute": {
                "!doc": "Sets the attribute for this Element node with the given name, value, and no namespace.",
                "!type": "fn(name: string, value: string) -> XmlService.Element"
            },
            "setAttribute ": {
                "!doc": "Sets the attribute for this Element node with the given name, value, and namespace.",
                "!type": "fn(name: string, value: string, namespace: XmlService.Namespace) -> XmlService.Element"
            },
            "setAttribute  ": {
                "!doc": "Sets the given attribute for this Element node.",
                "!type": "fn(attribute: XmlService.Attribute) -> XmlService.Element"
            },
            "setName": {
                "!doc": "Sets the local name of the Element node. To set a namespace prefix for the node, use\n setNamespace(namespace) in conjunction with\n XmlService.getNamespace(prefix, uri).",
                "!type": "fn(name: string) -> XmlService.Element"
            },
            "setNamespace": {
                "!doc": "Sets the namespace for the Element node.",
                "!type": "fn(namespace: XmlService.Namespace) -> XmlService.Element"
            },
            "setText": {
                "!doc": "Sets the text value of the Element node. If the node already contains a text value or\n any child nodes, this method overwrites the old content. To append or insert content instead,\n use addContent(content) or addContent(index, content).",
                "!type": "fn(text: string) -> XmlService.Element"
            }
        },
        "XmlService.EntityRef": {
            "detach": {
                "!doc": "Detaches the node from its parent Element node. If the node does not have a parent,\n this method has no effect.",
                "!type": "fn() -> XmlService.Content"
            },
            "getName": {
                "!doc": "Gets the name of the EntityReference node.",
                "!type": "fn() -> string"
            },
            "getParentElement": {
                "!doc": "Gets the node's parent Element node. If the node does not have a parent, this method\n returns null.",
                "!type": "fn() -> XmlService.Element"
            },
            "getPublicId": {
                "!doc": "Gets the public ID of the EntityReference node. If the node does not have a public ID,\n this method returns null.",
                "!type": "fn() -> string"
            },
            "getSystemId": {
                "!doc": "Gets the system ID of the EntityReference node. If the node does not have a system ID,\n this method returns null.",
                "!type": "fn() -> string"
            },
            "getValue": {
                "!doc": "Gets the text value of all nodes that are direct or indirect children of the node, in the order\n they appear in the document.",
                "!type": "fn() -> string"
            },
            "setName": {
                "!doc": "Sets the name of the EntityReference node.",
                "!type": "fn(name: string) -> XmlService.EntityRef"
            },
            "setPublicId": {
                "!doc": "Sets the public ID of the EntityReference node.",
                "!type": "fn(id: string) -> XmlService.EntityRef"
            },
            "setSystemId": {
                "!doc": "Sets the system ID of the EntityReference node.",
                "!type": "fn(id: string) -> XmlService.EntityRef"
            }
        },
        "XmlService.Format": {
            "format": {
                "!doc": "Outputs the given Document as a formatted string.",
                "!type": "fn(document: XmlService.Document) -> string"
            },
            "format ": {
                "!doc": "Outputs the given Element node as a formatted string.",
                "!type": "fn(element: XmlService.Element) -> string"
            },
            "setEncoding": {
                "!doc": "Sets the character encoding that the formatter should use. The encoding argument must\n be an accepted XML encoding like ISO-8859-1, US-ASCII, UTF-8, or\n UTF-16.\n\n \n \n \/\/ Log an XML document with encoding that does not support certain special characters.\n var xml = &#39;&lt;root&gt;&lt;a&gt;&lt;b&gt;???&lt;\/b&gt;&lt;b&gt;???&lt;\/b&gt;&lt;\/a&gt;&lt;\/root&gt;&#39;;\n var document = XmlService.parse(xml);\n var output = XmlService.getRawFormat()\n     .setEncoding(&#39;ISO-8859-1&#39;)\n     .format(document);\n Logger.log(output);\n ",
                "!type": "fn(encoding: string) -> XmlService.Format"
            },
            "setIndent": {
                "!doc": "Sets the string used to indent child nodes relative to their parents. Setting an indent other\n than null will cause the formatter to insert a line break after every node.\n\n \n \n \/\/ Log an XML document with each child node indented four spaces.\n var xml = &#39;&lt;root&gt;&lt;a&gt;&lt;b&gt;Text!&lt;\/b&gt;&lt;b&gt;More text!&lt;\/b&gt;&lt;\/a&gt;&lt;\/root&gt;&#39;;\n var document = XmlService.parse(xml);\n var output = XmlService.getCompactFormat()\n     .setIndent(&#39;    &#39;)\n     .format(document);\n Logger.log(output);\n ",
                "!type": "fn(indent: string) -> XmlService.Format"
            },
            "setLineSeparator": {
                "!doc": "Sets the string to insert whenever the formatter would normally insert a line break. The three\n pre-defined formatters have different conditions under which they insert a line break. The\n default line separator is \\r\\n.\n\n \n \n \/\/ Log an XML document with several spaces and a pipe character in place of line breaks.\n var xml = &#39;&lt;root&gt;&lt;a&gt;&lt;b&gt;Text!&lt;\/b&gt;&lt;b&gt;More text!&lt;\/b&gt;&lt;\/a&gt;&lt;\/root&gt;&#39;;\n var document = XmlService.parse(xml);\n var output = XmlService.getRawFormat()\n     .setLineSeparator(&#39; | &#39;)\n     .format(document);\n Logger.log(output);\n ",
                "!type": "fn(separator: string) -> XmlService.Format"
            },
            "setOmitDeclaration": {
                "!doc": "Sets whether the formatter should omit the XML declaration, such as\n &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;.",
                "!type": "fn(omitDeclaration: bool) -> XmlService.Format"
            },
            "setOmitEncoding": {
                "!doc": "Sets whether the formatter should omit the encoding in the XML declaration,\n such as the encoding field in &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;.",
                "!type": "fn(omitEncoding: bool) -> XmlService.Format"
            }
        },
        "XmlService.Namespace": {
            "getPrefix": {
                "!doc": "Gets the prefix for the namespace.",
                "!type": "fn() -> string"
            },
            "getURI": {
                "!doc": "Gets the URI for the namespace.",
                "!type": "fn() -> string"
            }
        },
        "XmlService.ProcessingInstruction": {
            "detach": {
                "!doc": "Detaches the node from its parent Element node. If the node does not have a parent,\n this method has no effect.",
                "!type": "fn() -> XmlService.Content"
            },
            "getData": {
                "!doc": "Gets the raw data for every instruction in the ProcessingInstruction node.",
                "!type": "fn() -> string"
            },
            "getParentElement": {
                "!doc": "Gets the node's parent Element node. If the node does not have a parent, this method\n returns null.",
                "!type": "fn() -> XmlService.Element"
            },
            "getTarget": {
                "!doc": "Gets the target for the ProcessingInstruction node.",
                "!type": "fn() -> string"
            },
            "getValue": {
                "!doc": "Gets the text value of all nodes that are direct or indirect children of the node, in the order\n they appear in the document.",
                "!type": "fn() -> string"
            }
        },
        "XmlService.Text": {
            "append": {
                "!doc": "Appends the given text to any content that already exists in the node.",
                "!type": "fn(text: string) -> XmlService.Text"
            },
            "detach": {
                "!doc": "Detaches the node from its parent Element node. If the node does not have a parent,\n this method has no effect.",
                "!type": "fn() -> XmlService.Content"
            },
            "getParentElement": {
                "!doc": "Gets the node's parent Element node. If the node does not have a parent, this method\n returns null.",
                "!type": "fn() -> XmlService.Element"
            },
            "getText": {
                "!doc": "Gets the text value of the Text node.",
                "!type": "fn() -> string"
            },
            "getValue": {
                "!doc": "Gets the text value of all nodes that are direct or indirect children of the node, in the order\n they appear in the document.",
                "!type": "fn() -> string"
            },
            "setText": {
                "!doc": "Sets the text value of the Text node.",
                "!type": "fn(text: string) -> XmlService.Text"
            }
        },
        "Youtube.Collection.ActivitiesCollection": {
            "insert": {
                "!type": "fn(resource: Youtube.Schema.Activity, part: string) -> Youtube.Schema.Activity"
            },
            "list": {
                "!type": "fn(part: string) -> Youtube.Schema.ActivityListResponse"
            },
            "list ": {
                "!type": "fn(part: string, optionalArgs: object) -> Youtube.Schema.ActivityListResponse"
            }
        },
        "Youtube.Collection.CaptionsCollection": {
            "download": {
                "!type": "fn(id: string)"
            },
            "download ": {
                "!type": "fn(id: string, optionalArgs: object)"
            },
            "insert": {
                "!type": "fn(resource: Youtube.Schema.Caption, part: string) -> Youtube.Schema.Caption"
            },
            "insert ": {
                "!type": "fn(resource: Youtube.Schema.Caption, part: string, mediaData: Blob) -> Youtube.Schema.Caption"
            },
            "insert  ": {
                "!type": "fn(resource: Youtube.Schema.Caption, part: string, mediaData: Blob, optionalArgs: object) -> Youtube.Schema.Caption"
            },
            "list": {
                "!type": "fn(part: string, videoId: string) -> Youtube.Schema.CaptionListResponse"
            },
            "list ": {
                "!type": "fn(part: string, videoId: string, optionalArgs: object) -> Youtube.Schema.CaptionListResponse"
            },
            "remove": {
                "!type": "fn(id: string)"
            },
            "remove ": {
                "!type": "fn(id: string, optionalArgs: object)"
            },
            "update": {
                "!type": "fn(resource: Youtube.Schema.Caption, part: string) -> Youtube.Schema.Caption"
            },
            "update ": {
                "!type": "fn(resource: Youtube.Schema.Caption, part: string, mediaData: Blob) -> Youtube.Schema.Caption"
            },
            "update  ": {
                "!type": "fn(resource: Youtube.Schema.Caption, part: string, mediaData: Blob, optionalArgs: object) -> Youtube.Schema.Caption"
            }
        },
        "Youtube.Collection.ChannelBannersCollection": {
            "insert": {
                "!type": "fn(resource: Youtube.Schema.ChannelBannerResource) -> Youtube.Schema.ChannelBannerResource"
            },
            "insert ": {
                "!type": "fn(resource: Youtube.Schema.ChannelBannerResource, mediaData: Blob) -> Youtube.Schema.ChannelBannerResource"
            },
            "insert  ": {
                "!type": "fn(resource: Youtube.Schema.ChannelBannerResource, mediaData: Blob, optionalArgs: object) -> Youtube.Schema.ChannelBannerResource"
            }
        },
        "Youtube.Collection.ChannelSectionsCollection": {
            "insert": {
                "!type": "fn(resource: Youtube.Schema.ChannelSection, part: string) -> Youtube.Schema.ChannelSection"
            },
            "insert ": {
                "!type": "fn(resource: Youtube.Schema.ChannelSection, part: string, optionalArgs: object) -> Youtube.Schema.ChannelSection"
            },
            "list": {
                "!type": "fn(part: string) -> Youtube.Schema.ChannelSectionListResponse"
            },
            "list ": {
                "!type": "fn(part: string, optionalArgs: object) -> Youtube.Schema.ChannelSectionListResponse"
            },
            "remove": {
                "!type": "fn(id: string)"
            },
            "remove ": {
                "!type": "fn(id: string, optionalArgs: object)"
            },
            "update": {
                "!type": "fn(resource: Youtube.Schema.ChannelSection, part: string) -> Youtube.Schema.ChannelSection"
            },
            "update ": {
                "!type": "fn(resource: Youtube.Schema.ChannelSection, part: string, optionalArgs: object) -> Youtube.Schema.ChannelSection"
            }
        },
        "Youtube.Collection.ChannelsCollection": {
            "list": {
                "!type": "fn(part: string) -> Youtube.Schema.ChannelListResponse"
            },
            "list ": {
                "!type": "fn(part: string, optionalArgs: object) -> Youtube.Schema.ChannelListResponse"
            },
            "update": {
                "!type": "fn(resource: Youtube.Schema.Channel, part: string) -> Youtube.Schema.Channel"
            },
            "update ": {
                "!type": "fn(resource: Youtube.Schema.Channel, part: string, optionalArgs: object) -> Youtube.Schema.Channel"
            }
        },
        "Youtube.Collection.CommentThreadsCollection": {
            "insert": {
                "!type": "fn(resource: Youtube.Schema.CommentThread, part: string) -> Youtube.Schema.CommentThread"
            },
            "list": {
                "!type": "fn(part: string) -> Youtube.Schema.CommentThreadListResponse"
            },
            "list ": {
                "!type": "fn(part: string, optionalArgs: object) -> Youtube.Schema.CommentThreadListResponse"
            },
            "update": {
                "!type": "fn(resource: Youtube.Schema.CommentThread, part: string) -> Youtube.Schema.CommentThread"
            }
        },
        "Youtube.Collection.CommentsCollection": {
            "insert": {
                "!type": "fn(resource: Youtube.Schema.Comment, part: string) -> Youtube.Schema.Comment"
            },
            "list": {
                "!type": "fn(part: string) -> Youtube.Schema.CommentListResponse"
            },
            "list ": {
                "!type": "fn(part: string, optionalArgs: object) -> Youtube.Schema.CommentListResponse"
            },
            "markAsSpam": {
                "!type": "fn(id: string)"
            },
            "remove": {
                "!type": "fn(id: string)"
            },
            "setModerationStatus": {
                "!type": "fn(id: string, moderationStatus: string)"
            },
            "setModerationStatus ": {
                "!type": "fn(id: string, moderationStatus: string, optionalArgs: object)"
            },
            "update": {
                "!type": "fn(resource: Youtube.Schema.Comment, part: string) -> Youtube.Schema.Comment"
            }
        },
        "Youtube.Collection.FanFundingEventsCollection": {
            "list": {
                "!type": "fn(part: string) -> Youtube.Schema.FanFundingEventListResponse"
            },
            "list ": {
                "!type": "fn(part: string, optionalArgs: object) -> Youtube.Schema.FanFundingEventListResponse"
            }
        },
        "Youtube.Collection.GuideCategoriesCollection": {
            "list": {
                "!type": "fn(part: string) -> Youtube.Schema.GuideCategoryListResponse"
            },
            "list ": {
                "!type": "fn(part: string, optionalArgs: object) -> Youtube.Schema.GuideCategoryListResponse"
            }
        },
        "Youtube.Collection.I18nLanguagesCollection": {
            "list": {
                "!type": "fn(part: string) -> Youtube.Schema.I18nLanguageListResponse"
            },
            "list ": {
                "!type": "fn(part: string, optionalArgs: object) -> Youtube.Schema.I18nLanguageListResponse"
            }
        },
        "Youtube.Collection.I18nRegionsCollection": {
            "list": {
                "!type": "fn(part: string) -> Youtube.Schema.I18nRegionListResponse"
            },
            "list ": {
                "!type": "fn(part: string, optionalArgs: object) -> Youtube.Schema.I18nRegionListResponse"
            }
        },
        "Youtube.Collection.LiveBroadcastsCollection": {
            "bind": {
                "!type": "fn(id: string, part: string) -> Youtube.Schema.LiveBroadcast"
            },
            "bind ": {
                "!type": "fn(id: string, part: string, optionalArgs: object) -> Youtube.Schema.LiveBroadcast"
            },
            "control": {
                "!type": "fn(id: string, part: string) -> Youtube.Schema.LiveBroadcast"
            },
            "control ": {
                "!type": "fn(id: string, part: string, optionalArgs: object) -> Youtube.Schema.LiveBroadcast"
            },
            "insert": {
                "!type": "fn(resource: Youtube.Schema.LiveBroadcast, part: string) -> Youtube.Schema.LiveBroadcast"
            },
            "insert ": {
                "!type": "fn(resource: Youtube.Schema.LiveBroadcast, part: string, optionalArgs: object) -> Youtube.Schema.LiveBroadcast"
            },
            "list": {
                "!type": "fn(part: string) -> Youtube.Schema.LiveBroadcastListResponse"
            },
            "list ": {
                "!type": "fn(part: string, optionalArgs: object) -> Youtube.Schema.LiveBroadcastListResponse"
            },
            "remove": {
                "!type": "fn(id: string)"
            },
            "remove ": {
                "!type": "fn(id: string, optionalArgs: object)"
            },
            "transition": {
                "!type": "fn(broadcastStatus: string, id: string, part: string) -> Youtube.Schema.LiveBroadcast"
            },
            "transition ": {
                "!type": "fn(broadcastStatus: string, id: string, part: string, optionalArgs: object) -> Youtube.Schema.LiveBroadcast"
            },
            "update": {
                "!type": "fn(resource: Youtube.Schema.LiveBroadcast, part: string) -> Youtube.Schema.LiveBroadcast"
            },
            "update ": {
                "!type": "fn(resource: Youtube.Schema.LiveBroadcast, part: string, optionalArgs: object) -> Youtube.Schema.LiveBroadcast"
            }
        },
        "Youtube.Collection.LiveChatBansCollection": {
            "insert": {
                "!type": "fn(resource: Youtube.Schema.LiveChatBan, part: string) -> Youtube.Schema.LiveChatBan"
            },
            "remove": {
                "!type": "fn(id: string)"
            }
        },
        "Youtube.Collection.LiveChatMessagesCollection": {
            "insert": {
                "!type": "fn(resource: Youtube.Schema.LiveChatMessage, part: string) -> Youtube.Schema.LiveChatMessage"
            },
            "list": {
                "!type": "fn(liveChatId: string, part: string) -> Youtube.Schema.LiveChatMessageListResponse"
            },
            "list ": {
                "!type": "fn(liveChatId: string, part: string, optionalArgs: object) -> Youtube.Schema.LiveChatMessageListResponse"
            },
            "remove": {
                "!type": "fn(id: string)"
            }
        },
        "Youtube.Collection.LiveChatModeratorsCollection": {
            "insert": {
                "!type": "fn(resource: Youtube.Schema.LiveChatModerator, part: string) -> Youtube.Schema.LiveChatModerator"
            },
            "list": {
                "!type": "fn(liveChatId: string, part: string) -> Youtube.Schema.LiveChatModeratorListResponse"
            },
            "list ": {
                "!type": "fn(liveChatId: string, part: string, optionalArgs: object) -> Youtube.Schema.LiveChatModeratorListResponse"
            },
            "remove": {
                "!type": "fn(id: string)"
            }
        },
        "Youtube.Collection.LiveStreamsCollection": {
            "insert": {
                "!type": "fn(resource: Youtube.Schema.LiveStream, part: string) -> Youtube.Schema.LiveStream"
            },
            "insert ": {
                "!type": "fn(resource: Youtube.Schema.LiveStream, part: string, optionalArgs: object) -> Youtube.Schema.LiveStream"
            },
            "list": {
                "!type": "fn(part: string) -> Youtube.Schema.LiveStreamListResponse"
            },
            "list ": {
                "!type": "fn(part: string, optionalArgs: object) -> Youtube.Schema.LiveStreamListResponse"
            },
            "remove": {
                "!type": "fn(id: string)"
            },
            "remove ": {
                "!type": "fn(id: string, optionalArgs: object)"
            },
            "update": {
                "!type": "fn(resource: Youtube.Schema.LiveStream, part: string) -> Youtube.Schema.LiveStream"
            },
            "update ": {
                "!type": "fn(resource: Youtube.Schema.LiveStream, part: string, optionalArgs: object) -> Youtube.Schema.LiveStream"
            }
        },
        "Youtube.Collection.PlaylistItemsCollection": {
            "insert": {
                "!type": "fn(resource: Youtube.Schema.PlaylistItem, part: string) -> Youtube.Schema.PlaylistItem"
            },
            "insert ": {
                "!type": "fn(resource: Youtube.Schema.PlaylistItem, part: string, optionalArgs: object) -> Youtube.Schema.PlaylistItem"
            },
            "list": {
                "!type": "fn(part: string) -> Youtube.Schema.PlaylistItemListResponse"
            },
            "list ": {
                "!type": "fn(part: string, optionalArgs: object) -> Youtube.Schema.PlaylistItemListResponse"
            },
            "remove": {
                "!type": "fn(id: string)"
            },
            "update": {
                "!type": "fn(resource: Youtube.Schema.PlaylistItem, part: string) -> Youtube.Schema.PlaylistItem"
            }
        },
        "Youtube.Collection.PlaylistsCollection": {
            "insert": {
                "!type": "fn(resource: Youtube.Schema.Playlist, part: string) -> Youtube.Schema.Playlist"
            },
            "insert ": {
                "!type": "fn(resource: Youtube.Schema.Playlist, part: string, optionalArgs: object) -> Youtube.Schema.Playlist"
            },
            "list": {
                "!type": "fn(part: string) -> Youtube.Schema.PlaylistListResponse"
            },
            "list ": {
                "!type": "fn(part: string, optionalArgs: object) -> Youtube.Schema.PlaylistListResponse"
            },
            "remove": {
                "!type": "fn(id: string)"
            },
            "remove ": {
                "!type": "fn(id: string, optionalArgs: object)"
            },
            "update": {
                "!type": "fn(resource: Youtube.Schema.Playlist, part: string) -> Youtube.Schema.Playlist"
            },
            "update ": {
                "!type": "fn(resource: Youtube.Schema.Playlist, part: string, optionalArgs: object) -> Youtube.Schema.Playlist"
            }
        },
        "Youtube.Collection.SearchCollection": {
            "list": {
                "!type": "fn(part: string) -> Youtube.Schema.SearchListResponse"
            },
            "list ": {
                "!type": "fn(part: string, optionalArgs: object) -> Youtube.Schema.SearchListResponse"
            }
        },
        "Youtube.Collection.SponsorsCollection": {
            "list": {
                "!type": "fn(part: string) -> Youtube.Schema.SponsorListResponse"
            },
            "list ": {
                "!type": "fn(part: string, optionalArgs: object) -> Youtube.Schema.SponsorListResponse"
            }
        },
        "Youtube.Collection.SubscriptionsCollection": {
            "insert": {
                "!type": "fn(resource: Youtube.Schema.Subscription, part: string) -> Youtube.Schema.Subscription"
            },
            "list": {
                "!type": "fn(part: string) -> Youtube.Schema.SubscriptionListResponse"
            },
            "list ": {
                "!type": "fn(part: string, optionalArgs: object) -> Youtube.Schema.SubscriptionListResponse"
            },
            "remove": {
                "!type": "fn(id: string)"
            }
        },
        "Youtube.Collection.ThumbnailsCollection": {
            "set": {
                "!type": "fn(videoId: string) -> Youtube.Schema.ThumbnailSetResponse"
            },
            "set ": {
                "!type": "fn(videoId: string, mediaData: Blob) -> Youtube.Schema.ThumbnailSetResponse"
            },
            "set  ": {
                "!type": "fn(videoId: string, mediaData: Blob, optionalArgs: object) -> Youtube.Schema.ThumbnailSetResponse"
            }
        },
        "Youtube.Collection.VideoAbuseReportReasonsCollection": {
            "list": {
                "!type": "fn(part: string) -> Youtube.Schema.VideoAbuseReportReasonListResponse"
            },
            "list ": {
                "!type": "fn(part: string, optionalArgs: object) -> Youtube.Schema.VideoAbuseReportReasonListResponse"
            }
        },
        "Youtube.Collection.VideoCategoriesCollection": {
            "list": {
                "!type": "fn(part: string) -> Youtube.Schema.VideoCategoryListResponse"
            },
            "list ": {
                "!type": "fn(part: string, optionalArgs: object) -> Youtube.Schema.VideoCategoryListResponse"
            }
        },
        "Youtube.Collection.VideosCollection": {
            "getRating": {
                "!type": "fn(id: string) -> Youtube.Schema.VideoGetRatingResponse"
            },
            "getRating ": {
                "!type": "fn(id: string, optionalArgs: object) -> Youtube.Schema.VideoGetRatingResponse"
            },
            "insert": {
                "!type": "fn(resource: Youtube.Schema.Video, part: string) -> Youtube.Schema.Video"
            },
            "insert ": {
                "!type": "fn(resource: Youtube.Schema.Video, part: string, mediaData: Blob) -> Youtube.Schema.Video"
            },
            "insert  ": {
                "!type": "fn(resource: Youtube.Schema.Video, part: string, mediaData: Blob, optionalArgs: object) -> Youtube.Schema.Video"
            },
            "list": {
                "!type": "fn(part: string) -> Youtube.Schema.VideoListResponse"
            },
            "list ": {
                "!type": "fn(part: string, optionalArgs: object) -> Youtube.Schema.VideoListResponse"
            },
            "rate": {
                "!type": "fn(id: string, rating: string)"
            },
            "remove": {
                "!type": "fn(id: string)"
            },
            "remove ": {
                "!type": "fn(id: string, optionalArgs: object)"
            },
            "reportAbuse": {
                "!type": "fn(resource: Youtube.Schema.VideoAbuseReport)"
            },
            "reportAbuse ": {
                "!type": "fn(resource: Youtube.Schema.VideoAbuseReport, optionalArgs: object)"
            },
            "update": {
                "!type": "fn(resource: Youtube.Schema.Video, part: string) -> Youtube.Schema.Video"
            },
            "update ": {
                "!type": "fn(resource: Youtube.Schema.Video, part: string, optionalArgs: object) -> Youtube.Schema.Video"
            }
        },
        "Youtube.Collection.WatermarksCollection": {
            "set": {
                "!type": "fn(resource: Youtube.Schema.InvideoBranding, channelId: string)"
            },
            "set ": {
                "!type": "fn(resource: Youtube.Schema.InvideoBranding, channelId: string, mediaData: Blob)"
            },
            "set  ": {
                "!type": "fn(resource: Youtube.Schema.InvideoBranding, channelId: string, mediaData: Blob, optionalArgs: object)"
            },
            "unset": {
                "!type": "fn(channelId: string)"
            },
            "unset ": {
                "!type": "fn(channelId: string, optionalArgs: object)"
            }
        },
        "Youtube.Schema.AccessPolicy": {
            "allowed": {
                "!type": "bool"
            },
            "exception": {
                "!type": "[string]"
            }
        },
        "Youtube.Schema.Activity": {
            "contentDetails": {
                "!type": "Youtube.Schema.ActivityContentDetails"
            },
            "etag": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "snippet": {
                "!type": "Youtube.Schema.ActivitySnippet"
            }
        },
        "Youtube.Schema.ActivityContentDetails": {
            "bulletin": {
                "!type": "Youtube.Schema.ActivityContentDetailsBulletin"
            },
            "channelItem": {
                "!type": "Youtube.Schema.ActivityContentDetailsChannelItem"
            },
            "comment": {
                "!type": "Youtube.Schema.ActivityContentDetailsComment"
            },
            "favorite": {
                "!type": "Youtube.Schema.ActivityContentDetailsFavorite"
            },
            "like": {
                "!type": "Youtube.Schema.ActivityContentDetailsLike"
            },
            "playlistItem": {
                "!type": "Youtube.Schema.ActivityContentDetailsPlaylistItem"
            },
            "promotedItem": {
                "!type": "Youtube.Schema.ActivityContentDetailsPromotedItem"
            },
            "recommendation": {
                "!type": "Youtube.Schema.ActivityContentDetailsRecommendation"
            },
            "social": {
                "!type": "Youtube.Schema.ActivityContentDetailsSocial"
            },
            "subscription": {
                "!type": "Youtube.Schema.ActivityContentDetailsSubscription"
            },
            "upload": {
                "!type": "Youtube.Schema.ActivityContentDetailsUpload"
            }
        },
        "Youtube.Schema.ActivityContentDetailsBulletin": {
            "resourceId": {
                "!type": "Youtube.Schema.ResourceId"
            }
        },
        "Youtube.Schema.ActivityContentDetailsChannelItem": {
            "resourceId": {
                "!type": "Youtube.Schema.ResourceId"
            }
        },
        "Youtube.Schema.ActivityContentDetailsComment": {
            "resourceId": {
                "!type": "Youtube.Schema.ResourceId"
            }
        },
        "Youtube.Schema.ActivityContentDetailsFavorite": {
            "resourceId": {
                "!type": "Youtube.Schema.ResourceId"
            }
        },
        "Youtube.Schema.ActivityContentDetailsLike": {
            "resourceId": {
                "!type": "Youtube.Schema.ResourceId"
            }
        },
        "Youtube.Schema.ActivityContentDetailsPlaylistItem": {
            "playlistId": {
                "!type": "string"
            },
            "playlistItemId": {
                "!type": "string"
            },
            "resourceId": {
                "!type": "Youtube.Schema.ResourceId"
            }
        },
        "Youtube.Schema.ActivityContentDetailsPromotedItem": {
            "adTag": {
                "!type": "string"
            },
            "clickTrackingUrl": {
                "!type": "string"
            },
            "creativeViewUrl": {
                "!type": "string"
            },
            "ctaType": {
                "!type": "string"
            },
            "customCtaButtonText": {
                "!type": "string"
            },
            "descriptionText": {
                "!type": "string"
            },
            "destinationUrl": {
                "!type": "string"
            },
            "forecastingUrl": {
                "!type": "[string]"
            },
            "impressionUrl": {
                "!type": "[string]"
            },
            "videoId": {
                "!type": "string"
            }
        },
        "Youtube.Schema.ActivityContentDetailsRecommendation": {
            "reason": {
                "!type": "string"
            },
            "resourceId": {
                "!type": "Youtube.Schema.ResourceId"
            },
            "seedResourceId": {
                "!type": "Youtube.Schema.ResourceId"
            }
        },
        "Youtube.Schema.ActivityContentDetailsSocial": {
            "author": {
                "!type": "string"
            },
            "imageUrl": {
                "!type": "string"
            },
            "referenceUrl": {
                "!type": "string"
            },
            "resourceId": {
                "!type": "Youtube.Schema.ResourceId"
            },
            "type": {
                "!type": "string"
            }
        },
        "Youtube.Schema.ActivityContentDetailsSubscription": {
            "resourceId": {
                "!type": "Youtube.Schema.ResourceId"
            }
        },
        "Youtube.Schema.ActivityContentDetailsUpload": {
            "videoId": {
                "!type": "string"
            }
        },
        "Youtube.Schema.ActivityListResponse": {
            "etag": {
                "!type": "string"
            },
            "eventId": {
                "!type": "string"
            },
            "items": {
                "!type": "[Youtube.Schema.Activity]"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "pageInfo": {
                "!type": "Youtube.Schema.PageInfo"
            },
            "prevPageToken": {
                "!type": "string"
            },
            "tokenPagination": {
                "!type": "Youtube.Schema.TokenPagination"
            },
            "visitorId": {
                "!type": "string"
            }
        },
        "Youtube.Schema.ActivitySnippet": {
            "channelId": {
                "!type": "string"
            },
            "channelTitle": {
                "!type": "string"
            },
            "description": {
                "!type": "string"
            },
            "groupId": {
                "!type": "string"
            },
            "publishedAt": {
                "!type": "string"
            },
            "thumbnails": {
                "!type": "Youtube.Schema.ThumbnailDetails"
            },
            "title": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            }
        },
        "Youtube.Schema.Caption": {
            "etag": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "snippet": {
                "!type": "Youtube.Schema.CaptionSnippet"
            }
        },
        "Youtube.Schema.CaptionListResponse": {
            "etag": {
                "!type": "string"
            },
            "eventId": {
                "!type": "string"
            },
            "items": {
                "!type": "[Youtube.Schema.Caption]"
            },
            "kind": {
                "!type": "string"
            },
            "visitorId": {
                "!type": "string"
            }
        },
        "Youtube.Schema.CaptionSnippet": {
            "audioTrackType": {
                "!type": "string"
            },
            "failureReason": {
                "!type": "string"
            },
            "isAutoSynced": {
                "!type": "bool"
            },
            "isCC": {
                "!type": "bool"
            },
            "isDraft": {
                "!type": "bool"
            },
            "isEasyReader": {
                "!type": "bool"
            },
            "isLarge": {
                "!type": "bool"
            },
            "language": {
                "!type": "string"
            },
            "lastUpdated": {
                "!type": "string"
            },
            "name": {
                "!type": "string"
            },
            "status": {
                "!type": "string"
            },
            "trackKind": {
                "!type": "string"
            },
            "videoId": {
                "!type": "string"
            }
        },
        "Youtube.Schema.CdnSettings": {
            "format": {
                "!type": "string"
            },
            "ingestionInfo": {
                "!type": "Youtube.Schema.IngestionInfo"
            },
            "ingestionType": {
                "!type": "string"
            }
        },
        "Youtube.Schema.Channel": {
            "auditDetails": {
                "!type": "Youtube.Schema.ChannelAuditDetails"
            },
            "brandingSettings": {
                "!type": "Youtube.Schema.ChannelBrandingSettings"
            },
            "contentDetails": {
                "!type": "Youtube.Schema.ChannelContentDetails"
            },
            "contentOwnerDetails": {
                "!type": "Youtube.Schema.ChannelContentOwnerDetails"
            },
            "conversionPings": {
                "!type": "Youtube.Schema.ChannelConversionPings"
            },
            "etag": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "invideoPromotion": {
                "!type": "Youtube.Schema.InvideoPromotion"
            },
            "kind": {
                "!type": "string"
            },
            "localizations": {
                "!type": "object"
            },
            "snippet": {
                "!type": "Youtube.Schema.ChannelSnippet"
            },
            "statistics": {
                "!type": "Youtube.Schema.ChannelStatistics"
            },
            "status": {
                "!type": "Youtube.Schema.ChannelStatus"
            },
            "topicDetails": {
                "!type": "Youtube.Schema.ChannelTopicDetails"
            }
        },
        "Youtube.Schema.ChannelAuditDetails": {
            "communityGuidelinesGoodStanding": {
                "!type": "bool"
            },
            "contentIdClaimsGoodStanding": {
                "!type": "bool"
            },
            "copyrightStrikesGoodStanding": {
                "!type": "bool"
            },
            "overallGoodStanding": {
                "!type": "bool"
            }
        },
        "Youtube.Schema.ChannelBannerResource": {
            "etag": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "url": {
                "!type": "string"
            }
        },
        "Youtube.Schema.ChannelBrandingSettings": {
            "channel": {
                "!type": "Youtube.Schema.ChannelSettings"
            },
            "hints": {
                "!type": "[Youtube.Schema.PropertyValue]"
            },
            "image": {
                "!type": "Youtube.Schema.ImageSettings"
            },
            "watch": {
                "!type": "Youtube.Schema.WatchSettings"
            }
        },
        "Youtube.Schema.ChannelContentDetails": {
            "googlePlusUserId": {
                "!type": "string"
            },
            "relatedPlaylists": {
                "!type": "Youtube.Schema.ChannelContentDetailsRelatedPlaylists"
            }
        },
        "Youtube.Schema.ChannelContentDetailsRelatedPlaylists": {
            "favorites": {
                "!type": "string"
            },
            "likes": {
                "!type": "string"
            },
            "uploads": {
                "!type": "string"
            },
            "watchHistory": {
                "!type": "string"
            },
            "watchLater": {
                "!type": "string"
            }
        },
        "Youtube.Schema.ChannelContentOwnerDetails": {
            "contentOwner": {
                "!type": "string"
            },
            "timeLinked": {
                "!type": "string"
            }
        },
        "Youtube.Schema.ChannelConversionPing": {
            "context": {
                "!type": "string"
            },
            "conversionUrl": {
                "!type": "string"
            }
        },
        "Youtube.Schema.ChannelConversionPings": {
            "pings": {
                "!type": "[Youtube.Schema.ChannelConversionPing]"
            }
        },
        "Youtube.Schema.ChannelId": {
            "value": {
                "!type": "string"
            }
        },
        "Youtube.Schema.ChannelListResponse": {
            "etag": {
                "!type": "string"
            },
            "eventId": {
                "!type": "string"
            },
            "items": {
                "!type": "[Youtube.Schema.Channel]"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "pageInfo": {
                "!type": "Youtube.Schema.PageInfo"
            },
            "prevPageToken": {
                "!type": "string"
            },
            "tokenPagination": {
                "!type": "Youtube.Schema.TokenPagination"
            },
            "visitorId": {
                "!type": "string"
            }
        },
        "Youtube.Schema.ChannelLocalization": {
            "description": {
                "!type": "string"
            },
            "title": {
                "!type": "string"
            }
        },
        "Youtube.Schema.ChannelProfileDetails": {
            "channelId": {
                "!type": "string"
            },
            "channelUrl": {
                "!type": "string"
            },
            "displayName": {
                "!type": "string"
            },
            "profileImageUrl": {
                "!type": "string"
            }
        },
        "Youtube.Schema.ChannelSection": {
            "contentDetails": {
                "!type": "Youtube.Schema.ChannelSectionContentDetails"
            },
            "etag": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "localizations": {
                "!type": "object"
            },
            "snippet": {
                "!type": "Youtube.Schema.ChannelSectionSnippet"
            },
            "targeting": {
                "!type": "Youtube.Schema.ChannelSectionTargeting"
            }
        },
        "Youtube.Schema.ChannelSectionContentDetails": {
            "channels": {
                "!type": "[string]"
            },
            "playlists": {
                "!type": "[string]"
            }
        },
        "Youtube.Schema.ChannelSectionListResponse": {
            "etag": {
                "!type": "string"
            },
            "eventId": {
                "!type": "string"
            },
            "items": {
                "!type": "[Youtube.Schema.ChannelSection]"
            },
            "kind": {
                "!type": "string"
            },
            "visitorId": {
                "!type": "string"
            }
        },
        "Youtube.Schema.ChannelSectionLocalization": {
            "title": {
                "!type": "string"
            }
        },
        "Youtube.Schema.ChannelSectionSnippet": {
            "channelId": {
                "!type": "string"
            },
            "defaultLanguage": {
                "!type": "string"
            },
            "localized": {
                "!type": "Youtube.Schema.ChannelSectionLocalization"
            },
            "position": {
                "!type": "number"
            },
            "style": {
                "!type": "string"
            },
            "title": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            }
        },
        "Youtube.Schema.ChannelSectionTargeting": {
            "countries": {
                "!type": "[string]"
            },
            "languages": {
                "!type": "[string]"
            },
            "regions": {
                "!type": "[string]"
            }
        },
        "Youtube.Schema.ChannelSettings": {
            "country": {
                "!type": "string"
            },
            "defaultLanguage": {
                "!type": "string"
            },
            "defaultTab": {
                "!type": "string"
            },
            "description": {
                "!type": "string"
            },
            "featuredChannelsTitle": {
                "!type": "string"
            },
            "featuredChannelsUrls": {
                "!type": "[string]"
            },
            "keywords": {
                "!type": "string"
            },
            "moderateComments": {
                "!type": "bool"
            },
            "profileColor": {
                "!type": "string"
            },
            "showBrowseView": {
                "!type": "bool"
            },
            "showRelatedChannels": {
                "!type": "bool"
            },
            "title": {
                "!type": "string"
            },
            "trackingAnalyticsAccountId": {
                "!type": "string"
            },
            "unsubscribedTrailer": {
                "!type": "string"
            }
        },
        "Youtube.Schema.ChannelSnippet": {
            "country": {
                "!type": "string"
            },
            "defaultLanguage": {
                "!type": "string"
            },
            "description": {
                "!type": "string"
            },
            "localized": {
                "!type": "Youtube.Schema.ChannelLocalization"
            },
            "publishedAt": {
                "!type": "string"
            },
            "thumbnails": {
                "!type": "Youtube.Schema.ThumbnailDetails"
            },
            "title": {
                "!type": "string"
            }
        },
        "Youtube.Schema.ChannelStatistics": {
            "commentCount": {
                "!type": "string"
            },
            "hiddenSubscriberCount": {
                "!type": "bool"
            },
            "subscriberCount": {
                "!type": "string"
            },
            "videoCount": {
                "!type": "string"
            },
            "viewCount": {
                "!type": "string"
            }
        },
        "Youtube.Schema.ChannelStatus": {
            "isLinked": {
                "!type": "bool"
            },
            "longUploadsStatus": {
                "!type": "string"
            },
            "privacyStatus": {
                "!type": "string"
            }
        },
        "Youtube.Schema.ChannelTopicDetails": {
            "topicIds": {
                "!type": "[string]"
            }
        },
        "Youtube.Schema.Comment": {
            "etag": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "snippet": {
                "!type": "Youtube.Schema.CommentSnippet"
            }
        },
        "Youtube.Schema.CommentListResponse": {
            "etag": {
                "!type": "string"
            },
            "eventId": {
                "!type": "string"
            },
            "items": {
                "!type": "[Youtube.Schema.Comment]"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "pageInfo": {
                "!type": "Youtube.Schema.PageInfo"
            },
            "tokenPagination": {
                "!type": "Youtube.Schema.TokenPagination"
            },
            "visitorId": {
                "!type": "string"
            }
        },
        "Youtube.Schema.CommentSnippet": {
            "authorChannelId": {
                "!type": "Youtube.Schema.ChannelId"
            },
            "authorChannelUrl": {
                "!type": "string"
            },
            "authorDisplayName": {
                "!type": "string"
            },
            "authorGoogleplusProfileUrl": {
                "!type": "string"
            },
            "authorProfileImageUrl": {
                "!type": "string"
            },
            "canRate": {
                "!type": "bool"
            },
            "channelId": {
                "!type": "string"
            },
            "likeCount": {
                "!type": "number"
            },
            "moderationStatus": {
                "!type": "string"
            },
            "parentId": {
                "!type": "string"
            },
            "publishedAt": {
                "!type": "string"
            },
            "textDisplay": {
                "!type": "string"
            },
            "textOriginal": {
                "!type": "string"
            },
            "updatedAt": {
                "!type": "string"
            },
            "videoId": {
                "!type": "string"
            },
            "viewerRating": {
                "!type": "string"
            }
        },
        "Youtube.Schema.CommentThread": {
            "etag": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "replies": {
                "!type": "Youtube.Schema.CommentThreadReplies"
            },
            "snippet": {
                "!type": "Youtube.Schema.CommentThreadSnippet"
            }
        },
        "Youtube.Schema.CommentThreadListResponse": {
            "etag": {
                "!type": "string"
            },
            "eventId": {
                "!type": "string"
            },
            "items": {
                "!type": "[Youtube.Schema.CommentThread]"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "pageInfo": {
                "!type": "Youtube.Schema.PageInfo"
            },
            "tokenPagination": {
                "!type": "Youtube.Schema.TokenPagination"
            },
            "visitorId": {
                "!type": "string"
            }
        },
        "Youtube.Schema.CommentThreadReplies": {
            "comments": {
                "!type": "[Youtube.Schema.Comment]"
            }
        },
        "Youtube.Schema.CommentThreadSnippet": {
            "canReply": {
                "!type": "bool"
            },
            "channelId": {
                "!type": "string"
            },
            "isPublic": {
                "!type": "bool"
            },
            "topLevelComment": {
                "!type": "Youtube.Schema.Comment"
            },
            "totalReplyCount": {
                "!type": "number"
            },
            "videoId": {
                "!type": "string"
            }
        },
        "Youtube.Schema.ContentRating": {
            "acbRating": {
                "!type": "string"
            },
            "agcomRating": {
                "!type": "string"
            },
            "anatelRating": {
                "!type": "string"
            },
            "bbfcRating": {
                "!type": "string"
            },
            "bfvcRating": {
                "!type": "string"
            },
            "bmukkRating": {
                "!type": "string"
            },
            "catvRating": {
                "!type": "string"
            },
            "catvfrRating": {
                "!type": "string"
            },
            "cbfcRating": {
                "!type": "string"
            },
            "cccRating": {
                "!type": "string"
            },
            "cceRating": {
                "!type": "string"
            },
            "chfilmRating": {
                "!type": "string"
            },
            "chvrsRating": {
                "!type": "string"
            },
            "cicfRating": {
                "!type": "string"
            },
            "cnaRating": {
                "!type": "string"
            },
            "cncRating": {
                "!type": "string"
            },
            "csaRating": {
                "!type": "string"
            },
            "cscfRating": {
                "!type": "string"
            },
            "czfilmRating": {
                "!type": "string"
            },
            "djctqRating": {
                "!type": "string"
            },
            "djctqRatingReasons": {
                "!type": "[string]"
            },
            "eefilmRating": {
                "!type": "string"
            },
            "egfilmRating": {
                "!type": "string"
            },
            "eirinRating": {
                "!type": "string"
            },
            "fcbmRating": {
                "!type": "string"
            },
            "fcoRating": {
                "!type": "string"
            },
            "fmocRating": {
                "!type": "string"
            },
            "fpbRating": {
                "!type": "string"
            },
            "fskRating": {
                "!type": "string"
            },
            "grfilmRating": {
                "!type": "string"
            },
            "icaaRating": {
                "!type": "string"
            },
            "ifcoRating": {
                "!type": "string"
            },
            "ilfilmRating": {
                "!type": "string"
            },
            "incaaRating": {
                "!type": "string"
            },
            "kfcbRating": {
                "!type": "string"
            },
            "kijkwijzerRating": {
                "!type": "string"
            },
            "kmrbRating": {
                "!type": "string"
            },
            "lsfRating": {
                "!type": "string"
            },
            "mccaaRating": {
                "!type": "string"
            },
            "mccypRating": {
                "!type": "string"
            },
            "mdaRating": {
                "!type": "string"
            },
            "medietilsynetRating": {
                "!type": "string"
            },
            "mekuRating": {
                "!type": "string"
            },
            "mibacRating": {
                "!type": "string"
            },
            "mocRating": {
                "!type": "string"
            },
            "moctwRating": {
                "!type": "string"
            },
            "mpaaRating": {
                "!type": "string"
            },
            "mtrcbRating": {
                "!type": "string"
            },
            "nbcRating": {
                "!type": "string"
            },
            "nbcplRating": {
                "!type": "string"
            },
            "nfrcRating": {
                "!type": "string"
            },
            "nfvcbRating": {
                "!type": "string"
            },
            "nkclvRating": {
                "!type": "string"
            },
            "oflcRating": {
                "!type": "string"
            },
            "pefilmRating": {
                "!type": "string"
            },
            "rcnofRating": {
                "!type": "string"
            },
            "resorteviolenciaRating": {
                "!type": "string"
            },
            "rtcRating": {
                "!type": "string"
            },
            "rteRating": {
                "!type": "string"
            },
            "russiaRating": {
                "!type": "string"
            },
            "skfilmRating": {
                "!type": "string"
            },
            "smaisRating": {
                "!type": "string"
            },
            "smsaRating": {
                "!type": "string"
            },
            "tvpgRating": {
                "!type": "string"
            },
            "ytRating": {
                "!type": "string"
            }
        },
        "Youtube.Schema.FanFundingEvent": {
            "etag": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "snippet": {
                "!type": "Youtube.Schema.FanFundingEventSnippet"
            }
        },
        "Youtube.Schema.FanFundingEventListResponse": {
            "etag": {
                "!type": "string"
            },
            "eventId": {
                "!type": "string"
            },
            "items": {
                "!type": "[Youtube.Schema.FanFundingEvent]"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "pageInfo": {
                "!type": "Youtube.Schema.PageInfo"
            },
            "tokenPagination": {
                "!type": "Youtube.Schema.TokenPagination"
            },
            "visitorId": {
                "!type": "string"
            }
        },
        "Youtube.Schema.FanFundingEventSnippet": {
            "amountMicros": {
                "!type": "string"
            },
            "channelId": {
                "!type": "string"
            },
            "commentText": {
                "!type": "string"
            },
            "createdAt": {
                "!type": "string"
            },
            "currency": {
                "!type": "string"
            },
            "displayString": {
                "!type": "string"
            },
            "supporterDetails": {
                "!type": "Youtube.Schema.ChannelProfileDetails"
            }
        },
        "Youtube.Schema.GeoPoint": {
            "altitude": {
                "!type": "number"
            },
            "latitude": {
                "!type": "number"
            },
            "longitude": {
                "!type": "number"
            }
        },
        "Youtube.Schema.GuideCategory": {
            "etag": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "snippet": {
                "!type": "Youtube.Schema.GuideCategorySnippet"
            }
        },
        "Youtube.Schema.GuideCategoryListResponse": {
            "etag": {
                "!type": "string"
            },
            "eventId": {
                "!type": "string"
            },
            "items": {
                "!type": "[Youtube.Schema.GuideCategory]"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "pageInfo": {
                "!type": "Youtube.Schema.PageInfo"
            },
            "prevPageToken": {
                "!type": "string"
            },
            "tokenPagination": {
                "!type": "Youtube.Schema.TokenPagination"
            },
            "visitorId": {
                "!type": "string"
            }
        },
        "Youtube.Schema.GuideCategorySnippet": {
            "channelId": {
                "!type": "string"
            },
            "title": {
                "!type": "string"
            }
        },
        "Youtube.Schema.I18nLanguage": {
            "etag": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "snippet": {
                "!type": "Youtube.Schema.I18nLanguageSnippet"
            }
        },
        "Youtube.Schema.I18nLanguageListResponse": {
            "etag": {
                "!type": "string"
            },
            "eventId": {
                "!type": "string"
            },
            "items": {
                "!type": "[Youtube.Schema.I18nLanguage]"
            },
            "kind": {
                "!type": "string"
            },
            "visitorId": {
                "!type": "string"
            }
        },
        "Youtube.Schema.I18nLanguageSnippet": {
            "hl": {
                "!type": "string"
            },
            "name": {
                "!type": "string"
            }
        },
        "Youtube.Schema.I18nRegion": {
            "etag": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "snippet": {
                "!type": "Youtube.Schema.I18nRegionSnippet"
            }
        },
        "Youtube.Schema.I18nRegionListResponse": {
            "etag": {
                "!type": "string"
            },
            "eventId": {
                "!type": "string"
            },
            "items": {
                "!type": "[Youtube.Schema.I18nRegion]"
            },
            "kind": {
                "!type": "string"
            },
            "visitorId": {
                "!type": "string"
            }
        },
        "Youtube.Schema.I18nRegionSnippet": {
            "gl": {
                "!type": "string"
            },
            "name": {
                "!type": "string"
            }
        },
        "Youtube.Schema.ImageSettings": {
            "backgroundImageUrl": {
                "!type": "Youtube.Schema.LocalizedProperty"
            },
            "bannerExternalUrl": {
                "!type": "string"
            },
            "bannerImageUrl": {
                "!type": "string"
            },
            "bannerMobileExtraHdImageUrl": {
                "!type": "string"
            },
            "bannerMobileHdImageUrl": {
                "!type": "string"
            },
            "bannerMobileImageUrl": {
                "!type": "string"
            },
            "bannerMobileLowImageUrl": {
                "!type": "string"
            },
            "bannerMobileMediumHdImageUrl": {
                "!type": "string"
            },
            "bannerTabletExtraHdImageUrl": {
                "!type": "string"
            },
            "bannerTabletHdImageUrl": {
                "!type": "string"
            },
            "bannerTabletImageUrl": {
                "!type": "string"
            },
            "bannerTabletLowImageUrl": {
                "!type": "string"
            },
            "bannerTvHighImageUrl": {
                "!type": "string"
            },
            "bannerTvImageUrl": {
                "!type": "string"
            },
            "bannerTvLowImageUrl": {
                "!type": "string"
            },
            "bannerTvMediumImageUrl": {
                "!type": "string"
            },
            "largeBrandedBannerImageImapScript": {
                "!type": "Youtube.Schema.LocalizedProperty"
            },
            "largeBrandedBannerImageUrl": {
                "!type": "Youtube.Schema.LocalizedProperty"
            },
            "smallBrandedBannerImageImapScript": {
                "!type": "Youtube.Schema.LocalizedProperty"
            },
            "smallBrandedBannerImageUrl": {
                "!type": "Youtube.Schema.LocalizedProperty"
            },
            "trackingImageUrl": {
                "!type": "string"
            },
            "watchIconImageUrl": {
                "!type": "string"
            }
        },
        "Youtube.Schema.IngestionInfo": {
            "backupIngestionAddress": {
                "!type": "string"
            },
            "ingestionAddress": {
                "!type": "string"
            },
            "streamName": {
                "!type": "string"
            }
        },
        "Youtube.Schema.InvideoBranding": {
            "imageBytes": {
                "!type": "[number]"
            },
            "imageUrl": {
                "!type": "string"
            },
            "position": {
                "!type": "Youtube.Schema.InvideoPosition"
            },
            "targetChannelId": {
                "!type": "string"
            },
            "timing": {
                "!type": "Youtube.Schema.InvideoTiming"
            }
        },
        "Youtube.Schema.InvideoPosition": {
            "cornerPosition": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            }
        },
        "Youtube.Schema.InvideoPromotion": {
            "defaultTiming": {
                "!type": "Youtube.Schema.InvideoTiming"
            },
            "items": {
                "!type": "[Youtube.Schema.PromotedItem]"
            },
            "position": {
                "!type": "Youtube.Schema.InvideoPosition"
            },
            "useSmartTiming": {
                "!type": "bool"
            }
        },
        "Youtube.Schema.InvideoTiming": {
            "durationMs": {
                "!type": "string"
            },
            "offsetMs": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            }
        },
        "Youtube.Schema.LanguageTag": {
            "value": {
                "!type": "string"
            }
        },
        "Youtube.Schema.LiveBroadcast": {
            "contentDetails": {
                "!type": "Youtube.Schema.LiveBroadcastContentDetails"
            },
            "etag": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "snippet": {
                "!type": "Youtube.Schema.LiveBroadcastSnippet"
            },
            "statistics": {
                "!type": "Youtube.Schema.LiveBroadcastStatistics"
            },
            "status": {
                "!type": "Youtube.Schema.LiveBroadcastStatus"
            },
            "topicDetails": {
                "!type": "Youtube.Schema.LiveBroadcastTopicDetails"
            }
        },
        "Youtube.Schema.LiveBroadcastContentDetails": {
            "boundStreamId": {
                "!type": "string"
            },
            "closedCaptionsType": {
                "!type": "string"
            },
            "enableClosedCaptions": {
                "!type": "bool"
            },
            "enableContentEncryption": {
                "!type": "bool"
            },
            "enableDvr": {
                "!type": "bool"
            },
            "enableEmbed": {
                "!type": "bool"
            },
            "enableLowLatency": {
                "!type": "bool"
            },
            "monitorStream": {
                "!type": "Youtube.Schema.MonitorStreamInfo"
            },
            "recordFromStart": {
                "!type": "bool"
            },
            "startWithSlate": {
                "!type": "bool"
            }
        },
        "Youtube.Schema.LiveBroadcastListResponse": {
            "etag": {
                "!type": "string"
            },
            "eventId": {
                "!type": "string"
            },
            "items": {
                "!type": "[Youtube.Schema.LiveBroadcast]"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "pageInfo": {
                "!type": "Youtube.Schema.PageInfo"
            },
            "prevPageToken": {
                "!type": "string"
            },
            "tokenPagination": {
                "!type": "Youtube.Schema.TokenPagination"
            },
            "visitorId": {
                "!type": "string"
            }
        },
        "Youtube.Schema.LiveBroadcastSnippet": {
            "actualEndTime": {
                "!type": "string"
            },
            "actualStartTime": {
                "!type": "string"
            },
            "channelId": {
                "!type": "string"
            },
            "description": {
                "!type": "string"
            },
            "isDefaultBroadcast": {
                "!type": "bool"
            },
            "liveChatId": {
                "!type": "string"
            },
            "publishedAt": {
                "!type": "string"
            },
            "scheduledEndTime": {
                "!type": "string"
            },
            "scheduledStartTime": {
                "!type": "string"
            },
            "thumbnails": {
                "!type": "Youtube.Schema.ThumbnailDetails"
            },
            "title": {
                "!type": "string"
            }
        },
        "Youtube.Schema.LiveBroadcastStatistics": {
            "concurrentViewers": {
                "!type": "string"
            },
            "totalChatCount": {
                "!type": "string"
            }
        },
        "Youtube.Schema.LiveBroadcastStatus": {
            "lifeCycleStatus": {
                "!type": "string"
            },
            "liveBroadcastPriority": {
                "!type": "string"
            },
            "privacyStatus": {
                "!type": "string"
            },
            "recordingStatus": {
                "!type": "string"
            }
        },
        "Youtube.Schema.LiveBroadcastTopic": {
            "snippet": {
                "!type": "Youtube.Schema.LiveBroadcastTopicSnippet"
            },
            "type": {
                "!type": "string"
            },
            "unmatched": {
                "!type": "bool"
            }
        },
        "Youtube.Schema.LiveBroadcastTopicDetails": {
            "topics": {
                "!type": "[Youtube.Schema.LiveBroadcastTopic]"
            }
        },
        "Youtube.Schema.LiveBroadcastTopicSnippet": {
            "name": {
                "!type": "string"
            },
            "releaseDate": {
                "!type": "string"
            }
        },
        "Youtube.Schema.LiveChatBan": {
            "etag": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "snippet": {
                "!type": "Youtube.Schema.LiveChatBanSnippet"
            }
        },
        "Youtube.Schema.LiveChatBanSnippet": {
            "banDurationSeconds": {
                "!type": "string"
            },
            "bannedUserDetails": {
                "!type": "Youtube.Schema.ChannelProfileDetails"
            },
            "liveChatId": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            }
        },
        "Youtube.Schema.LiveChatFanFundingEventDetails": {
            "amountDisplayString": {
                "!type": "string"
            },
            "amountMicros": {
                "!type": "string"
            },
            "currency": {
                "!type": "string"
            },
            "userComment": {
                "!type": "string"
            }
        },
        "Youtube.Schema.LiveChatMessage": {
            "authorDetails": {
                "!type": "Youtube.Schema.LiveChatMessageAuthorDetails"
            },
            "etag": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "snippet": {
                "!type": "Youtube.Schema.LiveChatMessageSnippet"
            }
        },
        "Youtube.Schema.LiveChatMessageAuthorDetails": {
            "channelId": {
                "!type": "string"
            },
            "channelUrl": {
                "!type": "string"
            },
            "displayName": {
                "!type": "string"
            },
            "isChatModerator": {
                "!type": "bool"
            },
            "isChatOwner": {
                "!type": "bool"
            },
            "isChatSponsor": {
                "!type": "bool"
            },
            "isVerified": {
                "!type": "bool"
            },
            "profileImageUrl": {
                "!type": "string"
            }
        },
        "Youtube.Schema.LiveChatMessageListResponse": {
            "etag": {
                "!type": "string"
            },
            "eventId": {
                "!type": "string"
            },
            "items": {
                "!type": "[Youtube.Schema.LiveChatMessage]"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "offlineAt": {
                "!type": "string"
            },
            "pageInfo": {
                "!type": "Youtube.Schema.PageInfo"
            },
            "pollingIntervalMillis": {
                "!type": "number"
            },
            "tokenPagination": {
                "!type": "Youtube.Schema.TokenPagination"
            },
            "visitorId": {
                "!type": "string"
            }
        },
        "Youtube.Schema.LiveChatMessageSnippet": {
            "authorChannelId": {
                "!type": "string"
            },
            "displayMessage": {
                "!type": "string"
            },
            "fanFundingEventDetails": {
                "!type": "Youtube.Schema.LiveChatFanFundingEventDetails"
            },
            "hasDisplayContent": {
                "!type": "bool"
            },
            "liveChatId": {
                "!type": "string"
            },
            "publishedAt": {
                "!type": "string"
            },
            "textMessageDetails": {
                "!type": "Youtube.Schema.LiveChatTextMessageDetails"
            },
            "type": {
                "!type": "string"
            }
        },
        "Youtube.Schema.LiveChatModerator": {
            "etag": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "snippet": {
                "!type": "Youtube.Schema.LiveChatModeratorSnippet"
            }
        },
        "Youtube.Schema.LiveChatModeratorListResponse": {
            "etag": {
                "!type": "string"
            },
            "eventId": {
                "!type": "string"
            },
            "items": {
                "!type": "[Youtube.Schema.LiveChatModerator]"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "pageInfo": {
                "!type": "Youtube.Schema.PageInfo"
            },
            "prevPageToken": {
                "!type": "string"
            },
            "tokenPagination": {
                "!type": "Youtube.Schema.TokenPagination"
            },
            "visitorId": {
                "!type": "string"
            }
        },
        "Youtube.Schema.LiveChatModeratorSnippet": {
            "liveChatId": {
                "!type": "string"
            },
            "moderatorDetails": {
                "!type": "Youtube.Schema.ChannelProfileDetails"
            }
        },
        "Youtube.Schema.LiveChatTextMessageDetails": {
            "messageText": {
                "!type": "string"
            }
        },
        "Youtube.Schema.LiveStream": {
            "cdn": {
                "!type": "Youtube.Schema.CdnSettings"
            },
            "contentDetails": {
                "!type": "Youtube.Schema.LiveStreamContentDetails"
            },
            "etag": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "snippet": {
                "!type": "Youtube.Schema.LiveStreamSnippet"
            },
            "status": {
                "!type": "Youtube.Schema.LiveStreamStatus"
            }
        },
        "Youtube.Schema.LiveStreamConfigurationIssue": {
            "description": {
                "!type": "string"
            },
            "reason": {
                "!type": "string"
            },
            "severity": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            }
        },
        "Youtube.Schema.LiveStreamContentDetails": {
            "closedCaptionsIngestionUrl": {
                "!type": "string"
            },
            "isReusable": {
                "!type": "bool"
            }
        },
        "Youtube.Schema.LiveStreamHealthStatus": {
            "configurationIssues": {
                "!type": "[Youtube.Schema.LiveStreamConfigurationIssue]"
            },
            "lastUpdateTimeSeconds": {
                "!type": "string"
            },
            "status": {
                "!type": "string"
            }
        },
        "Youtube.Schema.LiveStreamListResponse": {
            "etag": {
                "!type": "string"
            },
            "eventId": {
                "!type": "string"
            },
            "items": {
                "!type": "[Youtube.Schema.LiveStream]"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "pageInfo": {
                "!type": "Youtube.Schema.PageInfo"
            },
            "prevPageToken": {
                "!type": "string"
            },
            "tokenPagination": {
                "!type": "Youtube.Schema.TokenPagination"
            },
            "visitorId": {
                "!type": "string"
            }
        },
        "Youtube.Schema.LiveStreamSnippet": {
            "channelId": {
                "!type": "string"
            },
            "description": {
                "!type": "string"
            },
            "isDefaultStream": {
                "!type": "bool"
            },
            "publishedAt": {
                "!type": "string"
            },
            "title": {
                "!type": "string"
            }
        },
        "Youtube.Schema.LiveStreamStatus": {
            "healthStatus": {
                "!type": "Youtube.Schema.LiveStreamHealthStatus"
            },
            "streamStatus": {
                "!type": "string"
            }
        },
        "Youtube.Schema.LocalizedProperty": {
            "default": {
                "!type": "string"
            },
            "defaultLanguage": {
                "!type": "Youtube.Schema.LanguageTag"
            },
            "localized": {
                "!type": "[Youtube.Schema.LocalizedString]"
            }
        },
        "Youtube.Schema.LocalizedString": {
            "language": {
                "!type": "string"
            },
            "value": {
                "!type": "string"
            }
        },
        "Youtube.Schema.MonitorStreamInfo": {
            "broadcastStreamDelayMs": {
                "!type": "number"
            },
            "embedHtml": {
                "!type": "string"
            },
            "enableMonitorStream": {
                "!type": "bool"
            }
        },
        "Youtube.Schema.PageInfo": {
            "resultsPerPage": {
                "!type": "number"
            },
            "totalResults": {
                "!type": "number"
            }
        },
        "Youtube.Schema.Playlist": {
            "contentDetails": {
                "!type": "Youtube.Schema.PlaylistContentDetails"
            },
            "etag": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "localizations": {
                "!type": "object"
            },
            "player": {
                "!type": "Youtube.Schema.PlaylistPlayer"
            },
            "snippet": {
                "!type": "Youtube.Schema.PlaylistSnippet"
            },
            "status": {
                "!type": "Youtube.Schema.PlaylistStatus"
            }
        },
        "Youtube.Schema.PlaylistContentDetails": {
            "itemCount": {
                "!type": "number"
            }
        },
        "Youtube.Schema.PlaylistItem": {
            "contentDetails": {
                "!type": "Youtube.Schema.PlaylistItemContentDetails"
            },
            "etag": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "snippet": {
                "!type": "Youtube.Schema.PlaylistItemSnippet"
            },
            "status": {
                "!type": "Youtube.Schema.PlaylistItemStatus"
            }
        },
        "Youtube.Schema.PlaylistItemContentDetails": {
            "endAt": {
                "!type": "string"
            },
            "note": {
                "!type": "string"
            },
            "startAt": {
                "!type": "string"
            },
            "videoId": {
                "!type": "string"
            }
        },
        "Youtube.Schema.PlaylistItemListResponse": {
            "etag": {
                "!type": "string"
            },
            "eventId": {
                "!type": "string"
            },
            "items": {
                "!type": "[Youtube.Schema.PlaylistItem]"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "pageInfo": {
                "!type": "Youtube.Schema.PageInfo"
            },
            "prevPageToken": {
                "!type": "string"
            },
            "tokenPagination": {
                "!type": "Youtube.Schema.TokenPagination"
            },
            "visitorId": {
                "!type": "string"
            }
        },
        "Youtube.Schema.PlaylistItemSnippet": {
            "channelId": {
                "!type": "string"
            },
            "channelTitle": {
                "!type": "string"
            },
            "description": {
                "!type": "string"
            },
            "playlistId": {
                "!type": "string"
            },
            "position": {
                "!type": "number"
            },
            "publishedAt": {
                "!type": "string"
            },
            "resourceId": {
                "!type": "Youtube.Schema.ResourceId"
            },
            "thumbnails": {
                "!type": "Youtube.Schema.ThumbnailDetails"
            },
            "title": {
                "!type": "string"
            }
        },
        "Youtube.Schema.PlaylistItemStatus": {
            "privacyStatus": {
                "!type": "string"
            }
        },
        "Youtube.Schema.PlaylistListResponse": {
            "etag": {
                "!type": "string"
            },
            "eventId": {
                "!type": "string"
            },
            "items": {
                "!type": "[Youtube.Schema.Playlist]"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "pageInfo": {
                "!type": "Youtube.Schema.PageInfo"
            },
            "prevPageToken": {
                "!type": "string"
            },
            "tokenPagination": {
                "!type": "Youtube.Schema.TokenPagination"
            },
            "visitorId": {
                "!type": "string"
            }
        },
        "Youtube.Schema.PlaylistLocalization": {
            "description": {
                "!type": "string"
            },
            "title": {
                "!type": "string"
            }
        },
        "Youtube.Schema.PlaylistPlayer": {
            "embedHtml": {
                "!type": "string"
            }
        },
        "Youtube.Schema.PlaylistSnippet": {
            "channelId": {
                "!type": "string"
            },
            "channelTitle": {
                "!type": "string"
            },
            "defaultLanguage": {
                "!type": "string"
            },
            "description": {
                "!type": "string"
            },
            "localized": {
                "!type": "Youtube.Schema.PlaylistLocalization"
            },
            "publishedAt": {
                "!type": "string"
            },
            "tags": {
                "!type": "[string]"
            },
            "thumbnails": {
                "!type": "Youtube.Schema.ThumbnailDetails"
            },
            "title": {
                "!type": "string"
            }
        },
        "Youtube.Schema.PlaylistStatus": {
            "privacyStatus": {
                "!type": "string"
            }
        },
        "Youtube.Schema.PromotedItem": {
            "customMessage": {
                "!type": "string"
            },
            "id": {
                "!type": "Youtube.Schema.PromotedItemId"
            },
            "promotedByContentOwner": {
                "!type": "bool"
            },
            "timing": {
                "!type": "Youtube.Schema.InvideoTiming"
            }
        },
        "Youtube.Schema.PromotedItemId": {
            "recentlyUploadedBy": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            },
            "videoId": {
                "!type": "string"
            },
            "websiteUrl": {
                "!type": "string"
            }
        },
        "Youtube.Schema.PropertyValue": {
            "property": {
                "!type": "string"
            },
            "value": {
                "!type": "string"
            }
        },
        "Youtube.Schema.ResourceId": {
            "channelId": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "playlistId": {
                "!type": "string"
            },
            "videoId": {
                "!type": "string"
            }
        },
        "Youtube.Schema.SearchListResponse": {
            "etag": {
                "!type": "string"
            },
            "eventId": {
                "!type": "string"
            },
            "items": {
                "!type": "[Youtube.Schema.SearchResult]"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "pageInfo": {
                "!type": "Youtube.Schema.PageInfo"
            },
            "prevPageToken": {
                "!type": "string"
            },
            "tokenPagination": {
                "!type": "Youtube.Schema.TokenPagination"
            },
            "visitorId": {
                "!type": "string"
            }
        },
        "Youtube.Schema.SearchResult": {
            "etag": {
                "!type": "string"
            },
            "id": {
                "!type": "Youtube.Schema.ResourceId"
            },
            "kind": {
                "!type": "string"
            },
            "snippet": {
                "!type": "Youtube.Schema.SearchResultSnippet"
            }
        },
        "Youtube.Schema.SearchResultSnippet": {
            "channelId": {
                "!type": "string"
            },
            "channelTitle": {
                "!type": "string"
            },
            "description": {
                "!type": "string"
            },
            "liveBroadcastContent": {
                "!type": "string"
            },
            "publishedAt": {
                "!type": "string"
            },
            "thumbnails": {
                "!type": "Youtube.Schema.ThumbnailDetails"
            },
            "title": {
                "!type": "string"
            }
        },
        "Youtube.Schema.Sponsor": {
            "etag": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "snippet": {
                "!type": "Youtube.Schema.SponsorSnippet"
            }
        },
        "Youtube.Schema.SponsorListResponse": {
            "etag": {
                "!type": "string"
            },
            "eventId": {
                "!type": "string"
            },
            "items": {
                "!type": "[Youtube.Schema.Sponsor]"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "pageInfo": {
                "!type": "Youtube.Schema.PageInfo"
            },
            "tokenPagination": {
                "!type": "Youtube.Schema.TokenPagination"
            },
            "visitorId": {
                "!type": "string"
            }
        },
        "Youtube.Schema.SponsorSnippet": {
            "channelId": {
                "!type": "string"
            },
            "sponsorDetails": {
                "!type": "Youtube.Schema.ChannelProfileDetails"
            },
            "sponsorSince": {
                "!type": "string"
            }
        },
        "Youtube.Schema.Subscription": {
            "contentDetails": {
                "!type": "Youtube.Schema.SubscriptionContentDetails"
            },
            "etag": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "snippet": {
                "!type": "Youtube.Schema.SubscriptionSnippet"
            },
            "subscriberSnippet": {
                "!type": "Youtube.Schema.SubscriptionSubscriberSnippet"
            }
        },
        "Youtube.Schema.SubscriptionContentDetails": {
            "activityType": {
                "!type": "string"
            },
            "newItemCount": {
                "!type": "number"
            },
            "totalItemCount": {
                "!type": "number"
            }
        },
        "Youtube.Schema.SubscriptionListResponse": {
            "etag": {
                "!type": "string"
            },
            "eventId": {
                "!type": "string"
            },
            "items": {
                "!type": "[Youtube.Schema.Subscription]"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "pageInfo": {
                "!type": "Youtube.Schema.PageInfo"
            },
            "prevPageToken": {
                "!type": "string"
            },
            "tokenPagination": {
                "!type": "Youtube.Schema.TokenPagination"
            },
            "visitorId": {
                "!type": "string"
            }
        },
        "Youtube.Schema.SubscriptionSnippet": {
            "channelId": {
                "!type": "string"
            },
            "channelTitle": {
                "!type": "string"
            },
            "description": {
                "!type": "string"
            },
            "publishedAt": {
                "!type": "string"
            },
            "resourceId": {
                "!type": "Youtube.Schema.ResourceId"
            },
            "thumbnails": {
                "!type": "Youtube.Schema.ThumbnailDetails"
            },
            "title": {
                "!type": "string"
            }
        },
        "Youtube.Schema.SubscriptionSubscriberSnippet": {
            "channelId": {
                "!type": "string"
            },
            "description": {
                "!type": "string"
            },
            "thumbnails": {
                "!type": "Youtube.Schema.ThumbnailDetails"
            },
            "title": {
                "!type": "string"
            }
        },
        "Youtube.Schema.Thumbnail": {
            "height": {
                "!type": "number"
            },
            "url": {
                "!type": "string"
            },
            "width": {
                "!type": "number"
            }
        },
        "Youtube.Schema.ThumbnailDetails": {
            "default": {
                "!type": "Youtube.Schema.Thumbnail"
            },
            "high": {
                "!type": "Youtube.Schema.Thumbnail"
            },
            "maxres": {
                "!type": "Youtube.Schema.Thumbnail"
            },
            "medium": {
                "!type": "Youtube.Schema.Thumbnail"
            },
            "standard": {
                "!type": "Youtube.Schema.Thumbnail"
            }
        },
        "Youtube.Schema.ThumbnailSetResponse": {
            "etag": {
                "!type": "string"
            },
            "eventId": {
                "!type": "string"
            },
            "items": {
                "!type": "[Youtube.Schema.ThumbnailDetails]"
            },
            "kind": {
                "!type": "string"
            },
            "visitorId": {
                "!type": "string"
            }
        },
        "Youtube.Schema.Video": {
            "ageGating": {
                "!type": "Youtube.Schema.VideoAgeGating"
            },
            "contentDetails": {
                "!type": "Youtube.Schema.VideoContentDetails"
            },
            "conversionPings": {
                "!type": "Youtube.Schema.VideoConversionPings"
            },
            "etag": {
                "!type": "string"
            },
            "fileDetails": {
                "!type": "Youtube.Schema.VideoFileDetails"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "liveStreamingDetails": {
                "!type": "Youtube.Schema.VideoLiveStreamingDetails"
            },
            "localizations": {
                "!type": "object"
            },
            "monetizationDetails": {
                "!type": "Youtube.Schema.VideoMonetizationDetails"
            },
            "player": {
                "!type": "Youtube.Schema.VideoPlayer"
            },
            "processingDetails": {
                "!type": "Youtube.Schema.VideoProcessingDetails"
            },
            "projectDetails": {
                "!type": "Youtube.Schema.VideoProjectDetails"
            },
            "recordingDetails": {
                "!type": "Youtube.Schema.VideoRecordingDetails"
            },
            "snippet": {
                "!type": "Youtube.Schema.VideoSnippet"
            },
            "statistics": {
                "!type": "Youtube.Schema.VideoStatistics"
            },
            "status": {
                "!type": "Youtube.Schema.VideoStatus"
            },
            "suggestions": {
                "!type": "Youtube.Schema.VideoSuggestions"
            },
            "topicDetails": {
                "!type": "Youtube.Schema.VideoTopicDetails"
            }
        },
        "Youtube.Schema.VideoAbuseReport": {
            "comments": {
                "!type": "string"
            },
            "language": {
                "!type": "string"
            },
            "reasonId": {
                "!type": "string"
            },
            "secondaryReasonId": {
                "!type": "string"
            },
            "videoId": {
                "!type": "string"
            }
        },
        "Youtube.Schema.VideoAbuseReportReason": {
            "etag": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "snippet": {
                "!type": "Youtube.Schema.VideoAbuseReportReasonSnippet"
            }
        },
        "Youtube.Schema.VideoAbuseReportReasonListResponse": {
            "etag": {
                "!type": "string"
            },
            "eventId": {
                "!type": "string"
            },
            "items": {
                "!type": "[Youtube.Schema.VideoAbuseReportReason]"
            },
            "kind": {
                "!type": "string"
            },
            "visitorId": {
                "!type": "string"
            }
        },
        "Youtube.Schema.VideoAbuseReportReasonSnippet": {
            "label": {
                "!type": "string"
            },
            "secondaryReasons": {
                "!type": "[Youtube.Schema.VideoAbuseReportSecondaryReason]"
            }
        },
        "Youtube.Schema.VideoAbuseReportSecondaryReason": {
            "id": {
                "!type": "string"
            },
            "label": {
                "!type": "string"
            }
        },
        "Youtube.Schema.VideoAgeGating": {
            "alcoholContent": {
                "!type": "bool"
            },
            "restricted": {
                "!type": "bool"
            },
            "videoGameRating": {
                "!type": "string"
            }
        },
        "Youtube.Schema.VideoCategory": {
            "etag": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "snippet": {
                "!type": "Youtube.Schema.VideoCategorySnippet"
            }
        },
        "Youtube.Schema.VideoCategoryListResponse": {
            "etag": {
                "!type": "string"
            },
            "eventId": {
                "!type": "string"
            },
            "items": {
                "!type": "[Youtube.Schema.VideoCategory]"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "pageInfo": {
                "!type": "Youtube.Schema.PageInfo"
            },
            "prevPageToken": {
                "!type": "string"
            },
            "tokenPagination": {
                "!type": "Youtube.Schema.TokenPagination"
            },
            "visitorId": {
                "!type": "string"
            }
        },
        "Youtube.Schema.VideoCategorySnippet": {
            "assignable": {
                "!type": "bool"
            },
            "channelId": {
                "!type": "string"
            },
            "title": {
                "!type": "string"
            }
        },
        "Youtube.Schema.VideoContentDetails": {
            "caption": {
                "!type": "string"
            },
            "contentRating": {
                "!type": "Youtube.Schema.ContentRating"
            },
            "countryRestriction": {
                "!type": "Youtube.Schema.AccessPolicy"
            },
            "definition": {
                "!type": "string"
            },
            "dimension": {
                "!type": "string"
            },
            "duration": {
                "!type": "string"
            },
            "licensedContent": {
                "!type": "bool"
            },
            "regionRestriction": {
                "!type": "Youtube.Schema.VideoContentDetailsRegionRestriction"
            }
        },
        "Youtube.Schema.VideoContentDetailsRegionRestriction": {
            "allowed": {
                "!type": "[string]"
            },
            "blocked": {
                "!type": "[string]"
            }
        },
        "Youtube.Schema.VideoConversionPing": {
            "context": {
                "!type": "string"
            },
            "conversionUrl": {
                "!type": "string"
            }
        },
        "Youtube.Schema.VideoConversionPings": {
            "pings": {
                "!type": "[Youtube.Schema.VideoConversionPing]"
            }
        },
        "Youtube.Schema.VideoFileDetails": {
            "audioStreams": {
                "!type": "[Youtube.Schema.VideoFileDetailsAudioStream]"
            },
            "bitrateBps": {
                "!type": "string"
            },
            "container": {
                "!type": "string"
            },
            "creationTime": {
                "!type": "string"
            },
            "durationMs": {
                "!type": "string"
            },
            "fileName": {
                "!type": "string"
            },
            "fileSize": {
                "!type": "string"
            },
            "fileType": {
                "!type": "string"
            },
            "recordingLocation": {
                "!type": "Youtube.Schema.GeoPoint"
            },
            "videoStreams": {
                "!type": "[Youtube.Schema.VideoFileDetailsVideoStream]"
            }
        },
        "Youtube.Schema.VideoFileDetailsAudioStream": {
            "bitrateBps": {
                "!type": "string"
            },
            "channelCount": {
                "!type": "number"
            },
            "codec": {
                "!type": "string"
            },
            "vendor": {
                "!type": "string"
            }
        },
        "Youtube.Schema.VideoFileDetailsVideoStream": {
            "aspectRatio": {
                "!type": "number"
            },
            "bitrateBps": {
                "!type": "string"
            },
            "codec": {
                "!type": "string"
            },
            "frameRateFps": {
                "!type": "number"
            },
            "heightPixels": {
                "!type": "number"
            },
            "rotation": {
                "!type": "string"
            },
            "vendor": {
                "!type": "string"
            },
            "widthPixels": {
                "!type": "number"
            }
        },
        "Youtube.Schema.VideoGetRatingResponse": {
            "etag": {
                "!type": "string"
            },
            "eventId": {
                "!type": "string"
            },
            "items": {
                "!type": "[Youtube.Schema.VideoRating]"
            },
            "kind": {
                "!type": "string"
            },
            "visitorId": {
                "!type": "string"
            }
        },
        "Youtube.Schema.VideoListResponse": {
            "etag": {
                "!type": "string"
            },
            "eventId": {
                "!type": "string"
            },
            "items": {
                "!type": "[Youtube.Schema.Video]"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            },
            "pageInfo": {
                "!type": "Youtube.Schema.PageInfo"
            },
            "prevPageToken": {
                "!type": "string"
            },
            "tokenPagination": {
                "!type": "Youtube.Schema.TokenPagination"
            },
            "visitorId": {
                "!type": "string"
            }
        },
        "Youtube.Schema.VideoLiveStreamingDetails": {
            "activeLiveChatId": {
                "!type": "string"
            },
            "actualEndTime": {
                "!type": "string"
            },
            "actualStartTime": {
                "!type": "string"
            },
            "concurrentViewers": {
                "!type": "string"
            },
            "scheduledEndTime": {
                "!type": "string"
            },
            "scheduledStartTime": {
                "!type": "string"
            }
        },
        "Youtube.Schema.VideoLocalization": {
            "description": {
                "!type": "string"
            },
            "title": {
                "!type": "string"
            }
        },
        "Youtube.Schema.VideoMonetizationDetails": {
            "access": {
                "!type": "Youtube.Schema.AccessPolicy"
            }
        },
        "Youtube.Schema.VideoPlayer": {
            "embedHtml": {
                "!type": "string"
            }
        },
        "Youtube.Schema.VideoProcessingDetails": {
            "editorSuggestionsAvailability": {
                "!type": "string"
            },
            "fileDetailsAvailability": {
                "!type": "string"
            },
            "processingFailureReason": {
                "!type": "string"
            },
            "processingIssuesAvailability": {
                "!type": "string"
            },
            "processingProgress": {
                "!type": "Youtube.Schema.VideoProcessingDetailsProcessingProgress"
            },
            "processingStatus": {
                "!type": "string"
            },
            "tagSuggestionsAvailability": {
                "!type": "string"
            },
            "thumbnailsAvailability": {
                "!type": "string"
            }
        },
        "Youtube.Schema.VideoProcessingDetailsProcessingProgress": {
            "partsProcessed": {
                "!type": "string"
            },
            "partsTotal": {
                "!type": "string"
            },
            "timeLeftMs": {
                "!type": "string"
            }
        },
        "Youtube.Schema.VideoProjectDetails": {
            "tags": {
                "!type": "[string]"
            }
        },
        "Youtube.Schema.VideoRating": {
            "rating": {
                "!type": "string"
            },
            "videoId": {
                "!type": "string"
            }
        },
        "Youtube.Schema.VideoRecordingDetails": {
            "location": {
                "!type": "Youtube.Schema.GeoPoint"
            },
            "locationDescription": {
                "!type": "string"
            },
            "recordingDate": {
                "!type": "string"
            }
        },
        "Youtube.Schema.VideoSnippet": {
            "categoryId": {
                "!type": "string"
            },
            "channelId": {
                "!type": "string"
            },
            "channelTitle": {
                "!type": "string"
            },
            "defaultAudioLanguage": {
                "!type": "string"
            },
            "defaultLanguage": {
                "!type": "string"
            },
            "description": {
                "!type": "string"
            },
            "liveBroadcastContent": {
                "!type": "string"
            },
            "localized": {
                "!type": "Youtube.Schema.VideoLocalization"
            },
            "publishedAt": {
                "!type": "string"
            },
            "tags": {
                "!type": "[string]"
            },
            "thumbnails": {
                "!type": "Youtube.Schema.ThumbnailDetails"
            },
            "title": {
                "!type": "string"
            }
        },
        "Youtube.Schema.VideoStatistics": {
            "commentCount": {
                "!type": "string"
            },
            "dislikeCount": {
                "!type": "string"
            },
            "favoriteCount": {
                "!type": "string"
            },
            "likeCount": {
                "!type": "string"
            },
            "viewCount": {
                "!type": "string"
            }
        },
        "Youtube.Schema.VideoStatus": {
            "embeddable": {
                "!type": "bool"
            },
            "failureReason": {
                "!type": "string"
            },
            "license": {
                "!type": "string"
            },
            "privacyStatus": {
                "!type": "string"
            },
            "publicStatsViewable": {
                "!type": "bool"
            },
            "publishAt": {
                "!type": "string"
            },
            "rejectionReason": {
                "!type": "string"
            },
            "uploadStatus": {
                "!type": "string"
            }
        },
        "Youtube.Schema.VideoSuggestions": {
            "editorSuggestions": {
                "!type": "[string]"
            },
            "processingErrors": {
                "!type": "[string]"
            },
            "processingHints": {
                "!type": "[string]"
            },
            "processingWarnings": {
                "!type": "[string]"
            },
            "tagSuggestions": {
                "!type": "[Youtube.Schema.VideoSuggestionsTagSuggestion]"
            }
        },
        "Youtube.Schema.VideoSuggestionsTagSuggestion": {
            "categoryRestricts": {
                "!type": "[string]"
            },
            "tag": {
                "!type": "string"
            }
        },
        "Youtube.Schema.VideoTopicDetails": {
            "relevantTopicIds": {
                "!type": "[string]"
            },
            "topicIds": {
                "!type": "[string]"
            }
        },
        "Youtube.Schema.WatchSettings": {
            "backgroundColor": {
                "!type": "string"
            },
            "featuredPlaylistId": {
                "!type": "string"
            },
            "textColor": {
                "!type": "string"
            }
        },
        "YoutubeAnalytics.Collection.BatchReportDefinitionsCollection": {
            "list": {
                "!type": "fn(onBehalfOfContentOwner: string) -> YoutubeAnalytics.Schema.BatchReportDefinitionList"
            }
        },
        "YoutubeAnalytics.Collection.BatchReportsCollection": {
            "list": {
                "!type": "fn(batchReportDefinitionId: string, onBehalfOfContentOwner: string) -> YoutubeAnalytics.Schema.BatchReportList"
            }
        },
        "YoutubeAnalytics.Collection.GroupItemsCollection": {
            "insert": {
                "!type": "fn(resource: YoutubeAnalytics.Schema.GroupItem) -> YoutubeAnalytics.Schema.GroupItem"
            },
            "insert ": {
                "!type": "fn(resource: YoutubeAnalytics.Schema.GroupItem, optionalArgs: object) -> YoutubeAnalytics.Schema.GroupItem"
            },
            "list": {
                "!type": "fn(groupId: string) -> YoutubeAnalytics.Schema.GroupItemListResponse"
            },
            "list ": {
                "!type": "fn(groupId: string, optionalArgs: object) -> YoutubeAnalytics.Schema.GroupItemListResponse"
            },
            "remove": {
                "!type": "fn(id: string)"
            },
            "remove ": {
                "!type": "fn(id: string, optionalArgs: object)"
            }
        },
        "YoutubeAnalytics.Collection.GroupsCollection": {
            "insert": {
                "!type": "fn(resource: YoutubeAnalytics.Schema.Group) -> YoutubeAnalytics.Schema.Group"
            },
            "insert ": {
                "!type": "fn(resource: YoutubeAnalytics.Schema.Group, optionalArgs: object) -> YoutubeAnalytics.Schema.Group"
            },
            "list": {
                "!type": "fn() -> YoutubeAnalytics.Schema.GroupListResponse"
            },
            "list ": {
                "!type": "fn(optionalArgs: object) -> YoutubeAnalytics.Schema.GroupListResponse"
            },
            "remove": {
                "!type": "fn(id: string)"
            },
            "remove ": {
                "!type": "fn(id: string, optionalArgs: object)"
            },
            "update": {
                "!type": "fn(resource: YoutubeAnalytics.Schema.Group) -> YoutubeAnalytics.Schema.Group"
            },
            "update ": {
                "!type": "fn(resource: YoutubeAnalytics.Schema.Group, optionalArgs: object) -> YoutubeAnalytics.Schema.Group"
            }
        },
        "YoutubeAnalytics.Collection.ReportsCollection": {
            "query": {
                "!type": "fn(ids: string, startdate: string, enddate: string, metrics: string) -> YoutubeAnalytics.Schema.ResultTable"
            },
            "query ": {
                "!type": "fn(ids: string, startdate: string, enddate: string, metrics: string, optionalArgs: object) -> YoutubeAnalytics.Schema.ResultTable"
            }
        },
        "YoutubeAnalytics.Schema.BatchReport": {
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "outputs": {
                "!type": "[YoutubeAnalytics.Schema.BatchReportOutputs]"
            },
            "reportId": {
                "!type": "string"
            },
            "timeSpan": {
                "!type": "YoutubeAnalytics.Schema.BatchReportTimeSpan"
            },
            "timeUpdated": {
                "!type": "string"
            }
        },
        "YoutubeAnalytics.Schema.BatchReportDefinition": {
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "name": {
                "!type": "string"
            },
            "status": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            }
        },
        "YoutubeAnalytics.Schema.BatchReportDefinitionList": {
            "items": {
                "!type": "[YoutubeAnalytics.Schema.BatchReportDefinition]"
            },
            "kind": {
                "!type": "string"
            }
        },
        "YoutubeAnalytics.Schema.BatchReportList": {
            "items": {
                "!type": "[YoutubeAnalytics.Schema.BatchReport]"
            },
            "kind": {
                "!type": "string"
            }
        },
        "YoutubeAnalytics.Schema.BatchReportOutputs": {
            "downloadUrl": {
                "!type": "string"
            },
            "format": {
                "!type": "string"
            },
            "type": {
                "!type": "string"
            }
        },
        "YoutubeAnalytics.Schema.BatchReportTimeSpan": {
            "endTime": {
                "!type": "string"
            },
            "startTime": {
                "!type": "string"
            }
        },
        "YoutubeAnalytics.Schema.Group": {
            "contentDetails": {
                "!type": "YoutubeAnalytics.Schema.GroupContentDetails"
            },
            "etag": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "snippet": {
                "!type": "YoutubeAnalytics.Schema.GroupSnippet"
            }
        },
        "YoutubeAnalytics.Schema.GroupContentDetails": {
            "itemCount": {
                "!type": "string"
            },
            "itemType": {
                "!type": "string"
            }
        },
        "YoutubeAnalytics.Schema.GroupItem": {
            "etag": {
                "!type": "string"
            },
            "groupId": {
                "!type": "string"
            },
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            },
            "resource": {
                "!type": "YoutubeAnalytics.Schema.GroupItemResource"
            }
        },
        "YoutubeAnalytics.Schema.GroupItemListResponse": {
            "etag": {
                "!type": "string"
            },
            "items": {
                "!type": "[YoutubeAnalytics.Schema.GroupItem]"
            },
            "kind": {
                "!type": "string"
            }
        },
        "YoutubeAnalytics.Schema.GroupItemResource": {
            "id": {
                "!type": "string"
            },
            "kind": {
                "!type": "string"
            }
        },
        "YoutubeAnalytics.Schema.GroupListResponse": {
            "etag": {
                "!type": "string"
            },
            "items": {
                "!type": "[YoutubeAnalytics.Schema.Group]"
            },
            "kind": {
                "!type": "string"
            },
            "nextPageToken": {
                "!type": "string"
            }
        },
        "YoutubeAnalytics.Schema.GroupSnippet": {
            "publishedAt": {
                "!type": "string"
            },
            "title": {
                "!type": "string"
            }
        },
        "YoutubeAnalytics.Schema.ResultTable": {
            "columnHeaders": {
                "!type": "[YoutubeAnalytics.Schema.ResultTableColumnHeaders]"
            },
            "kind": {
                "!type": "string"
            },
            "rows": {
                "!type": "[[object]]"
            }
        },
        "YoutubeAnalytics.Schema.ResultTableColumnHeaders": {
            "columnType": {
                "!type": "string"
            },
            "dataType": {
                "!type": "string"
            },
            "name": {
                "!type": "string"
            }
        }
    },
    "!name": "AdWordsAPI",
    "AdWordsApp": {
        "adCustomizerSources": {
            "!type": "fn() -> AdWordsApp.AdCustomizerSourceSelector"
        },
        "adGroups": {
            "!type": "fn() -> AdWordsApp.AdGroupSelector"
        },
        "adParams": {
            "!type": "fn() -> AdWordsApp.AdParamSelector"
        },
        "ads": {
            "!type": "fn() -> AdWordsApp.AdSelector"
        },
        "biddingStrategies": {
            "!type": "fn() -> AdWordsApp.BiddingStrategySelector"
        },
        "budgets": {
            "!type": "fn() -> AdWordsApp.BudgetSelector"
        },
        "bulkUploads": {
            "!type": "fn() -> AdWordsApp.BulkUploads"
        },
        "campaigns": {
            "!type": "fn() -> AdWordsApp.CampaignSelector"
        },
        "createLabel": {
            "!type": "fn(name: string, description: string, backgroundColor: string)"
        },
        "currentAccount": {
            "!type": "fn() -> AdWordsApp.Account"
        },
        "display": {
            "!type": "fn() -> AdWordsApp.Display"
        },
        "excludedPlacementLists": {
            "!type": "fn() -> AdWordsApp.ExcludedPlacementListSelector"
        },
        "extensions": {
            "!type": "fn() -> AdWordsApp.Extensions"
        },
        "getExecutionInfo": {
            "!type": "fn() -> AdWordsApp.ExecutionInfo"
        },
        "keywords": {
            "!type": "fn() -> AdWordsApp.KeywordSelector"
        },
        "labels": {
            "!type": "fn() -> AdWordsApp.LabelSelector"
        },
        "negativeKeywordLists": {
            "!type": "fn() -> AdWordsApp.NegativeKeywordListSelector"
        },
        "newAdCustomizerSourceBuilder": {
            "!type": "fn() -> AdWordsApp.AdCustomizerSourceBuilder"
        },
        "newExcludedPlacementListBuilder": {
            "!type": "fn() -> AdWordsApp.ExcludedPlacementListBuilder"
        },
        "newNegativeKeywordListBuilder": {
            "!type": "fn() -> AdWordsApp.NegativeKeywordListBuilder"
        },
        "productAds": {
            "!type": "fn() -> AdWordsApp.ProductAdSelector"
        },
        "productGroups": {
            "!type": "fn() -> AdWordsApp.ProductGroupSelector"
        },
        "report": {
            "!type": "fn(query: string, optArgs: object) -> AdWordsApp.Report"
        },
        "shoppingAdGroups": {
            "!type": "fn() -> AdWordsApp.ShoppingAdGroupSelector"
        },
        "shoppingCampaigns": {
            "!type": "fn() -> AdWordsApp.ShoppingCampaignSelector"
        },
        "targeting": {
            "!type": "fn() -> AdWordsApp.Targeting"
        }
    },
    "Analytics": {
        "Data": {
            "!type": "Analytics.Collection.DataCollection"
        },
        "Management": {
            "!type": "Analytics.Collection.ManagementCollection"
        },
        "Metadata": {
            "!type": "Analytics.Collection.MetadataCollection"
        },
        "Provisioning": {
            "!type": "Analytics.Collection.ProvisioningCollection"
        },
        "newAccount": {
            "!type": "fn() -> Analytics.Schema.Account"
        },
        "newAccountChildLink": {
            "!type": "fn() -> Analytics.Schema.AccountChildLink"
        },
        "newAccountPermissions": {
            "!type": "fn() -> Analytics.Schema.AccountPermissions"
        },
        "newAccountRef": {
            "!type": "fn() -> Analytics.Schema.AccountRef"
        },
        "newAccountTicket": {
            "!type": "fn() -> Analytics.Schema.AccountTicket"
        },
        "newAdWordsAccount": {
            "!type": "fn() -> Analytics.Schema.AdWordsAccount"
        },
        "newAnalyticsDataimportDeleteUploadDataRequest": {
            "!type": "fn() -> Analytics.Schema.AnalyticsDataimportDeleteUploadDataRequest"
        },
        "newCustomDimension": {
            "!type": "fn() -> Analytics.Schema.CustomDimension"
        },
        "newCustomDimensionParentLink": {
            "!type": "fn() -> Analytics.Schema.CustomDimensionParentLink"
        },
        "newCustomMetric": {
            "!type": "fn() -> Analytics.Schema.CustomMetric"
        },
        "newCustomMetricParentLink": {
            "!type": "fn() -> Analytics.Schema.CustomMetricParentLink"
        },
        "newEntityAdWordsLink": {
            "!type": "fn() -> Analytics.Schema.EntityAdWordsLink"
        },
        "newEntityAdWordsLinkEntity": {
            "!type": "fn() -> Analytics.Schema.EntityAdWordsLinkEntity"
        },
        "newEntityUserLink": {
            "!type": "fn() -> Analytics.Schema.EntityUserLink"
        },
        "newEntityUserLinkEntity": {
            "!type": "fn() -> Analytics.Schema.EntityUserLinkEntity"
        },
        "newEntityUserLinkPermissions": {
            "!type": "fn() -> Analytics.Schema.EntityUserLinkPermissions"
        },
        "newExperiment": {
            "!type": "fn() -> Analytics.Schema.Experiment"
        },
        "newExperimentParentLink": {
            "!type": "fn() -> Analytics.Schema.ExperimentParentLink"
        },
        "newExperimentVariations": {
            "!type": "fn() -> Analytics.Schema.ExperimentVariations"
        },
        "newFilter": {
            "!type": "fn() -> Analytics.Schema.Filter"
        },
        "newFilterAdvancedDetails": {
            "!type": "fn() -> Analytics.Schema.FilterAdvancedDetails"
        },
        "newFilterExpression": {
            "!type": "fn() -> Analytics.Schema.FilterExpression"
        },
        "newFilterLowercaseDetails": {
            "!type": "fn() -> Analytics.Schema.FilterLowercaseDetails"
        },
        "newFilterParentLink": {
            "!type": "fn() -> Analytics.Schema.FilterParentLink"
        },
        "newFilterRef": {
            "!type": "fn() -> Analytics.Schema.FilterRef"
        },
        "newFilterSearchAndReplaceDetails": {
            "!type": "fn() -> Analytics.Schema.FilterSearchAndReplaceDetails"
        },
        "newFilterUppercaseDetails": {
            "!type": "fn() -> Analytics.Schema.FilterUppercaseDetails"
        },
        "newGoal": {
            "!type": "fn() -> Analytics.Schema.Goal"
        },
        "newGoalEventDetails": {
            "!type": "fn() -> Analytics.Schema.GoalEventDetails"
        },
        "newGoalEventDetailsEventConditions": {
            "!type": "fn() -> Analytics.Schema.GoalEventDetailsEventConditions"
        },
        "newGoalParentLink": {
            "!type": "fn() -> Analytics.Schema.GoalParentLink"
        },
        "newGoalUrlDestinationDetails": {
            "!type": "fn() -> Analytics.Schema.GoalUrlDestinationDetails"
        },
        "newGoalUrlDestinationDetailsSteps": {
            "!type": "fn() -> Analytics.Schema.GoalUrlDestinationDetailsSteps"
        },
        "newGoalVisitNumPagesDetails": {
            "!type": "fn() -> Analytics.Schema.GoalVisitNumPagesDetails"
        },
        "newGoalVisitTimeOnSiteDetails": {
            "!type": "fn() -> Analytics.Schema.GoalVisitTimeOnSiteDetails"
        },
        "newProfile": {
            "!type": "fn() -> Analytics.Schema.Profile"
        },
        "newProfileChildLink": {
            "!type": "fn() -> Analytics.Schema.ProfileChildLink"
        },
        "newProfileFilterLink": {
            "!type": "fn() -> Analytics.Schema.ProfileFilterLink"
        },
        "newProfileParentLink": {
            "!type": "fn() -> Analytics.Schema.ProfileParentLink"
        },
        "newProfilePermissions": {
            "!type": "fn() -> Analytics.Schema.ProfilePermissions"
        },
        "newProfileRef": {
            "!type": "fn() -> Analytics.Schema.ProfileRef"
        },
        "newUnsampledReport": {
            "!type": "fn() -> Analytics.Schema.UnsampledReport"
        },
        "newUnsampledReportCloudStorageDownloadDetails": {
            "!type": "fn() -> Analytics.Schema.UnsampledReportCloudStorageDownloadDetails"
        },
        "newUnsampledReportDriveDownloadDetails": {
            "!type": "fn() -> Analytics.Schema.UnsampledReportDriveDownloadDetails"
        },
        "newUserRef": {
            "!type": "fn() -> Analytics.Schema.UserRef"
        },
        "newWebPropertyRef": {
            "!type": "fn() -> Analytics.Schema.WebPropertyRef"
        },
        "newWebproperty": {
            "!type": "fn() -> Analytics.Schema.Webproperty"
        },
        "newWebpropertyChildLink": {
            "!type": "fn() -> Analytics.Schema.WebpropertyChildLink"
        },
        "newWebpropertyParentLink": {
            "!type": "fn() -> Analytics.Schema.WebpropertyParentLink"
        },
        "newWebpropertyPermissions": {
            "!type": "fn() -> Analytics.Schema.WebpropertyPermissions"
        }
    },
    "BigNumber": {
        "abs": {
            "!type": "fn() -> BigNumber"
        },
        "add": {
            "!type": "fn(augend: BigNumber) -> BigNumber"
        },
        "add ": {
            "!type": "fn(augend: number) -> BigNumber"
        },
        "compareTo": {
            "!type": "fn(value: BigNumber) -> number"
        },
        "compareTo ": {
            "!type": "fn(value: number) -> number"
        },
        "divide": {
            "!type": "fn(divisor: BigNumber) -> BigNumber"
        },
        "divide ": {
            "!type": "fn(divisor: number) -> BigNumber"
        },
        "divideAndRemainder": {
            "!type": "fn(divisor: BigNumber) -> [BigNumber]"
        },
        "divideAndRemainder ": {
            "!type": "fn(divisor: number) -> [BigNumber]"
        },
        "divideToIntegralValue": {
            "!type": "fn(divisor: BigNumber) -> BigNumber"
        },
        "divideToIntegralValue ": {
            "!type": "fn(divisor: number) -> BigNumber"
        },
        "max": {
            "!type": "fn(value: BigNumber) -> BigNumber"
        },
        "max ": {
            "!type": "fn(value: number) -> BigNumber"
        },
        "min": {
            "!type": "fn(value: BigNumber) -> BigNumber"
        },
        "min ": {
            "!type": "fn(value: number) -> BigNumber"
        },
        "movePointLeft": {
            "!type": "fn(shift: number) -> BigNumber"
        },
        "movePointRight": {
            "!type": "fn(shift: number) -> BigNumber"
        },
        "multiply": {
            "!type": "fn(multiplicand: BigNumber) -> BigNumber"
        },
        "multiply ": {
            "!type": "fn(multiplicand: number) -> BigNumber"
        },
        "negate": {
            "!type": "fn() -> BigNumber"
        },
        "newInstance": {
            "!type": "fn() -> BigNumber"
        },
        "parse": {
            "!type": "fn(value: string) -> BigNumber"
        },
        "parse ": {
            "!type": "fn(value: string, radix: number) -> BigNumber"
        },
        "plus": {
            "!type": "fn() -> BigNumber"
        },
        "pow": {
            "!type": "fn(exponent: number) -> BigNumber"
        },
        "precision": {
            "!type": "fn() -> number"
        },
        "remainder": {
            "!type": "fn(divisor: BigNumber) -> BigNumber"
        },
        "remainder ": {
            "!type": "fn(divisor: number) -> BigNumber"
        },
        "sign": {
            "!type": "fn() -> number"
        },
        "subtract": {
            "!type": "fn(subtrahend: BigNumber) -> BigNumber"
        },
        "subtract ": {
            "!type": "fn(subtrahend: number) -> BigNumber"
        },
        "toExponential": {
            "!type": "fn() -> string"
        },
        "toFixed": {
            "!type": "fn() -> string"
        },
        "toPrecision": {
            "!type": "fn() -> string"
        },
        "toString": {
            "!type": "fn() -> string"
        },
        "unitInTheLastPlaces": {
            "!type": "fn() -> BigNumber"
        },
        "valueOf": {
            "!type": "fn() -> number"
        },
        "valueOf ": {
            "!type": "fn(value: number) -> BigNumber"
        }
    },
    "Bigquery": {
        "Datasets": {
            "!type": "Bigquery.Collection.DatasetsCollection"
        },
        "Jobs": {
            "!type": "Bigquery.Collection.JobsCollection"
        },
        "Projects": {
            "!type": "Bigquery.Collection.ProjectsCollection"
        },
        "Tabledata": {
            "!type": "Bigquery.Collection.TabledataCollection"
        },
        "Tables": {
            "!type": "Bigquery.Collection.TablesCollection"
        },
        "newCsvOptions": {
            "!type": "fn() -> Bigquery.Schema.CsvOptions"
        },
        "newDataset": {
            "!type": "fn() -> Bigquery.Schema.Dataset"
        },
        "newDatasetAccess": {
            "!type": "fn() -> Bigquery.Schema.DatasetAccess"
        },
        "newDatasetReference": {
            "!type": "fn() -> Bigquery.Schema.DatasetReference"
        },
        "newErrorProto": {
            "!type": "fn() -> Bigquery.Schema.ErrorProto"
        },
        "newExplainQueryStage": {
            "!type": "fn() -> Bigquery.Schema.ExplainQueryStage"
        },
        "newExplainQueryStep": {
            "!type": "fn() -> Bigquery.Schema.ExplainQueryStep"
        },
        "newExternalDataConfiguration": {
            "!type": "fn() -> Bigquery.Schema.ExternalDataConfiguration"
        },
        "newJob": {
            "!type": "fn() -> Bigquery.Schema.Job"
        },
        "newJobConfiguration": {
            "!type": "fn() -> Bigquery.Schema.JobConfiguration"
        },
        "newJobConfigurationExtract": {
            "!type": "fn() -> Bigquery.Schema.JobConfigurationExtract"
        },
        "newJobConfigurationLoad": {
            "!type": "fn() -> Bigquery.Schema.JobConfigurationLoad"
        },
        "newJobConfigurationQuery": {
            "!type": "fn() -> Bigquery.Schema.JobConfigurationQuery"
        },
        "newJobConfigurationTableCopy": {
            "!type": "fn() -> Bigquery.Schema.JobConfigurationTableCopy"
        },
        "newJobReference": {
            "!type": "fn() -> Bigquery.Schema.JobReference"
        },
        "newJobStatistics": {
            "!type": "fn() -> Bigquery.Schema.JobStatistics"
        },
        "newJobStatistics2": {
            "!type": "fn() -> Bigquery.Schema.JobStatistics2"
        },
        "newJobStatistics3": {
            "!type": "fn() -> Bigquery.Schema.JobStatistics3"
        },
        "newJobStatistics4": {
            "!type": "fn() -> Bigquery.Schema.JobStatistics4"
        },
        "newJobStatus": {
            "!type": "fn() -> Bigquery.Schema.JobStatus"
        },
        "newQueryRequest": {
            "!type": "fn() -> Bigquery.Schema.QueryRequest"
        },
        "newStreamingbuffer": {
            "!type": "fn() -> Bigquery.Schema.Streamingbuffer"
        },
        "newTable": {
            "!type": "fn() -> Bigquery.Schema.Table"
        },
        "newTableDataInsertAllRequest": {
            "!type": "fn() -> Bigquery.Schema.TableDataInsertAllRequest"
        },
        "newTableDataInsertAllRequestRows": {
            "!type": "fn() -> Bigquery.Schema.TableDataInsertAllRequestRows"
        },
        "newTableFieldSchema": {
            "!type": "fn() -> Bigquery.Schema.TableFieldSchema"
        },
        "newTableReference": {
            "!type": "fn() -> Bigquery.Schema.TableReference"
        },
        "newTableSchema": {
            "!type": "fn() -> Bigquery.Schema.TableSchema"
        },
        "newUserDefinedFunctionResource": {
            "!type": "fn() -> Bigquery.Schema.UserDefinedFunctionResource"
        },
        "newViewDefinition": {
            "!type": "fn() -> Bigquery.Schema.ViewDefinition"
        }
    },
    "Calendar": {
        "Acl": {
            "!type": "Calendar.Collection.AclCollection"
        },
        "CalendarList": {
            "!type": "Calendar.Collection.CalendarListCollection"
        },
        "Calendars": {
            "!type": "Calendar.Collection.CalendarsCollection"
        },
        "Channels": {
            "!type": "Calendar.Collection.ChannelsCollection"
        },
        "Colors": {
            "!type": "Calendar.Collection.ColorsCollection"
        },
        "Events": {
            "!type": "Calendar.Collection.EventsCollection"
        },
        "Freebusy": {
            "!type": "Calendar.Collection.FreebusyCollection"
        },
        "Settings": {
            "!type": "Calendar.Collection.SettingsCollection"
        },
        "newAclRule": {
            "!type": "fn() -> Calendar.Schema.AclRule"
        },
        "newAclRuleScope": {
            "!type": "fn() -> Calendar.Schema.AclRuleScope"
        },
        "newCalendar": {
            "!type": "fn() -> Calendar.Schema.Calendar"
        },
        "newCalendarListEntry": {
            "!type": "fn() -> Calendar.Schema.CalendarListEntry"
        },
        "newCalendarListEntryNotificationSettings": {
            "!type": "fn() -> Calendar.Schema.CalendarListEntryNotificationSettings"
        },
        "newCalendarNotification": {
            "!type": "fn() -> Calendar.Schema.CalendarNotification"
        },
        "newChannel": {
            "!type": "fn() -> Calendar.Schema.Channel"
        },
        "newEvent": {
            "!type": "fn() -> Calendar.Schema.Event"
        },
        "newEventAttachment": {
            "!type": "fn() -> Calendar.Schema.EventAttachment"
        },
        "newEventAttendee": {
            "!type": "fn() -> Calendar.Schema.EventAttendee"
        },
        "newEventCreator": {
            "!type": "fn() -> Calendar.Schema.EventCreator"
        },
        "newEventDateTime": {
            "!type": "fn() -> Calendar.Schema.EventDateTime"
        },
        "newEventExtendedProperties": {
            "!type": "fn() -> Calendar.Schema.EventExtendedProperties"
        },
        "newEventGadget": {
            "!type": "fn() -> Calendar.Schema.EventGadget"
        },
        "newEventOrganizer": {
            "!type": "fn() -> Calendar.Schema.EventOrganizer"
        },
        "newEventReminder": {
            "!type": "fn() -> Calendar.Schema.EventReminder"
        },
        "newEventReminders": {
            "!type": "fn() -> Calendar.Schema.EventReminders"
        },
        "newEventSource": {
            "!type": "fn() -> Calendar.Schema.EventSource"
        },
        "newFreeBusyRequest": {
            "!type": "fn() -> Calendar.Schema.FreeBusyRequest"
        },
        "newFreeBusyRequestItem": {
            "!type": "fn() -> Calendar.Schema.FreeBusyRequestItem"
        }
    },
    "Charts": {
        "ChartType": {
            "!doc": "An enumeration of chart types supported by the Charts service.",
            "!type": "Charts.ChartType"
        },
        "ColumnType": {
            "!doc": "An enumeration of the valid data types for columns in a DataTable.",
            "!type": "ColumnType"
        },
        "CurveStyle": {
            "!doc": "An enumeration of the styles for curves in a chart.",
            "!type": "Charts.CurveStyle"
        },
        "MatchType": {
            "!doc": "An enumeration of how a string value should be matched.",
            "!type": "Charts.MatchType"
        },
        "Orientation": {
            "!doc": "An enumeration of the orientation of an object.",
            "!type": "Charts.Orientation"
        },
        "PickerValuesLayout": {
            "!doc": "An enumeration of how to display selected values in a picker widget.",
            "!type": "Charts.PickerValuesLayout"
        },
        "PointStyle": {
            "!doc": "An enumeration of the styles of points in a line.",
            "!type": "Charts.PointStyle"
        },
        "Position": {
            "!doc": "An enumeration of legend positions within a chart.",
            "!type": "Charts.Position"
        },
        "newAreaChart": {
            "!doc": "Starts building an area chart, as described in the Google Chart\n Tools documentation.",
            "!type": "fn() -> Charts.AreaChartBuilder"
        },
        "newBarChart": {
            "!doc": "Starts building a bar chart, as described in the Google Chart\n Tools documentation.",
            "!type": "fn() -> Charts.BarChartBuilder"
        },
        "newCategoryFilter": {
            "!doc": "Starts building a category filter control, as described in the \n Google Chart Tools documentation.",
            "!type": "fn() -> Charts.CategoryFilterBuilder"
        },
        "newColumnChart": {
            "!doc": "Starts building a column chart, as described in the Google Chart\n Tools documentation.",
            "!type": "fn() -> Charts.ColumnChartBuilder"
        },
        "newDashboardPanel": {
            "!doc": "Starts building a dashboard panel, as described in the \n Google Chart Tools documentation.",
            "!type": "fn() -> Charts.DashboardPanelBuilder"
        },
        "newDataTable": {
            "!doc": "Creates an empty data table, which can have its values set manually.\n \n Data tables hold the data for all chart types.",
            "!type": "fn() -> DataTableBuilder"
        },
        "newDataViewDefinition": {
            "!doc": "Creates a new data view definition.\n \n Use setters to define the different properties of the data view.",
            "!type": "fn() -> Charts.DataViewDefinitionBuilder"
        },
        "newLineChart": {
            "!doc": "Starts building a line chart, as described in the Google Chart\n Tools documentation.",
            "!type": "fn() -> Charts.LineChartBuilder"
        },
        "newNumberRangeFilter": {
            "!doc": "Starts building a number range filter control, as described in the \n Google Chart Tools documentation.",
            "!type": "fn() -> Charts.NumberRangeFilterBuilder"
        },
        "newPieChart": {
            "!doc": "Starts building a pie chart, as described in the Google Chart\n Tools documentation.",
            "!type": "fn() -> Charts.PieChartBuilder"
        },
        "newScatterChart": {
            "!doc": "Starts building a scatter chart, as described in the Google Chart\n Tools documentation.",
            "!type": "fn() -> Charts.ScatterChartBuilder"
        },
        "newStringFilter": {
            "!doc": "Starts building a string filter control, as described in the \n Google Chart Tools documentation.",
            "!type": "fn() -> Charts.StringFilterBuilder"
        },
        "newTableChart": {
            "!doc": "Starts building a table chart, as described in the Google Chart\n Tools documentation.",
            "!type": "fn() -> Charts.TableChartBuilder"
        },
        "newTextStyle": {
            "!doc": "Creates a new text style builder.\n \n To change the default values, use the setter functions.",
            "!type": "fn() -> Charts.TextStyleBuilder"
        }
    },
    "DriveApp": {
        "Access": {
            "!doc": "An enum representing classes of users who can access a file or folder, besides any individual\n users who have been explicitly given access.",
            "!type": "DriveApp.Access"
        },
        "Permission": {
            "!doc": "An enum representing the permissions granted to users who can access a file or folder, besides\n any individual users who have been explicitly given access.",
            "!type": "DriveApp.Permission"
        },
        "addFile": {
            "!doc": "Adds the given file to the root of the user's Drive. This method does not move the file out of its\n existing parent folder; a file can have more than one parent simultaneously.",
            "!type": "fn(child: DriveApp.File) -> DriveApp.Folder"
        },
        "addFolder": {
            "!doc": "Adds the given folder to the root of the user's Drive. This method does not move the folder out of\n its existing parent folder; a folder can have more than one parent simultaneously.",
            "!type": "fn(child: DriveApp.Folder) -> DriveApp.Folder"
        },
        "continueFileIterator": {
            "!doc": "Resumes a file iteration using a continuation token from a previous iterator. This method\n is useful if processing an iterator in one execution would exceed the maximum execution\n time. Continuation tokens are generally valid for one week.",
            "!type": "fn(continuationToken: string) -> DriveApp.FileIterator"
        },
        "continueFolderIterator": {
            "!doc": "Resumes a folder iteration using a continuation token from a previous iterator. This method\n is useful if processing an iterator in one execution would exceed the maximum execution\n time. Continuation tokens are generally valid for one week.",
            "!type": "fn(continuationToken: string) -> DriveApp.FolderIterator"
        },
        "createFile": {
            "!doc": "Creates a file in the root of the user's Drive from a given Blob of arbitrary data.\n\n \n \/\/ Create an image file in Google Drive using the Maps service.\n var blob = Maps.newStaticMap().setCenter('76 9th Avenue, New York NY').getBlob();\n DriveApp.createFile(blob);\n ",
            "!type": "fn(blob: BlobSource) -> DriveApp.File"
        },
        "createFile ": {
            "!doc": "Creates a text file in the root of the user's Drive with the given name and contents. Throws an\n exception if content is larger than 10MB.\n\n \n \/\/ Create a text file with the content \"Hello, world!\"\n DriveApp.createFile('New Text File', 'Hello, world!');\n ",
            "!type": "fn(name: string, content: string) -> DriveApp.File"
        },
        "createFile  ": {
            "!doc": "Creates a file in the root of the user's Drive with the given name, contents, and MIME type. Throws\n an exception if content is larger than 10MB.\n\n \n \n \/\/ Create an HTML file with the content &quot;Hello, world!&quot;\n DriveApp.createFile(&#39;New HTML File&#39;, &#39;&lt;b&gt;Hello, world!&lt;\/b&gt;&#39;, MimeType.HTML);\n \n ",
            "!type": "fn(name: string, content: string, mimeType: string) -> DriveApp.File"
        },
        "createFolder": {
            "!doc": "Creates a folder in the root of the user's Drive with the given name.",
            "!type": "fn(name: string) -> DriveApp.Folder"
        },
        "getFileById": {
            "!doc": "Gets the file with the given ID. Throws a scripting exception if the file does not exist or the\n user does not have permission to access it.",
            "!type": "fn(id: string) -> DriveApp.File"
        },
        "getFiles": {
            "!doc": "Gets a collection of all files in the user's Drive.",
            "!type": "fn() -> DriveApp.FileIterator"
        },
        "getFilesByName": {
            "!doc": "Gets a collection of all files in the user's Drive that have the given name.",
            "!type": "fn(name: string) -> DriveApp.FileIterator"
        },
        "getFilesByType": {
            "!doc": "Gets a collection of all files in the user's Drive that have the given MIME type.",
            "!type": "fn(mimeType: string) -> DriveApp.FileIterator"
        },
        "getFolderById": {
            "!doc": "Gets the folder with the given ID. Throws a scripting exception if the folder does not exist or\n the user does not have permission to access it.",
            "!type": "fn(id: string) -> DriveApp.Folder"
        },
        "getFolders": {
            "!doc": "Gets a collection of all folders in the user's Drive.",
            "!type": "fn() -> DriveApp.FolderIterator"
        },
        "getFoldersByName": {
            "!doc": "Gets a collection of all folders in the user's Drive that have the given name.",
            "!type": "fn(name: string) -> DriveApp.FolderIterator"
        },
        "getRootFolder": {
            "!doc": "Gets the folder at the root of the user's Drive.",
            "!type": "fn() -> DriveApp.Folder"
        },
        "getStorageLimit": {
            "!doc": "Gets the number of bytes the user is allowed to store in Drive.",
            "!type": "fn() -> number"
        },
        "getStorageUsed": {
            "!doc": "Gets the number of bytes the user is currently storing in Drive.",
            "!type": "fn() -> number"
        },
        "getTrashedFiles": {
            "!doc": "Gets a collection of all the files in the trash of the user's Drive.",
            "!type": "fn() -> DriveApp.FileIterator"
        },
        "getTrashedFolders": {
            "!doc": "Gets a collection of all the folders in the trash of the user's Drive.",
            "!type": "fn() -> DriveApp.FolderIterator"
        },
        "removeFile": {
            "!doc": "Removes the given file from the root of the user's Drive. This method does not delete the file, but\n if a file is removed from all of its parents, it cannot be seen in Drive except by searching\n for it or using the \"All items\" view.",
            "!type": "fn(child: DriveApp.File) -> DriveApp.Folder"
        },
        "removeFolder": {
            "!doc": "Removes the given folder from the root of the user's Drive. This method does not delete the folder\n or its contents, but if a folder is removed from all of its parents, it cannot be seen in Drive\n except by searching for it or using the \"All items\" view.",
            "!type": "fn(child: DriveApp.Folder) -> DriveApp.Folder"
        },
        "searchFiles": {
            "!doc": "Gets a collection of all files in the user's Drive that match the given search\n criteria. The search criteria are detailed the Google Drive\n SDK documentation. Note that the params argument is a query string that may\n contain string values, so take care to escape quotation marks correctly (for example\n &quot;title contains &#39;Gulliver\\\\&#39;s Travels&#39;&quot; or &#39;title contains &quot;Gulliver\\&#39;s\n Travels&quot;&#39;).\n\n \n \/\/ Log the name of every file in the user's Drive that modified after February 28,\n \/\/ 2013 whose name contains \"untitled\".\n var files = DriveApp.searchFiles(\n     'modifiedDate > \"2013-02-28\" and title contains \"untitled\"');\n while (files.hasNext()) {\n   var file = files.next();\n   Logger.log(file.getName());\n }\n ",
            "!type": "fn(params: string) -> DriveApp.FileIterator"
        },
        "searchFolders": {
            "!doc": "Gets a collection of all folders in the user's Drive that match the given search\n criteria. The search criteria are detailed the Google Drive\n SDK documentation. Note that the params argument is a query string that may\n contain string values, so take care to escape quotation marks correctly (for example\n &quot;title contains &#39;Gulliver\\\\&#39;s Travels&#39;&quot; or &#39;title contains &quot;Gulliver\\&#39;s\n Travels&quot;&#39;).\n\n \n \/\/ Log the name of every folder in the user's Drive that you own and is starred.\n var folders = DriveApp.searchFolders('starred = true and \"me\" in owners');\n while (folders.hasNext()) {\n   var folder = folders.next();\n   Logger.log(folder.getName());\n }\n ",
            "!type": "fn(params: string) -> DriveApp.FolderIterator"
        }
    },
    "Fusiontables": {
        "Column": {
            "!type": "Fusiontables.Collection.ColumnCollection"
        },
        "Query": {
            "!type": "Fusiontables.Collection.QueryCollection"
        },
        "Style": {
            "!type": "Fusiontables.Collection.StyleCollection"
        },
        "Table": {
            "!type": "Fusiontables.Collection.TableCollection"
        },
        "Task": {
            "!type": "Fusiontables.Collection.TaskCollection"
        },
        "Template": {
            "!type": "Fusiontables.Collection.TemplateCollection"
        },
        "newBucket": {
            "!type": "fn() -> Fusiontables.Schema.Bucket"
        },
        "newColumn": {
            "!type": "fn() -> Fusiontables.Schema.Column"
        },
        "newColumnBaseColumn": {
            "!type": "fn() -> Fusiontables.Schema.ColumnBaseColumn"
        },
        "newLineStyle": {
            "!type": "fn() -> Fusiontables.Schema.LineStyle"
        },
        "newPointStyle": {
            "!type": "fn() -> Fusiontables.Schema.PointStyle"
        },
        "newPolygonStyle": {
            "!type": "fn() -> Fusiontables.Schema.PolygonStyle"
        },
        "newStyleFunction": {
            "!type": "fn() -> Fusiontables.Schema.StyleFunction"
        },
        "newStyleFunctionGradient": {
            "!type": "fn() -> Fusiontables.Schema.StyleFunctionGradient"
        },
        "newStyleFunctionGradientColors": {
            "!type": "fn() -> Fusiontables.Schema.StyleFunctionGradientColors"
        },
        "newStyleSetting": {
            "!type": "fn() -> Fusiontables.Schema.StyleSetting"
        },
        "newTable": {
            "!type": "fn() -> Fusiontables.Schema.Table"
        },
        "newTemplate": {
            "!type": "fn() -> Fusiontables.Schema.Template"
        }
    },
    "Jdbc": {
        "Connection": {
            "!type": "Jdbc.JdbcConnection"
        },
        "DatabaseMetaData": {
            "!type": "Jdbc.JdbcDatabaseMetaData"
        },
        "ParameterMetaData": {
            "!type": "Jdbc.JdbcParameterMetaData"
        },
        "ResultSet": {
            "!type": "Jdbc.JdbcResultSet"
        },
        "ResultSetMetaData": {
            "!type": "Jdbc.JdbcResultSetMetaData"
        },
        "RowIdLifetime": {
            "!type": "Jdbc.JdbcRowIdLifetime"
        },
        "Statement": {
            "!type": "Jdbc.JdbcStatment"
        },
        "Types": {
            "!type": "Jdbc.JdbcTypes"
        },
        "getCloudSqlConnection": {
            "!doc": "Attempts to establish a connection to the given Google Cloud SQL URL.",
            "!type": "fn(url: string) -> Jdbc.JdbcConnection"
        },
        "getCloudSqlConnection ": {
            "!doc": "Attempts to establish a connection to the given Google Cloud SQL URL.",
            "!type": "fn(url: string, info: object) -> Jdbc.JdbcConnection"
        },
        "getCloudSqlConnection  ": {
            "!doc": "Attempts to establish a connection to the given Google Cloud SQL URL.",
            "!type": "fn(url: string, userName: string, password: string) -> Jdbc.JdbcConnection"
        },
        "getConnection": {
            "!doc": "Attempts to establish a connection to the given database URL.\n\n \n \n  var conn = Jdbc.getConnection(&#39;jdbc:mysql:\/\/yoursqlserver.example.com:3306\/database_name&#39;);\n ",
            "!type": "fn(url: string) -> Jdbc.JdbcConnection"
        },
        "getConnection ": {
            "!doc": "Attempts to establish a connection to the given database URL.\n\n \n \n  var conn = Jdbc.getConnection(&#39;jdbc:mysql:\/\/yoursqlserver.example.com:3306\/database_name&#39;,\n                                {user: &#39;username&#39;, password: &#39;password&#39;});\n ",
            "!type": "fn(url: string, info: object) -> Jdbc.JdbcConnection"
        },
        "getConnection  ": {
            "!doc": "Attempts to establish a connection to the given database using a username and password.\n\n \n \n  var conn = Jdbc.getConnection(&#39;jdbc:mysql:\/\/yoursqlserver.example.com:3306\/database_name&#39;,\n                                &#39;username&#39;, &#39;password&#39;);\n ",
            "!type": "fn(url: string, userName: string, password: string) -> Jdbc.JdbcConnection"
        },
        "newDate": {
            "!doc": "Create a date from milliseconds since epoch.",
            "!type": "fn(milliseconds: number) -> Jdbc.JdbcDate"
        },
        "newTime": {
            "!doc": "Create a time from milliseconds since epoch.",
            "!type": "fn(milliseconds: number) -> Jdbc.JdbcTime"
        },
        "newTimestamp": {
            "!doc": "Create a timestamp from milliseconds since epoch.",
            "!type": "fn(milliseconds: number) -> Jdbc.JdbcTimestamp"
        },
        "parseDate": {
            "!doc": "Create a date by parsing the SQL date string.",
            "!type": "fn(date: string) -> Jdbc.JdbcDate"
        },
        "parseTime": {
            "!doc": "Create a time by parsing the SQL time string.",
            "!type": "fn(time: string) -> Jdbc.JdbcTime"
        },
        "parseTimestamp": {
            "!doc": "Create a timestamp by parsing the SQL timestamp string.",
            "!type": "fn(timestamp: string) -> Jdbc.JdbcTimestamp"
        }
    },
    "Logger": {
        "clear": {
            "!doc": "Clears the log.",
            "!type": "fn()"
        },
        "getLog": {
            "!doc": "Returns a complete list of messages in the current log. This method can be used to save or\n email the entire log output generated during script execution.\n\n \n \/\/ Generate a log, then email it to the person who ran the script.\n var files = DriveApp.getFiles();\n while (files.hasNext()) {\n   Logger.log(files.next().getName());\n }\n var recipient = Session.getActiveUser().getEmail();\n var subject = 'A list of files in your Google Drive';\n var body = Logger.getLog();\n MailApp.sendEmail(recipient, subject, body);\n ",
            "!type": "fn() -> string"
        },
        "log": {
            "!doc": "Writes the string to the logging console. To view the logged output, select\n View > Show logs. This can be very useful for debugging scripts.",
            "!type": "fn(data: object) -> Logger"
        },
        "log ": {
            "!doc": "Writes a formatted string to the logging console, using the format and values provided. The\n string can include multiple %s placeholders, which are replaced with corresponding\n values from the list of arguments, converted to strings.\n\n \n \/\/ Log the number of Google Groups you belong to.\n var groups = GroupsApp.getGroups();\n Logger.log('You are a member of %s Google Groups.', groups.length);\n ",
            "!type": "fn(format: string, values: Object...) -> Logger"
        }
    },
    "MailApp": {
        "getRemainingDailyQuota": {
            "!doc": "Returns the number of remaining emails a user can send for the rest of\n the day.\n\n Quotas are based on the number of email recipients. Specific quota information is available on\n the quota tab of the Apps Script\n dashboard.\n\n \n \n var emailQuotaRemaining = MailApp.getRemainingDailyQuota();\n Logger.log(&quot;Remaining email quota: &quot; + emailQuotaRemaining);\n ",
            "!type": "fn() -> number"
        },
        "sendEmail": {
            "!doc": "Sends an email message. This variation of the method is much more flexible,\n allowing for many more options.\n\n \n \n \/\/ This code fetches the Google and YouTube logos, inlines them in an email\n \/\/ and sends the email\n function inlineImage() {\n   var googleLogoUrl = &quot;http:\/\/www.google.com\/intl\/en_com\/images\/srpr\/logo3w.png&quot;;\n   var youtubeLogoUrl =\n         &quot;https:\/\/developers.google.com\/youtube\/images\/YouTube_logo_standard_white.png&quot;;\n   var googleLogoBlob = UrlFetchApp\n                          .fetch(googleLogoUrl)\n                          .getBlob()\n                          .setName(&quot;googleLogoBlob&quot;);\n   var youtubeLogoBlob = UrlFetchApp\n                           .fetch(youtubeLogoUrl)\n                           .getBlob()\n                           .setName(&quot;youtubeLogoBlob&quot;);\n   MailApp.sendEmail({\n     to: &quot;recipient@example.com&quot;,\n     subject: &quot;Logos&quot;,\n     htmlBody: &quot;inline Google Logo&lt;img src=&#39;cid:googleLogo&#39;&gt; images! &lt;br&gt;&quot; +\n               &quot;inline YouTube Logo &lt;img src=&#39;cid:youtubeLogo&#39;&gt;&quot;,\n     inlineImages:\n       {\n         googleLogo: googleLogoBlob,\n         youtubeLogo: youtubeLogoBlob\n       }\n   });\n }\n ",
            "!type": "fn(message: object)"
        },
        "sendEmail ": {
            "!doc": "Sends an email message.\n\n \n \n MailApp.sendEmail(&quot;recipient@example.com&quot;,\n                   &quot;TPS reports&quot;,\n                   &quot;Where are the TPS reports?&quot;);\n ",
            "!type": "fn(recipient: string, subject: string, body: string)"
        },
        "sendEmail  ": {
            "!doc": "Sends an email message with optional arguments.\n\n \n \n \/\/ Send an email with two attachments: a file from Google Drive (as a PDF) and an HTML file.\n var file = DriveApp.getFileById(&#39;1234567890abcdefghijklmnopqrstuvwxyz&#39;);\n var blob = Utilities.newBlob(&#39;Insert any HTML content here&#39;, &#39;text\/html&#39;, &#39;my_document.html&#39;);\n MailApp.sendEmail(&#39;mike@example.com&#39;, &#39;Attachment example&#39;, &#39;Two files are attached.&#39;, {\n     name: &#39;Automatic Emailer Script&#39;,\n     attachments: [file.getAs(MimeType.PDF), blob]\n });\n ",
            "!type": "fn(recipient: string, subject: string, body: string, options: object)"
        },
        "sendEmail   ": {
            "!doc": "Sends an email message. This method allows a user to easily specify\n a Reply-To address for the sent message that can differ from the sender.\n\n \n \n MailApp.sendEmail(&quot;recipient@example.com&quot;,\n                   &quot;replies@example.com&quot;,\n                   &quot;TPS report status&quot;,\n                   &quot;What is the status of those TPS reports?&quot;);\n ",
            "!type": "fn(to: string, replyTo: string, subject: string, body: string)"
        }
    },
    "MccApp": {
        "accountLabels": {
            "!type": "fn() -> MccApp.AccountLabelSelector"
        },
        "accounts": {
            "!type": "fn() -> MccApp.ManagedAccountSelector"
        },
        "createAccountLabel": {
            "!type": "fn(name: string)"
        },
        "select": {
            "!type": "fn(account: ManagedAccount)"
        }
    },
    "MimeType": {
        "BMP": {
            "!doc": "Representation of MIME type for a BMP image file (typically .bmp).",
            "!type": "string"
        },
        "CSS": {
            "!doc": "Representation of MIME type for a CSS text file (typically .css).",
            "!type": "string"
        },
        "CSV": {
            "!doc": "Representation of MIME type for a CSV text file (typically .csv).",
            "!type": "string"
        },
        "FOLDER": {
            "!doc": "Representation of MIME type for a Google Drive folder.",
            "!type": "string"
        },
        "GIF": {
            "!doc": "Representation of MIME type for a GIF image file (typically .gif).",
            "!type": "string"
        },
        "GOOGLE_APPS_SCRIPT": {
            "!doc": "Representation of MIME type for a Google Apps Script project.",
            "!type": "string"
        },
        "GOOGLE_DOCS": {
            "!doc": "Representation of MIME type for a Google Docs file.",
            "!type": "string"
        },
        "GOOGLE_DRAWINGS": {
            "!doc": "Representation of MIME type for a Google Drawings file.",
            "!type": "string"
        },
        "GOOGLE_FORMS": {
            "!doc": "Representation of MIME type for a Google Forms file.",
            "!type": "string"
        },
        "GOOGLE_SHEETS": {
            "!doc": "Representation of MIME type for a Google Sheets file.",
            "!type": "string"
        },
        "GOOGLE_SLIDES": {
            "!doc": "Representation of MIME type for a Google Slides file.",
            "!type": "string"
        },
        "HTML": {
            "!doc": "Representation of MIME type for an HTML text file (typically .html).",
            "!type": "string"
        },
        "JAVASCRIPT": {
            "!doc": "Representation of MIME type for a JavaScript text file (typically .js).",
            "!type": "string"
        },
        "JPEG": {
            "!doc": "Representation of MIME type for a JPEG image file (typically .jpg).",
            "!type": "string"
        },
        "MICROSOFT_EXCEL": {
            "!doc": "Representation of MIME type for a Microsoft Excel spreadsheet file (typically .xlsx).",
            "!type": "string"
        },
        "MICROSOFT_EXCEL_LEGACY": {
            "!doc": "Representation of MIME type for a Microsoft Excel legacy file (typically .xls).",
            "!type": "string"
        },
        "MICROSOFT_POWERPOINT": {
            "!doc": "Representation of MIME type for a Microsoft PowerPoint presentation file (typically .pptx).",
            "!type": "string"
        },
        "MICROSOFT_POWERPOINT_LEGACY": {
            "!doc": "Representation of MIME type for a Microsoft PowerPoint legacy file (typically .ppt).",
            "!type": "string"
        },
        "MICROSOFT_WORD": {
            "!doc": "Representation of MIME type for a Microsoft Word document file (typically .docx).",
            "!type": "string"
        },
        "MICROSOFT_WORD_LEGACY": {
            "!doc": "Representation of MIME type for a Microsoft Word legacy file (typically .doc).",
            "!type": "string"
        },
        "OPENDOCUMENT_GRAPHICS": {
            "!doc": "Representation of MIME type for an OpenDocument graphics file (typically .odg).",
            "!type": "string"
        },
        "OPENDOCUMENT_PRESENTATION": {
            "!doc": "Representation of MIME type for an OpenDocument presentation file (typically .odp).",
            "!type": "string"
        },
        "OPENDOCUMENT_SPREADSHEET": {
            "!doc": "Representation of MIME type for an OpenDocument spreadsheet file (typically .ods).",
            "!type": "string"
        },
        "OPENDOCUMENT_TEXT": {
            "!doc": "Representation of MIME type for an OpenDocument word-processing file (typically .odt).",
            "!type": "string"
        },
        "PDF": {
            "!doc": "Representation of MIME type for a PDF file (typically .pdf).",
            "!type": "string"
        },
        "PLAIN_TEXT": {
            "!doc": "Representation of MIME type for a plain text file (typically .txt).",
            "!type": "string"
        },
        "PNG": {
            "!doc": "Representation of MIME type for a PNG image file (typically .png).",
            "!type": "string"
        },
        "RTF": {
            "!doc": "Representation of MIME type for a rich text file (typically .rtf).",
            "!type": "string"
        },
        "SVG": {
            "!doc": "Representation of MIME type for an SVG image file (typically .svg).",
            "!type": "string"
        },
        "ZIP": {
            "!doc": "Representation of MIME type for a ZIP archive file (typically .zip).",
            "!type": "string"
        }
    },
    "Prediction": {
        "Hostedmodels": {
            "!type": "Prediction.Collection.HostedmodelsCollection"
        },
        "Trainedmodels": {
            "!type": "Prediction.Collection.TrainedmodelsCollection"
        },
        "newInput": {
            "!type": "fn() -> Prediction.Schema.Input"
        },
        "newInputInput": {
            "!type": "fn() -> Prediction.Schema.InputInput"
        },
        "newInsert": {
            "!type": "fn() -> Prediction.Schema.Insert"
        },
        "newInsertTrainingInstances": {
            "!type": "fn() -> Prediction.Schema.InsertTrainingInstances"
        },
        "newUpdate": {
            "!type": "fn() -> Prediction.Schema.Update"
        }
    },
    "ShoppingContent": {
        "Accounts": {
            "!type": "ShoppingContent.Collection.AccountsCollection"
        },
        "Accountshipping": {
            "!type": "ShoppingContent.Collection.AccountshippingCollection"
        },
        "Accountstatuses": {
            "!type": "ShoppingContent.Collection.AccountstatusesCollection"
        },
        "Accounttax": {
            "!type": "ShoppingContent.Collection.AccounttaxCollection"
        },
        "Datafeeds": {
            "!type": "ShoppingContent.Collection.DatafeedsCollection"
        },
        "Datafeedstatuses": {
            "!type": "ShoppingContent.Collection.DatafeedstatusesCollection"
        },
        "Inventory": {
            "!type": "ShoppingContent.Collection.InventoryCollection"
        },
        "Orders": {
            "!type": "ShoppingContent.Collection.OrdersCollection"
        },
        "Products": {
            "!type": "ShoppingContent.Collection.ProductsCollection"
        },
        "Productstatuses": {
            "!type": "ShoppingContent.Collection.ProductstatusesCollection"
        },
        "newAccount": {
            "!type": "fn() -> ShoppingContent.Schema.Account"
        },
        "newAccountAdwordsLink": {
            "!type": "fn() -> ShoppingContent.Schema.AccountAdwordsLink"
        },
        "newAccountShipping": {
            "!type": "fn() -> ShoppingContent.Schema.AccountShipping"
        },
        "newAccountShippingCarrierRate": {
            "!type": "fn() -> ShoppingContent.Schema.AccountShippingCarrierRate"
        },
        "newAccountShippingCondition": {
            "!type": "fn() -> ShoppingContent.Schema.AccountShippingCondition"
        },
        "newAccountShippingLocationGroup": {
            "!type": "fn() -> ShoppingContent.Schema.AccountShippingLocationGroup"
        },
        "newAccountShippingPostalCodeRange": {
            "!type": "fn() -> ShoppingContent.Schema.AccountShippingPostalCodeRange"
        },
        "newAccountShippingRateTable": {
            "!type": "fn() -> ShoppingContent.Schema.AccountShippingRateTable"
        },
        "newAccountShippingRateTableCell": {
            "!type": "fn() -> ShoppingContent.Schema.AccountShippingRateTableCell"
        },
        "newAccountShippingShippingService": {
            "!type": "fn() -> ShoppingContent.Schema.AccountShippingShippingService"
        },
        "newAccountShippingShippingServiceCalculationMethod": {
            "!type": "fn() -> ShoppingContent.Schema.AccountShippingShippingServiceCalculationMethod"
        },
        "newAccountShippingShippingServiceCostRule": {
            "!type": "fn() -> ShoppingContent.Schema.AccountShippingShippingServiceCostRule"
        },
        "newAccountTax": {
            "!type": "fn() -> ShoppingContent.Schema.AccountTax"
        },
        "newAccountTaxTaxRule": {
            "!type": "fn() -> ShoppingContent.Schema.AccountTaxTaxRule"
        },
        "newAccountUser": {
            "!type": "fn() -> ShoppingContent.Schema.AccountUser"
        },
        "newAccountsCustomBatchRequest": {
            "!type": "fn() -> ShoppingContent.Schema.AccountsCustomBatchRequest"
        },
        "newAccountsCustomBatchRequestEntry": {
            "!type": "fn() -> ShoppingContent.Schema.AccountsCustomBatchRequestEntry"
        },
        "newAccountshippingCustomBatchRequest": {
            "!type": "fn() -> ShoppingContent.Schema.AccountshippingCustomBatchRequest"
        },
        "newAccountshippingCustomBatchRequestEntry": {
            "!type": "fn() -> ShoppingContent.Schema.AccountshippingCustomBatchRequestEntry"
        },
        "newAccountstatusesCustomBatchRequest": {
            "!type": "fn() -> ShoppingContent.Schema.AccountstatusesCustomBatchRequest"
        },
        "newAccountstatusesCustomBatchRequestEntry": {
            "!type": "fn() -> ShoppingContent.Schema.AccountstatusesCustomBatchRequestEntry"
        },
        "newAccounttaxCustomBatchRequest": {
            "!type": "fn() -> ShoppingContent.Schema.AccounttaxCustomBatchRequest"
        },
        "newAccounttaxCustomBatchRequestEntry": {
            "!type": "fn() -> ShoppingContent.Schema.AccounttaxCustomBatchRequestEntry"
        },
        "newDatafeed": {
            "!type": "fn() -> ShoppingContent.Schema.Datafeed"
        },
        "newDatafeedFetchSchedule": {
            "!type": "fn() -> ShoppingContent.Schema.DatafeedFetchSchedule"
        },
        "newDatafeedFormat": {
            "!type": "fn() -> ShoppingContent.Schema.DatafeedFormat"
        },
        "newDatafeedsCustomBatchRequest": {
            "!type": "fn() -> ShoppingContent.Schema.DatafeedsCustomBatchRequest"
        },
        "newDatafeedsCustomBatchRequestEntry": {
            "!type": "fn() -> ShoppingContent.Schema.DatafeedsCustomBatchRequestEntry"
        },
        "newDatafeedstatusesCustomBatchRequest": {
            "!type": "fn() -> ShoppingContent.Schema.DatafeedstatusesCustomBatchRequest"
        },
        "newDatafeedstatusesCustomBatchRequestEntry": {
            "!type": "fn() -> ShoppingContent.Schema.DatafeedstatusesCustomBatchRequestEntry"
        },
        "newError": {
            "!type": "fn() -> ShoppingContent.Schema.Error"
        },
        "newInstallment": {
            "!type": "fn() -> ShoppingContent.Schema.Installment"
        },
        "newInventory": {
            "!type": "fn() -> ShoppingContent.Schema.Inventory"
        },
        "newInventoryCustomBatchRequest": {
            "!type": "fn() -> ShoppingContent.Schema.InventoryCustomBatchRequest"
        },
        "newInventoryCustomBatchRequestEntry": {
            "!type": "fn() -> ShoppingContent.Schema.InventoryCustomBatchRequestEntry"
        },
        "newInventorySetRequest": {
            "!type": "fn() -> ShoppingContent.Schema.InventorySetRequest"
        },
        "newLoyaltyPoints": {
            "!type": "fn() -> ShoppingContent.Schema.LoyaltyPoints"
        },
        "newOrderLineItemProductVariantAttribute": {
            "!type": "fn() -> ShoppingContent.Schema.OrderLineItemProductVariantAttribute"
        },
        "newOrderLineItemReturnInfo": {
            "!type": "fn() -> ShoppingContent.Schema.OrderLineItemReturnInfo"
        },
        "newOrderLineItemShippingDetails": {
            "!type": "fn() -> ShoppingContent.Schema.OrderLineItemShippingDetails"
        },
        "newOrderLineItemShippingDetailsMethod": {
            "!type": "fn() -> ShoppingContent.Schema.OrderLineItemShippingDetailsMethod"
        },
        "newOrderShipmentLineItemShipment": {
            "!type": "fn() -> ShoppingContent.Schema.OrderShipmentLineItemShipment"
        },
        "newOrdersAcknowledgeRequest": {
            "!type": "fn() -> ShoppingContent.Schema.OrdersAcknowledgeRequest"
        },
        "newOrdersCancelLineItemRequest": {
            "!type": "fn() -> ShoppingContent.Schema.OrdersCancelLineItemRequest"
        },
        "newOrdersCancelRequest": {
            "!type": "fn() -> ShoppingContent.Schema.OrdersCancelRequest"
        },
        "newOrdersCreateTestOrderRequest": {
            "!type": "fn() -> ShoppingContent.Schema.OrdersCreateTestOrderRequest"
        },
        "newOrdersCustomBatchRequest": {
            "!type": "fn() -> ShoppingContent.Schema.OrdersCustomBatchRequest"
        },
        "newOrdersCustomBatchRequestEntry": {
            "!type": "fn() -> ShoppingContent.Schema.OrdersCustomBatchRequestEntry"
        },
        "newOrdersCustomBatchRequestEntryCancel": {
            "!type": "fn() -> ShoppingContent.Schema.OrdersCustomBatchRequestEntryCancel"
        },
        "newOrdersCustomBatchRequestEntryCancelLineItem": {
            "!type": "fn() -> ShoppingContent.Schema.OrdersCustomBatchRequestEntryCancelLineItem"
        },
        "newOrdersCustomBatchRequestEntryRefund": {
            "!type": "fn() -> ShoppingContent.Schema.OrdersCustomBatchRequestEntryRefund"
        },
        "newOrdersCustomBatchRequestEntryReturnLineItem": {
            "!type": "fn() -> ShoppingContent.Schema.OrdersCustomBatchRequestEntryReturnLineItem"
        },
        "newOrdersCustomBatchRequestEntryShipLineItems": {
            "!type": "fn() -> ShoppingContent.Schema.OrdersCustomBatchRequestEntryShipLineItems"
        },
        "newOrdersCustomBatchRequestEntryUpdateShipment": {
            "!type": "fn() -> ShoppingContent.Schema.OrdersCustomBatchRequestEntryUpdateShipment"
        },
        "newOrdersRefundRequest": {
            "!type": "fn() -> ShoppingContent.Schema.OrdersRefundRequest"
        },
        "newOrdersReturnLineItemRequest": {
            "!type": "fn() -> ShoppingContent.Schema.OrdersReturnLineItemRequest"
        },
        "newOrdersShipLineItemsRequest": {
            "!type": "fn() -> ShoppingContent.Schema.OrdersShipLineItemsRequest"
        },
        "newOrdersUpdateMerchantOrderIdRequest": {
            "!type": "fn() -> ShoppingContent.Schema.OrdersUpdateMerchantOrderIdRequest"
        },
        "newOrdersUpdateShipmentRequest": {
            "!type": "fn() -> ShoppingContent.Schema.OrdersUpdateShipmentRequest"
        },
        "newPrice": {
            "!type": "fn() -> ShoppingContent.Schema.Price"
        },
        "newProduct": {
            "!type": "fn() -> ShoppingContent.Schema.Product"
        },
        "newProductAspect": {
            "!type": "fn() -> ShoppingContent.Schema.ProductAspect"
        },
        "newProductCustomAttribute": {
            "!type": "fn() -> ShoppingContent.Schema.ProductCustomAttribute"
        },
        "newProductCustomGroup": {
            "!type": "fn() -> ShoppingContent.Schema.ProductCustomGroup"
        },
        "newProductDestination": {
            "!type": "fn() -> ShoppingContent.Schema.ProductDestination"
        },
        "newProductShipping": {
            "!type": "fn() -> ShoppingContent.Schema.ProductShipping"
        },
        "newProductShippingDimension": {
            "!type": "fn() -> ShoppingContent.Schema.ProductShippingDimension"
        },
        "newProductShippingWeight": {
            "!type": "fn() -> ShoppingContent.Schema.ProductShippingWeight"
        },
        "newProductTax": {
            "!type": "fn() -> ShoppingContent.Schema.ProductTax"
        },
        "newProductUnitPricingBaseMeasure": {
            "!type": "fn() -> ShoppingContent.Schema.ProductUnitPricingBaseMeasure"
        },
        "newProductUnitPricingMeasure": {
            "!type": "fn() -> ShoppingContent.Schema.ProductUnitPricingMeasure"
        },
        "newProductsCustomBatchRequest": {
            "!type": "fn() -> ShoppingContent.Schema.ProductsCustomBatchRequest"
        },
        "newProductsCustomBatchRequestEntry": {
            "!type": "fn() -> ShoppingContent.Schema.ProductsCustomBatchRequestEntry"
        },
        "newProductstatusesCustomBatchRequest": {
            "!type": "fn() -> ShoppingContent.Schema.ProductstatusesCustomBatchRequest"
        },
        "newProductstatusesCustomBatchRequestEntry": {
            "!type": "fn() -> ShoppingContent.Schema.ProductstatusesCustomBatchRequestEntry"
        },
        "newTestOrder": {
            "!type": "fn() -> ShoppingContent.Schema.TestOrder"
        },
        "newTestOrderCustomer": {
            "!type": "fn() -> ShoppingContent.Schema.TestOrderCustomer"
        },
        "newTestOrderLineItem": {
            "!type": "fn() -> ShoppingContent.Schema.TestOrderLineItem"
        },
        "newTestOrderLineItemProduct": {
            "!type": "fn() -> ShoppingContent.Schema.TestOrderLineItemProduct"
        },
        "newTestOrderPaymentMethod": {
            "!type": "fn() -> ShoppingContent.Schema.TestOrderPaymentMethod"
        },
        "newWeight": {
            "!type": "fn() -> ShoppingContent.Schema.Weight"
        }
    },
    "SpreadsheetApp": {
        "BorderStyle": {
            "!doc": "An enumeration of the valid styles for setting borders on a Range.",
            "!type": "SpreadsheetApp.BorderStyle"
        },
        "DataValidationCriteria": {
            "!doc": "An enumeration representing the data-validation criteria that can be set on a range.",
            "!type": "SpreadsheetApp.DataValidationCriteria"
        },
        "ProtectionType": {
            "!doc": "An enumeration representing the parts of a spreadsheet that can be protected from edits.",
            "!type": "SpreadsheetApp.ProtectionType"
        },
        "create": {
            "!doc": "Creates a new spreadsheet with the given name.\n\n \n \n \/\/ The code below creates a new spreadsheet &quot;Finances&quot; and logs the URL for it\n var ssNew = SpreadsheetApp.create(&quot;Finances&quot;);\n Logger.log(ssNew.getUrl());\n ",
            "!type": "fn(name: string) -> SpreadsheetApp.Spreadsheet"
        },
        "create ": {
            "!doc": "Creates a new spreadsheet with the given name and the specified number of rows and columns.\n\n \n \n \/\/ The code below creates a new spreadsheet &quot;Finances&quot; with 50 rows and 5 columns and logs the\n \/\/ URL for it\n var ssNew = SpreadsheetApp.create(&quot;Finances&quot;, 50, 5);\n Logger.log(ssNew.getUrl());\n ",
            "!type": "fn(name: string, rows: number, columns: number) -> SpreadsheetApp.Spreadsheet"
        },
        "flush": {
            "!doc": "Applies all pending Spreadsheet changes.\n\n Spreadsheet operations are sometimes bundled together to improve performance, such as when\n doing multiple calls to Range.getValue(). However, sometimes you may want to make sure that all\n pending changes are made right away, for instance to show users data as a script is executing.\n\n \n \n \/\/ The code below changes the background color of cells A1 and B1 twenty times. You should be\n \/\/ able to see the updates live in the spreadsheet. If flush() is not called, the updates may\n \/\/ be applied live or may all be applied at once when the script completes.\n function colors() {\n   var sheet = SpreadsheetApp.getActiveSheet();\n   for (var i = 0; i &lt; 20; i++) {\n     if ((i % 2) == 0) {\n       sheet.getRange(&#39;A1&#39;).setBackground(&#39;green&#39;);\n       sheet.getRange(&#39;B1&#39;).setBackground(&#39;red&#39;);\n     } else {\n       sheet.getRange(&#39;A1&#39;).setBackground(&#39;red&#39;);\n       sheet.getRange(&#39;B1&#39;).setBackground(&#39;green&#39;);\n     }\n     SpreadsheetApp.flush();\n   }\n }\n ",
            "!type": "fn()"
        },
        "getActive": {
            "!doc": "Returns the currently active spreadsheet, or null if there is none.\n\n Functions that are run in the context of a spreadsheet can get a reference to the corresponding\n Spreadsheet object by calling this function.\n\n \n \n \/\/ The code below logs the URL for the active spreadsheet.\n Logger.log(SpreadsheetApp.getActive().getUrl());\n ",
            "!type": "fn() -> SpreadsheetApp.Spreadsheet"
        },
        "getActiveRange": {
            "!doc": "Returns the range of cells that is currently considered active.\n\n This generally means the range that a user has selected in the active sheet, but in a custom\n function it refers to the cell being actively recalculated.\n\n \n \n \/\/ The code below will log the background color for the active range\n var color = SpreadsheetApp.getActiveRange().getBackgroundColor();\n Logger.log(color);\n ",
            "!type": "fn() -> SpreadsheetApp.Range"
        },
        "getActiveSheet": {
            "!doc": "Gets the active sheet in a spreadsheet.\n\n The active sheet in a spreadsheet is the sheet that is being displayed in the spreadsheet UI.\n\n \n \n \/\/ The code below will log the name of the active sheet.\n Logger.log(SpreadsheetApp.getActiveSheet().getName());\n ",
            "!type": "fn() -> SpreadsheetApp.Sheet"
        },
        "getActiveSpreadsheet": {
            "!doc": "Returns the currently active spreadsheet, or null if there is none.\n\n Functions that are run in the context of a spreadsheet can get a reference to the corresponding\n Spreadsheet object by calling this function.\n\n \n \n \/\/ The code below logs the URL for the active spreadsheet.\n Logger.log(SpreadsheetApp.getActiveSpreadsheet().getUrl());\n ",
            "!type": "fn() -> SpreadsheetApp.Spreadsheet"
        },
        "getUi": {
            "!doc": "Returns an instance of the spreadsheet's user-interface environment that allows the script to\n add features like menus, dialogs, and sidebars. A script can only interact with the UI for the\n current instance of an open spreadsheet, and only if the script is\n bound to the spreadsheet. For more information,\n see the guides to menus and\n dialogs and sidebars.\n\n This method only works in the\n new version of Google Sheets.\n The older version of Sheets continues to use an alternate syntax shown in the guides above.\n\n \n \/\/ Add a custom menu to the active spreadsheet, including a separator and a sub-menu.\n function onOpen(e) {\n   SpreadsheetApp.getUi()\n       .createMenu('My Menu')\n       .addItem('My menu item', 'myFunction')\n       .addSeparator()\n       .addSubMenu(SpreadsheetApp.getUi().createMenu('My sub-menu')\n           .addItem('One sub-menu item', 'mySecondFunction')\n           .addItem('Another sub-menu item', 'myThirdFunction'))\n       .addToUi();\n }\n ",
            "!type": "fn() -> Ui"
        },
        "newDataValidation": {
            "!doc": "Creates a builder for a data-validation rule.\n\n \n var cell = SpreadsheetApp.getActive().getRange('A1');\n var rule = SpreadsheetApp.newDataValidation()\n     .requireNumberBetween(1, 100)\n     .setAllowInvalid(false)\n     .setHelpText('Number must be between 1 and 100.')\n     .build();\n cell.setDataValidation(rule);\n ",
            "!type": "fn() -> SpreadsheetApp.DataValidationBuilder"
        },
        "open": {
            "!doc": "Opens the spreadsheet that corresponds to the given File object.\n\n \n \n \/\/ Get any starred spreadsheets from Google Drive, then open the spreadsheets and log the name\n \/\/ of the first sheet within each spreadsheet.\n var files = DriveApp.searchFiles(\n     &#39;starred = true and mimeType = &quot;&#39; + MimeType.GOOGLE_SHEETS + &#39;&quot;&#39;);\n while (files.hasNext()) {\n   var spreadsheet = SpreadsheetApp.open(files.next());\n   var sheet = spreadsheet.getSheets()[0];\n   Logger.log(sheet.getName());\n }\n ",
            "!type": "fn(file: DriveApp.File) -> SpreadsheetApp.Spreadsheet"
        },
        "openById": {
            "!doc": "Opens the spreadsheet with the given ID. A spreadsheet ID can be extracted from its URL. For\n example, the spreadsheet ID in the URL\n https:\/\/docs.google.com\/spreadsheets\/d\/abc1234567\/edit#gid=0 is \"abc1234567\".\n\n \n \n \/\/ The code below opens a spreadsheet using its ID and logs the name for it.\n \/\/ Note that the spreadsheet is NOT physically opened on the client side.\n \/\/ It is opened on the server only (for modification by the script).\n var ss = SpreadsheetApp.openById(&quot;abc1234567&quot;);\n Logger.log(ss.getName());\n ",
            "!type": "fn(id: string) -> SpreadsheetApp.Spreadsheet"
        },
        "openByUrl": {
            "!doc": "Opens the spreadsheet with the given url.\n\n \n \n \/\/ The code below opens a spreadsheet using its id and logs the name for it.\n \/\/ Note that the spreadsheet is NOT physically opened on the client side.\n \/\/ It is opened on the server only (for modification by the script).\n var ss = SpreadsheetApp.openByUrl(\n     &#39;https:\/\/docs.google.com\/spreadsheets\/d\/abc1234567\/edit&#39;);\n Logger.log(ss.getName());\n ",
            "!type": "fn(url: string) -> SpreadsheetApp.Spreadsheet"
        },
        "setActiveRange": {
            "!doc": "Sets the active range for the application.\n\n The spreadsheet UI will display the sheet that contains the chosen range and will select the\n cells defined in the chosen range.\n\n \n \n \/\/ The code below will set range C1:D4 in the first sheet as the active range\n var ss = SpreadsheetApp.getActiveSpreadsheet();\n var range = ss.getSheets()[0].getRange(&quot;C1:D4&quot;);\n SpreadsheetApp.setActiveRange(range);\n ",
            "!type": "fn(range: SpreadsheetApp.Range) -> SpreadsheetApp.Range"
        },
        "setActiveSheet": {
            "!doc": "Sets the active sheet in a spreadsheet.\n\n The spreadsheet UI will display the chosen sheet unless the sheet belongs to a different\n spreadsheet.\n\n \n \n \/\/ The code below will make the 2nd sheet active in the active spreadsheet\n var ss = SpreadsheetApp.getActiveSpreadsheet();\n SpreadsheetApp.setActiveSheet(ss.getSheets()[1]);\n ",
            "!type": "fn(sheet: SpreadsheetApp.Sheet) -> SpreadsheetApp.Sheet"
        },
        "setActiveSpreadsheet": {
            "!doc": "Sets the active spreadsheet.\n\n \n \n \/\/ The code below will make the spreadsheet with key &quot;1234567890&quot; the active spreadsheet\n var ss = SpreadsheetApp.openById(&quot;1234567890&quot;);\n SpreadsheetApp.setActiveSpreadsheet(ss);\n ",
            "!type": "fn(newActiveSpreadsheet: SpreadsheetApp.Spreadsheet)"
        }
    },
    "Tasks": {
        "Tasklists": {
            "!type": "Tasks.Collection.TasklistsCollection"
        },
        "Tasks": {
            "!type": "Tasks.Collection.TasksCollection"
        },
        "newTask": {
            "!type": "fn() -> Tasks.Schema.Task"
        },
        "newTaskLinks": {
            "!type": "fn() -> Tasks.Schema.TaskLinks"
        },
        "newTaskList": {
            "!type": "fn() -> Tasks.Schema.TaskList"
        }
    },
    "UrlFetchApp": {
        "fetch": {
            "!doc": "Makes a request to fetch a URL.\n\n This works over HTTP as well as HTTPS.\n\n \n \n \/\/ The code below logs the HTML code of the Google home page.\n var response = UrlFetchApp.fetch(&quot;http:\/\/www.google.com\/&quot;);\n Logger.log(response.getContentText());\n ",
            "!type": "fn(url: string) -> UrlFetchApp.HTTPResponse"
        },
        "fetch ": {
            "!doc": "Makes a request to fetch a URL using optional advanced parameters.\n\n This works over HTTP as well as HTTPS.\n\n \n \n \/\/ The code below logs the HTML code of the Google home page.\n var response = UrlFetchApp.fetch(&quot;http:\/\/www.google.com\/&quot;);\n Logger.log(response.getContentText());\n \n\n \n \n \/\/ This sample pulls in your tweets from Twitter and puts them in a spreadsheet.\n \/\/\n \/\/  First: set up Script Properties &quot;twitterConsumerKey&quot; and\n \/\/ &quot;twitterConsumerSecret&quot; with values provided to you by Twitter.\n\n var fields = {&#39;in_reply_to_screen_name&#39;:true,&#39;created_at&#39;:true,&#39;text&#39;:true};\n\n function tweet() {\n   \/\/ Setup OAuthServiceConfig\n   var oAuthConfig = UrlFetchApp.addOAuthService(&quot;twitter&quot;);\n   oAuthConfig.setAccessTokenUrl(&quot;https:\/\/api.twitter.com\/oauth\/access_token&quot;);\n   oAuthConfig.setRequestTokenUrl(&quot;https:\/\/api.twitter.com\/oauth\/request_token&quot;);\n   oAuthConfig.setAuthorizationUrl(&quot;https:\/\/api.twitter.com\/oauth\/authorize&quot;);\n   oAuthConfig.setConsumerKey(ScriptProperties.getProperty(&quot;twitterConsumerKey&quot;));\n   oAuthConfig.setConsumerSecret(ScriptProperties.getProperty(&quot;twitterConsumerSecret&quot;));\n\n   \/\/ Setup optional parameters to point request at OAuthConfigService.  The &quot;twitter&quot;\n   \/\/ value matches the argument to &quot;addOAuthService&quot; above.\n   var options =\n     {\n       &quot;oAuthServiceName&quot; : &quot;twitter&quot;,\n       &quot;oAuthUseToken&quot; : &quot;always&quot;\n     };\n\n   var result = UrlFetchApp.fetch(&quot;https:\/\/api.twitter.com\/1.1\/statuses\/user_timeline.json&quot;,\n       options);\n   var o  = Utilities.jsonParse(result.getContentText());\n   var doc = SpreadsheetApp.getActiveSpreadsheet();\n   var cell = doc.getRange(&#39;a1&#39;);\n   var index = 0;\n   for (var i in o) {\n     var row = o[i];\n     var col = 0;\n     for (var j in row) {\n       if (fields[j]) {\n         cell.offset(index, col).setValue(row[j]);\n         col++;\n       }\n     }\n     index++;\n   }\n }\n \n\n \n \n \/\/ This sample sends POST payload data in the style of an HTML form, including\n \/\/ a file.\n\n function sendHttpPost() {\n\n   \/\/ Download a file now (GET), so we can upload it in the HTTP POST below.\n   var response = UrlFetchApp.fetch(&quot;http:\/\/example.com\/image_to_download.jpg&quot;);\n   var fileBlob = response.getBlob();\n\n   var payload =\n   {\n     &quot;fieldOne&quot; : &quot;value for field one&quot;,\n     &quot;fieldTwo&quot; : &quot;value for field two&quot;,\n     &quot;fileAttachment&quot;: fileBlob\n   };\n\n   \/\/ Because payload is a JavaScript object, it will be interpreted as\n   \/\/ an HTML form. (We do not need to specify contentType; it will\n   \/\/ automatically default to either &#39;application\/x-www-form-urlencoded&#39;\n   \/\/ or &#39;multipart\/form-data&#39;)\n\n   var options =\n   {\n     &quot;method&quot; : &quot;post&quot;,\n     &quot;payload&quot; : payload\n   };\n\n   UrlFetchApp.fetch(&quot;http:\/\/example.com\/upload_form.cgi&quot;, options);\n }\n ",
            "!type": "fn(url: string, params: object) -> UrlFetchApp.HTTPResponse"
        },
        "getRequest": {
            "!doc": "Returns the request that would be made if the operation was invoked.\n\n This method does not actually issue the request.\n\n \n \n \/\/ The code below logs the value for every key of the returned map.\n var response = UrlFetchApp.getRequest(&quot;http:\/\/www.google.com\/&quot;);\n for(i in response) {\n   Logger.log(i + &quot;: &quot; + response[i]);\n }\n ",
            "!type": "fn(url: string) -> object"
        },
        "getRequest ": {
            "!doc": "Returns the request that would be made if the operation were invoked.\n\n This method does not actually issue the request.\n\n \n \n \/\/ The code below logs the value for every key of the returned map.\n var fields = {&#39;in_reply_to_screen_name&#39;: true, &#39;created_at&#39;: true, &#39;text&#39;: true};\n\n function tweet() {\n   \/\/ Setup OAuthServiceConfig\n   var oAuthConfig = UrlFetchApp.addOAuthService(&quot;twitter&quot;);\n   oAuthConfig.setAccessTokenUrl(&quot;https:\/\/api.twitter.com\/oauth\/access_token&quot;);\n   oAuthConfig.setRequestTokenUrl(&quot;https:\/\/api.twitter.com\/oauth\/request_token&quot;);\n   oAuthConfig.setAuthorizationUrl(&quot;https:\/\/api.twitter.com\/oauth\/authorize&quot;);\n   oAuthConfig.setConsumerKey(ScriptProperties.getProperty(&quot;twitterConsumerKey&quot;));\n   oAuthConfig.setConsumerSecret(ScriptProperties.getProperty(&quot;twitterConsumerSecret&quot;));\n\n   \/\/ Setup optional parameters to point request at OAuthConfigService.  The &quot;twitter&quot;\n   \/\/ value matches the argument to &quot;addOAuthService&quot; above.\n   var options =\n     {\n       &quot;oAuthServiceName&quot; : &quot;twitter&quot;,\n       &quot;oAuthUseToken&quot; : &quot;always&quot;\n     };\n\n   var result = UrlFetchApp.getRequest(&quot;https:\/\/api.twitter.com\/1.1\/statuses\/user_timeline.json&quot;,\n       options);\n   for(i in result) {\n     Logger.log(i + &quot;: &quot; + result[i]);\n   }\n }\n ",
            "!type": "fn(url: string, params: object) -> object"
        }
    },
    "Utilities": {
        "Charset": {
            "!doc": "",
            "!type": "Utilities.Charset"
        },
        "DigestAlgorithm": {
            "!doc": "",
            "!type": "DigestAlgorithm"
        },
        "MacAlgorithm": {
            "!doc": "",
            "!type": "Utilities.MacAlgorithm"
        },
        "base64Decode": {
            "!doc": "Decodes a base-64 encoded string into a UTF-8 byte array.\n\n \n \n \/\/ This is the base64 encoded form of &quot;Google ????&quot;\n var base64data = &quot;R29vZ2xlIOOCsOODq+ODvOODlw==&quot;;\n\n \/\/ This will log:\n \/\/     [71, 111, 111, 103, 108, 101, 32, -29, -126, -80,\n \/\/      -29, -125, -85, -29, -125, -68, -29, -125, -105]\n var decoded = Utilities.base64Decode(base64data);\n Logger.log(decoded);\n\n \/\/ If we want a String instead of a byte array:\n \/\/ This will log the original &quot;Google ????&quot;\n Logger.log(Utilities.newBlob(decoded).getDataAsString());\n ",
            "!type": "fn(encoded: string) -> [number]"
        },
        "base64Decode ": {
            "!doc": "Decodes a base-64 encoded string into a byte array in a specific character set.\n\n \n \n \/\/ This is the base64 encoded form of &quot;Google ????&quot;\n var base64data = &quot;R29vZ2xlIOOCsOODq+ODvOODlw==&quot;;\n\n var decoded = Utilities.base64Decode(base64data, Utilities.Charset.UTF_8);\n\n \/\/ This will log:\n \/\/     [71, 111, 111, 103, 108, 101, 32, -29, -126, -80,\n \/\/      -29, -125, -85, -29, -125, -68, -29, -125, -105]\n Logger.log(decoded);\n\n \/\/ If we want a String instead of a byte array:\n \/\/ This will log the original &quot;Google ????&quot;\n Logger.log(Utilities.newBlob(decoded).getDataAsString());\n ",
            "!type": "fn(encoded: string, charset: Utilities.Charset) -> [number]"
        },
        "base64DecodeWebSafe": {
            "!doc": "Decodes a base-64 web-safe encoded string into a UTF-8 byte array.\n\n \n \n \/\/ This is the base64 web-safe encoded form of &quot;Google ????&quot;\n var base64data = &quot;R29vZ2xlIOOCsOODq-ODvOODlw==&quot;;\n\n var decoded = Utilities.base64DecodeWebSafe(base64data);\n\n \/\/ This will log:\n \/\/     [71, 111, 111, 103, 108, 101, 32, -29, -126, -80,\n \/\/      -29, -125, -85, -29, -125, -68, -29, -125, -105]\n Logger.log(decoded);\n\n \/\/ If we want a String instead of a byte array:\n \/\/ This will log the original &quot;Google ????&quot;\n Logger.log(Utilities.newBlob(decoded).getDataAsString());\n ",
            "!type": "fn(encoded: string) -> [number]"
        },
        "base64DecodeWebSafe ": {
            "!doc": "Decodes a base-64 web-safe encoded string into a byte array in a specific character set.\n\n \n \n \/\/ This is the base64 web-safe encoded form of &quot;Google ????&quot;\n var base64data = &quot;R29vZ2xlIOOCsOODq-ODvOODlw==&quot;;\n\n var decoded = Utilities.base64DecodeWebSafe(base64data, Utilities.Charset.UTF_8);\n\n \/\/ This will log:\n \/\/     [71, 111, 111, 103, 108, 101, 32, -29, -126, -80,\n \/\/      -29, -125, -85, -29, -125, -68, -29, -125, -105]\n Logger.log(decoded);\n\n \/\/ If we want a String instead of a byte array:\n \/\/ This will log the original &quot;Google ????&quot;\n Logger.log(Utilities.newBlob(decoded).getDataAsString());\n ",
            "!type": "fn(encoded: string, charset: Utilities.Charset) -> [number]"
        },
        "base64Encode": {
            "!doc": "Generates a base-64 encoded string from the given byte array.\n Base 64 is a common encoding accepted by a variety of tools that cannot\n accept binary data. Base 64 is commonly used in internet protocols\n such as email, HTTP, or in XML documents.\n\n \n \n \/\/ Instantiates a blob here for clarity\n var blob = Utilities.newBlob(&quot;A string here&quot;);\n\n \/\/ Writes &#39;QSBzdHJpbmcgaGVyZQ==&#39; to the log.\n var encoded = Utilities.base64Encode(blob.getBytes());\n Logger.log(encoded);\n ",
            "!type": "fn(data: [number]) -> string"
        },
        "base64Encode ": {
            "!doc": "Generates a base-64 encoded string from the given string.\n Base 64 is a common encoding accepted by a variety of tools that cannot\n accept binary data. Base 64 is commonly used in internet protocols\n such as email, HTTP, or in XML documents.\n\n \n \n \/\/ Writes &#39;QSBzdHJpbmcgaGVyZQ==&#39; to the log.\n var encoded = Utilities.base64Encode(&quot;A string here&quot;);\n Logger.log(encoded);\n ",
            "!type": "fn(data: string) -> string"
        },
        "base64Encode  ": {
            "!doc": "Generates a base-64 encoded string from the given string in a specific character set.\n A Charset is a way of encoding characters such that they can be encoded.\n These are typically done in a binary format, which can generally be incompatible\n with certain data transmission protocols. To make the data compatible,\n they are generally encoded into base 64, which is a common encoding accepted by a\n variety of tools that cannot accept binary data. Base 64 is commonly used in internet\n protocols such as email, HTTP, or in XML documents.\n\n \n \n \/\/ &quot;Google Groups&quot; in Katakana (Japanese)\n var input = &quot;Google ????&quot;;\n\n \/\/ Writes &quot;R29vZ2xlIOOCsOODq+ODvOODlw==&quot; to the log\n var encoded = Utilities.base64Encode(input, Utilities.Charset.UTF_8);\n Logger.log(encoded);\n\n ",
            "!type": "fn(data: string, charset: Utilities.Charset) -> string"
        },
        "base64EncodeWebSafe": {
            "!doc": "Generates a base-64 web-safe encoded string from the given byte array.\n Base 64 is a common encoding accepted by a variety of tools that cannot\n accept binary data. Base 64 web-safe is commonly used in internet protocols\n such as email, HTTP, or in XML documents.\n\n \n \n \/\/ Instantiates a blob here for clarity\n var blob = Utilities.newBlob(&quot;A string here&quot;);\n\n \/\/ Writes &#39;QSBzdHJpbmcgaGVyZQ==&#39; to the log.\n var encoded = Utilities.base64EncodeWebSafe(blob.getBytes());\n Logger.log(encoded);\n ",
            "!type": "fn(data: [number]) -> string"
        },
        "base64EncodeWebSafe ": {
            "!doc": "Generates a base-64 web-safe encoded string from the given string.\n Base 64 is a common encoding accepted by a variety of tools that cannot\n accept binary data. Base 64 web-safe is commonly used in internet protocols\n such as email, HTTP, or in XML documents.\n\n \n \n \/\/ Writes &#39;QSBzdHJpbmcgaGVyZQ==&#39; to the log.\n var encoded = Utilities.base64EncodeWebSafe(&quot;A string here&quot;);\n Logger.log(encoded);\n ",
            "!type": "fn(data: string) -> string"
        },
        "base64EncodeWebSafe  ": {
            "!doc": "Generates a base-64 web-safe encoded string from the given string in a specific character set.\n A Charset is a way of encoding characters such that they can be encoded.\n These are typically done in a binary format, which can generally be incompatible\n with certain data transmission protocols. To make the data compatible,\n they are generally encoded into base 64, which is a common encoding accepted by a\n variety of tools that cannot accept binary data. Base 64 web-safe is commonly used in internet\n protocols such as email, HTTP, or in XML documents.\n\n \n \n \/\/ &quot;Google Groups&quot; in Katakana (Japanese)\n var input = &quot;Google ????&quot;;\n\n \/\/ Writes &quot;R29vZ2xlIOOCsOODq-ODvOODlw==&quot; to the log\n var encoded = Utilities.base64EncodeWebSafe(input, Utilities.Charset.UTF_8);\n Logger.log(encoded);\n\n ",
            "!type": "fn(data: string, charset: Utilities.Charset) -> string"
        },
        "computeDigest": {
            "!doc": "Compute a digest using the specified algorithm on the specified value\n\n \n \n var digest = Utilities.computeDigest(Utilities.DigestAlgorithm.MD5, &quot;input to hash&quot;);\n Logger.log(digest);\n ",
            "!type": "fn(algorithm: DigestAlgorithm, value: string) -> [number]"
        },
        "computeDigest ": {
            "!doc": "Compute a digest using the specified algorithm on the specified value\n\n \n \n var digest = Utilities.computeDigest(Utilities.DigestAlgorithm.MD5,\n                                      &quot;input to hash&quot;,\n                                      Utilities.Charset.US_ASCII);\n Logger.log(digest);\n ",
            "!type": "fn(algorithm: DigestAlgorithm, value: string, charset: Utilities.Charset) -> [number]"
        },
        "computeHmacSha256Signature": {
            "!doc": "Signs the provided value using HMAC-SHA256 with the given key.\n\n \n \n \/\/ This will write an array of bytes to the log.\n var signature = Utilities.computeHmacSha256Signature(&quot;this is my input&quot;,\n                                                       &quot;my key - use a stronger one&quot;);\n Logger.log(signature);\n ",
            "!type": "fn(value: string, key: string) -> [number]"
        },
        "computeHmacSha256Signature ": {
            "!doc": "Signs the provided value using HMAC-SHA256 with the given key and character set.\n\n \n \n \/\/ This will write an array of bytes to the log.\n var signature = Utilities.computeHmacSha256Signature(&quot;this is my input&quot;,\n                                                      &quot;my key - use a stronger one&quot;,\n                                                      Utilities.Charset.US_ASCII);\n Logger.log(signature);\n ",
            "!type": "fn(value: string, key: string, charset: Utilities.Charset) -> [number]"
        },
        "computeHmacSignature": {
            "!doc": "Compute a message authentication code using the specified algorithm on the specified key\n and value.\n\n \n \n \/\/ This will write an array of bytes to the log.\n var signature = Utilities.computeHmacSignature(Utilities.MacAlgorithm.HMAC_MD5,\n                                                &quot;input to hash&quot;,\n                                                &quot;key&quot;);\n Logger.log(signature);\n ",
            "!type": "fn(algorithm: Utilities.MacAlgorithm, value: string, key: string) -> [number]"
        },
        "computeHmacSignature ": {
            "!doc": "Compute a message authentication code using the specified algorithm on the specified key\n and value.\n\n \n \n \/\/ This will write an array of bytes to the log.\n var signature = Utilities.computeHmacSignature(Utilities.MacAlgorithm.HMAC_MD5,\n                                                &quot;input to hash&quot;,\n                                                &quot;key&quot;,\n                                                Utilities.Charset.US_ASCII);\n Logger.log(signature);\n ",
            "!type": "fn(algorithm: Utilities.MacAlgorithm, value: string, key: string, charset: Utilities.Charset) -> [number]"
        },
        "computeRsaSha256Signature": {
            "!doc": "Signs the provided value using RSA-SHA256 with the given key.\n\n \n \n \/\/ This will write an array of bytes to the log.\n var signature = Utilities.computeRsaSha256Signature(&quot;this is my input&quot;,\n     &quot;-----BEGIN PRIVATE KEY-----\\nprivatekeyhere\\n-----END PRIVATE KEY-----\\n&quot;);\n Logger.log(signature);\n ",
            "!type": "fn(value: string, key: string) -> [number]"
        },
        "computeRsaSha256Signature ": {
            "!doc": "Signs the provided value using RSA-SHA256 with the given key.\n\n \n \n \/\/ This will write an array of bytes to the log.\n var signature = Utilities.computeRsaSha256Signature(&quot;this is my input&quot;,\n     &quot;-----BEGIN PRIVATE KEY-----\\nprivatekeyhere\\n-----END PRIVATE KEY-----\\n&quot;);\n Logger.log(signature);\n ",
            "!type": "fn(value: string, key: string, charset: Utilities.Charset) -> [number]"
        },
        "formatDate": {
            "!doc": "Formats date according to specification described in Java SE\n SimpleDateFormat class. Please visit the specification at\n \n http:\/\/docs.oracle.com\/javase\/7\/docs\/api\/java\/text\/SimpleDateFormat.html\n\n \n \n \/\/ This formats the date as Greenwich Mean Time in the format\n \/\/ year-month-dateThour-minute-second.\n var formattedDate = Utilities.formatDate(new Date(), &quot;GMT&quot;, &quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;&quot;);\n Logger.log(formattedDate);\n ",
            "!type": "fn(date: Date, timeZone: string, format: string) -> string"
        },
        "formatString": {
            "!doc": "Performs sprintf-like string formatting using '%'-style format strings.\n\n \n \n \/\/ will be: &quot;123.456000&quot;\n Utilities.formatString(&#39;%11.6f&#39;, 123.456);\n\n \/\/ will be: &quot;   abc&quot;\n Utilities.formatString(&#39;%6s&#39;, &#39;abc&#39;);\n ",
            "!type": "fn(template: string, args: Object...) -> string"
        },
        "jsonParse": {
            "!doc": "Return an object corresponding to the JSON string passed in.\n\n \n \n \/\/ Returns the object { name: &quot;John Smith&quot;, company: &quot;Virginia Company&quot;}\n var obj = Utilities.jsonParse(&#39;{&quot;name&quot;:&quot;John Smith&quot;,&quot;company&quot;:&quot;Virginia Company&quot;}&#39;);\n ",
            "!type": "fn(jsonString: string) -> object"
        },
        "jsonStringify": {
            "!doc": "Return a JSON string of the object passed in.\n\n \n \n \/\/ Logs: {&quot;name&quot;:&quot;John Smith&quot;,&quot;company&quot;:&quot;Virginia Company&quot;}\n var person = { name: &quot;John Smith&quot;, company: &quot;Virginia Company&quot; };\n var json = Utilities.jsonStringify(person);\n Logger.log(json);\n ",
            "!type": "fn(obj: object) -> string"
        },
        "newBlob": {
            "!doc": "Create a new Blob object that is used in many Apps Script APIs that take binary data as input.",
            "!type": "fn(data: [number]) -> Blob"
        },
        "newBlob ": {
            "!doc": "Create a new Blob object that is used in many Apps Script APIs that take binary data as input.",
            "!type": "fn(data: [number], contentType: string) -> Blob"
        },
        "newBlob  ": {
            "!doc": "Create a new Blob object that is used in many Apps Script APIs that take binary data as input.",
            "!type": "fn(data: [number], contentType: string, name: string) -> Blob"
        },
        "newBlob   ": {
            "!doc": "Create a new Blob object that is used in many Apps Script APIs that take binary data as input.",
            "!type": "fn(data: string) -> Blob"
        },
        "newBlob    ": {
            "!doc": "Create a new Blob object that is used in many Apps Script APIs that take binary data as input.",
            "!type": "fn(data: string, contentType: string) -> Blob"
        },
        "newBlob     ": {
            "!doc": "Create a new Blob object that is used in many Apps Script APIs that take binary data as input.",
            "!type": "fn(data: string, contentType: string, name: string) -> Blob"
        },
        "parseCsv": {
            "!doc": "Returns a tabular 2D array representation of a CSV string.\n\n \n \n \/\/ This will create a 2 dimensional array of the format [[a, b, c], [d, e, f]]\n var csvString = &quot;a,b,c\\nd,e,f&quot;;\n var data = Utilities.parseCsv(csvString);\n ",
            "!type": "fn(csv: string) -> [[string]]"
        },
        "parseCsv ": {
            "!doc": "Returns a tabular 2D array representation of a CSV string using a custom delimiter.\n\n \n \n \/\/ This will create a 2 dimensional array of the format [[a, b, c], [d, e, f]]\n var csvString = &quot;a,b,c\\td,e,f&quot;;\n var data = Utilities.parseCsv(csvString, &#39;\\t&#39;);\n ",
            "!type": "fn(csv: string, delimiter: Char) -> [[string]]"
        },
        "sleep": {
            "!doc": "Sleeps for specified number of milliseconds.\n Immediately puts the script to sleep for the specified number of milliseconds.\n The maximum allowed value is 300000 (or 5 minutes).",
            "!type": "fn(milliseconds: number)"
        },
        "unzip": {
            "!doc": "Takes a Blob representing a zip file and returns its component files.\n\n \n \n var googleFavIconUrl = &quot;https:\/\/www.google.com\/favicon.ico&quot;;\n var googleLogoUrl = &quot;https:\/\/www.google.com\/images\/srpr\/logo3w.png&quot;;\n\n \/\/ Fetch the Google favicon.ico file and get the Blob data\n var faviconBlob = UrlFetchApp.fetch(googleFavIconUrl).getBlob();\n var logoBlob = UrlFetchApp.fetch(googleLogoUrl).getBlob();\n\n \/\/ zip now references a blob containing an archive of both faviconBlob and logoBlob\n var zip = Utilities.zip([faviconBlob, logoBlob], &quot;google_images.zip&quot;);\n\n \/\/ This will now unzip the blobs\n var files = Utilities.unzip(zip);\n ",
            "!type": "fn(blob: BlobSource) -> [Blob]"
        },
        "zip": {
            "!doc": "Creates a new Blob object that is a zip file containing the data from the\n Blobs passed in.\n\n \n \n var googleFavIconUrl = &quot;https:\/\/www.google.com\/favicon.ico&quot;;\n var googleLogoUrl = &quot;https:\/\/www.google.com\/images\/srpr\/logo3w.png&quot;;\n\n \/\/ Fetch the Google favicon.ico file and get the Blob data\n var faviconBlob = UrlFetchApp.fetch(googleFavIconUrl).getBlob();\n var logoBlob = UrlFetchApp.fetch(googleLogoUrl).getBlob();\n\n \/\/ zip now references a blob containing an archive of both faviconBlob and logoBlob\n var zip = Utilities.zip([faviconBlob, logoBlob]);\n ",
            "!type": "fn(blobs: [BlobSource]) -> Blob"
        },
        "zip ": {
            "!doc": "Creates a new Blob object that is a zip file containing the data from the\n Blobs passed in. This version of the method allows a filename to be\n specified.\n\n \n \n var googleFavIconUrl = &quot;https:\/\/www.google.com\/favicon.ico&quot;;\n var googleLogoUrl = &quot;https:\/\/www.google.com\/images\/srpr\/logo3w.png&quot;;\n\n \/\/ Fetch the Google favicon.ico file and get the Blob data\n var faviconBlob = UrlFetchApp.fetch(googleFavIconUrl).getBlob();\n var logoBlob = UrlFetchApp.fetch(googleLogoUrl).getBlob();\n\n \/\/ zip now references a blob containing an archive of both faviconBlob and logoBlob\n var zip = Utilities.zip([faviconBlob, logoBlob], &quot;google_images.zip&quot;);\n ",
            "!type": "fn(blobs: [BlobSource], name: string) -> Blob"
        }
    },
    "XmlService": {
        "ContentTypes": {
            "!doc": "An enumeration representing the types of XML content nodes.",
            "!type": "XmlService.ContentType"
        },
        "createCdata": {
            "!doc": "Creates an unattached CDATASection node with the given value.",
            "!type": "fn(text: string) -> XmlService.Cdata"
        },
        "createComment": {
            "!doc": "Creates an unattached Comment node with the given value.",
            "!type": "fn(text: string) -> XmlService.Comment"
        },
        "createDocType": {
            "!doc": "Creates an unattached DocumentType node for the root Element node\n with the given name.",
            "!type": "fn(elementName: string) -> XmlService.DocType"
        },
        "createDocType ": {
            "!doc": "Creates an unattached DocumentType node for the root Element node\n with the given name, and the given system ID for the external subset data.",
            "!type": "fn(elementName: string, systemId: string) -> XmlService.DocType"
        },
        "createDocType  ": {
            "!doc": "Creates an unattached DocumentType node for the root Element node\n with the given name, and the given public ID and system ID for the external subset data.",
            "!type": "fn(elementName: string, publicId: string, systemId: string) -> XmlService.DocType"
        },
        "createDocument": {
            "!doc": "Creates an empty XML document.",
            "!type": "fn() -> XmlService.Document"
        },
        "createDocument ": {
            "!doc": "Creates an XML document with the given root Element node.",
            "!type": "fn(rootElement: XmlService.Element) -> XmlService.Document"
        },
        "createElement": {
            "!doc": "Creates an unattached Element node with the given local name and no namespace.",
            "!type": "fn(name: string) -> XmlService.Element"
        },
        "createElement ": {
            "!doc": "Creates an unattached Element node with the given local name and namespace.",
            "!type": "fn(name: string, namespace: XmlService.Namespace) -> XmlService.Element"
        },
        "createText": {
            "!doc": "Creates an unattached Text node with the given value.",
            "!type": "fn(text: string) -> XmlService.Text"
        },
        "getCompactFormat": {
            "!doc": "Creates a Format object for outputting a compact XML document. The formatter\n defaults to UTF-8 encoding, no indentation, and no additional line breaks, but includes\n the XML declaration and its encoding.\n\n \n \n \/\/ Log an XML document in compact form.\n var xml = &#39;&lt;root&gt;&lt;a&gt;&lt;b&gt;Text!&lt;\/b&gt;&lt;b&gt;More text!&lt;\/b&gt;&lt;\/a&gt;&lt;\/root&gt;&#39;;\n var document = XmlService.parse(xml);\n var output = XmlService.getCompactFormat()\n     .format(document);\n Logger.log(output);\n ",
            "!type": "fn() -> XmlService.Format"
        },
        "getNamespace": {
            "!doc": "Creates a Namespace with the given URI.",
            "!type": "fn(uri: string) -> XmlService.Namespace"
        },
        "getNamespace ": {
            "!doc": "Creates a Namespace with the given prefix and URI.",
            "!type": "fn(prefix: string, uri: string) -> XmlService.Namespace"
        },
        "getNoNamespace": {
            "!doc": "Creates a Namespace that represents the absence of a real namespace.",
            "!type": "fn() -> XmlService.Namespace"
        },
        "getPrettyFormat": {
            "!doc": "Creates a Format object for outputting a human-readable XML document. The formatter\n defaults to UTF-8 encoding, two-space indentation, \\r\\n line separators after\n every node, and includes the XML declaration and its encoding.\n\n \n \n \/\/ Log an XML document in human-readable form.\n var xml = &#39;&lt;root&gt;&lt;a&gt;&lt;b&gt;Text!&lt;\/b&gt;&lt;b&gt;More text!&lt;\/b&gt;&lt;\/a&gt;&lt;\/root&gt;&#39;;\n var document = XmlService.parse(xml);\n var output = XmlService.getPrettyFormat()\n     .format(document);\n Logger.log(output);\n ",
            "!type": "fn() -> XmlService.Format"
        },
        "getRawFormat": {
            "!doc": "Creates a Format object for outputting a raw XML document. The formatter defaults to\n UTF-8 encoding, no indentation and no line breaks other than those provided in the XML\n document itself, and includes the XML declaration and its encoding.\n\n \n \n \/\/ Log an XML document in raw form.\n var xml = &#39;&lt;root&gt;&lt;a&gt;&lt;b&gt;Text!&lt;\/b&gt;&lt;b&gt;More text!&lt;\/b&gt;&lt;\/a&gt;&lt;\/root&gt;&#39;;\n var document = XmlService.parse(xml);\n var output = XmlService.getRawFormat()\n     .format(document);\n Logger.log(output);\n ",
            "!type": "fn() -> XmlService.Format"
        },
        "getXmlNamespace": {
            "!doc": "Creates a Namespace with the standard xml prefix.",
            "!type": "fn() -> XmlService.Namespace"
        },
        "parse": {
            "!doc": "Creates an Document from the given XML, without validating the XML.\n \n \n \n var xml = &#39;&lt;root&gt;&lt;a&gt;&lt;b&gt;Text!&lt;\/b&gt;&lt;b&gt;More text!&lt;\/b&gt;&lt;\/a&gt;&lt;\/root&gt;&#39;;\n var doc = XmlService.parse(xml);\n ",
            "!type": "fn(xml: string) -> XmlService.Document"
        }
    },
    "Youtube": {
        "Activities": {
            "!type": "Youtube.Collection.ActivitiesCollection"
        },
        "Captions": {
            "!type": "Youtube.Collection.CaptionsCollection"
        },
        "ChannelBanners": {
            "!type": "Youtube.Collection.ChannelBannersCollection"
        },
        "ChannelSections": {
            "!type": "Youtube.Collection.ChannelSectionsCollection"
        },
        "Channels": {
            "!type": "Youtube.Collection.ChannelsCollection"
        },
        "CommentThreads": {
            "!type": "Youtube.Collection.CommentThreadsCollection"
        },
        "Comments": {
            "!type": "Youtube.Collection.CommentsCollection"
        },
        "FanFundingEvents": {
            "!type": "Youtube.Collection.FanFundingEventsCollection"
        },
        "GuideCategories": {
            "!type": "Youtube.Collection.GuideCategoriesCollection"
        },
        "I18nLanguages": {
            "!type": "Youtube.Collection.I18nLanguagesCollection"
        },
        "I18nRegions": {
            "!type": "Youtube.Collection.I18nRegionsCollection"
        },
        "LiveBroadcasts": {
            "!type": "Youtube.Collection.LiveBroadcastsCollection"
        },
        "LiveChatBans": {
            "!type": "Youtube.Collection.LiveChatBansCollection"
        },
        "LiveChatMessages": {
            "!type": "Youtube.Collection.LiveChatMessagesCollection"
        },
        "LiveChatModerators": {
            "!type": "Youtube.Collection.LiveChatModeratorsCollection"
        },
        "LiveStreams": {
            "!type": "Youtube.Collection.LiveStreamsCollection"
        },
        "PlaylistItems": {
            "!type": "Youtube.Collection.PlaylistItemsCollection"
        },
        "Playlists": {
            "!type": "Youtube.Collection.PlaylistsCollection"
        },
        "Search": {
            "!type": "Youtube.Collection.SearchCollection"
        },
        "Sponsors": {
            "!type": "Youtube.Collection.SponsorsCollection"
        },
        "Subscriptions": {
            "!type": "Youtube.Collection.SubscriptionsCollection"
        },
        "Thumbnails": {
            "!type": "Youtube.Collection.ThumbnailsCollection"
        },
        "VideoAbuseReportReasons": {
            "!type": "Youtube.Collection.VideoAbuseReportReasonsCollection"
        },
        "VideoCategories": {
            "!type": "Youtube.Collection.VideoCategoriesCollection"
        },
        "Videos": {
            "!type": "Youtube.Collection.VideosCollection"
        },
        "Watermarks": {
            "!type": "Youtube.Collection.WatermarksCollection"
        },
        "newAccessPolicy": {
            "!type": "fn() -> Youtube.Schema.AccessPolicy"
        },
        "newActivity": {
            "!type": "fn() -> Youtube.Schema.Activity"
        },
        "newActivityContentDetails": {
            "!type": "fn() -> Youtube.Schema.ActivityContentDetails"
        },
        "newActivityContentDetailsBulletin": {
            "!type": "fn() -> Youtube.Schema.ActivityContentDetailsBulletin"
        },
        "newActivityContentDetailsChannelItem": {
            "!type": "fn() -> Youtube.Schema.ActivityContentDetailsChannelItem"
        },
        "newActivityContentDetailsComment": {
            "!type": "fn() -> Youtube.Schema.ActivityContentDetailsComment"
        },
        "newActivityContentDetailsFavorite": {
            "!type": "fn() -> Youtube.Schema.ActivityContentDetailsFavorite"
        },
        "newActivityContentDetailsLike": {
            "!type": "fn() -> Youtube.Schema.ActivityContentDetailsLike"
        },
        "newActivityContentDetailsPlaylistItem": {
            "!type": "fn() -> Youtube.Schema.ActivityContentDetailsPlaylistItem"
        },
        "newActivityContentDetailsPromotedItem": {
            "!type": "fn() -> Youtube.Schema.ActivityContentDetailsPromotedItem"
        },
        "newActivityContentDetailsRecommendation": {
            "!type": "fn() -> Youtube.Schema.ActivityContentDetailsRecommendation"
        },
        "newActivityContentDetailsSocial": {
            "!type": "fn() -> Youtube.Schema.ActivityContentDetailsSocial"
        },
        "newActivityContentDetailsSubscription": {
            "!type": "fn() -> Youtube.Schema.ActivityContentDetailsSubscription"
        },
        "newActivityContentDetailsUpload": {
            "!type": "fn() -> Youtube.Schema.ActivityContentDetailsUpload"
        },
        "newActivitySnippet": {
            "!type": "fn() -> Youtube.Schema.ActivitySnippet"
        },
        "newCaption": {
            "!type": "fn() -> Youtube.Schema.Caption"
        },
        "newCaptionSnippet": {
            "!type": "fn() -> Youtube.Schema.CaptionSnippet"
        },
        "newCdnSettings": {
            "!type": "fn() -> Youtube.Schema.CdnSettings"
        },
        "newChannel": {
            "!type": "fn() -> Youtube.Schema.Channel"
        },
        "newChannelAuditDetails": {
            "!type": "fn() -> Youtube.Schema.ChannelAuditDetails"
        },
        "newChannelBannerResource": {
            "!type": "fn() -> Youtube.Schema.ChannelBannerResource"
        },
        "newChannelBrandingSettings": {
            "!type": "fn() -> Youtube.Schema.ChannelBrandingSettings"
        },
        "newChannelContentDetails": {
            "!type": "fn() -> Youtube.Schema.ChannelContentDetails"
        },
        "newChannelContentDetailsRelatedPlaylists": {
            "!type": "fn() -> Youtube.Schema.ChannelContentDetailsRelatedPlaylists"
        },
        "newChannelContentOwnerDetails": {
            "!type": "fn() -> Youtube.Schema.ChannelContentOwnerDetails"
        },
        "newChannelConversionPing": {
            "!type": "fn() -> Youtube.Schema.ChannelConversionPing"
        },
        "newChannelConversionPings": {
            "!type": "fn() -> Youtube.Schema.ChannelConversionPings"
        },
        "newChannelId": {
            "!type": "fn() -> Youtube.Schema.ChannelId"
        },
        "newChannelLocalization": {
            "!type": "fn() -> Youtube.Schema.ChannelLocalization"
        },
        "newChannelProfileDetails": {
            "!type": "fn() -> Youtube.Schema.ChannelProfileDetails"
        },
        "newChannelSection": {
            "!type": "fn() -> Youtube.Schema.ChannelSection"
        },
        "newChannelSectionContentDetails": {
            "!type": "fn() -> Youtube.Schema.ChannelSectionContentDetails"
        },
        "newChannelSectionLocalization": {
            "!type": "fn() -> Youtube.Schema.ChannelSectionLocalization"
        },
        "newChannelSectionSnippet": {
            "!type": "fn() -> Youtube.Schema.ChannelSectionSnippet"
        },
        "newChannelSectionTargeting": {
            "!type": "fn() -> Youtube.Schema.ChannelSectionTargeting"
        },
        "newChannelSettings": {
            "!type": "fn() -> Youtube.Schema.ChannelSettings"
        },
        "newChannelSnippet": {
            "!type": "fn() -> Youtube.Schema.ChannelSnippet"
        },
        "newChannelStatistics": {
            "!type": "fn() -> Youtube.Schema.ChannelStatistics"
        },
        "newChannelStatus": {
            "!type": "fn() -> Youtube.Schema.ChannelStatus"
        },
        "newChannelTopicDetails": {
            "!type": "fn() -> Youtube.Schema.ChannelTopicDetails"
        },
        "newComment": {
            "!type": "fn() -> Youtube.Schema.Comment"
        },
        "newCommentSnippet": {
            "!type": "fn() -> Youtube.Schema.CommentSnippet"
        },
        "newCommentThread": {
            "!type": "fn() -> Youtube.Schema.CommentThread"
        },
        "newCommentThreadReplies": {
            "!type": "fn() -> Youtube.Schema.CommentThreadReplies"
        },
        "newCommentThreadSnippet": {
            "!type": "fn() -> Youtube.Schema.CommentThreadSnippet"
        },
        "newContentRating": {
            "!type": "fn() -> Youtube.Schema.ContentRating"
        },
        "newGeoPoint": {
            "!type": "fn() -> Youtube.Schema.GeoPoint"
        },
        "newImageSettings": {
            "!type": "fn() -> Youtube.Schema.ImageSettings"
        },
        "newIngestionInfo": {
            "!type": "fn() -> Youtube.Schema.IngestionInfo"
        },
        "newInvideoBranding": {
            "!type": "fn() -> Youtube.Schema.InvideoBranding"
        },
        "newInvideoPosition": {
            "!type": "fn() -> Youtube.Schema.InvideoPosition"
        },
        "newInvideoPromotion": {
            "!type": "fn() -> Youtube.Schema.InvideoPromotion"
        },
        "newInvideoTiming": {
            "!type": "fn() -> Youtube.Schema.InvideoTiming"
        },
        "newLanguageTag": {
            "!type": "fn() -> Youtube.Schema.LanguageTag"
        },
        "newLiveBroadcast": {
            "!type": "fn() -> Youtube.Schema.LiveBroadcast"
        },
        "newLiveBroadcastContentDetails": {
            "!type": "fn() -> Youtube.Schema.LiveBroadcastContentDetails"
        },
        "newLiveBroadcastSnippet": {
            "!type": "fn() -> Youtube.Schema.LiveBroadcastSnippet"
        },
        "newLiveBroadcastStatistics": {
            "!type": "fn() -> Youtube.Schema.LiveBroadcastStatistics"
        },
        "newLiveBroadcastStatus": {
            "!type": "fn() -> Youtube.Schema.LiveBroadcastStatus"
        },
        "newLiveBroadcastTopic": {
            "!type": "fn() -> Youtube.Schema.LiveBroadcastTopic"
        },
        "newLiveBroadcastTopicDetails": {
            "!type": "fn() -> Youtube.Schema.LiveBroadcastTopicDetails"
        },
        "newLiveBroadcastTopicSnippet": {
            "!type": "fn() -> Youtube.Schema.LiveBroadcastTopicSnippet"
        },
        "newLiveChatBan": {
            "!type": "fn() -> Youtube.Schema.LiveChatBan"
        },
        "newLiveChatBanSnippet": {
            "!type": "fn() -> Youtube.Schema.LiveChatBanSnippet"
        },
        "newLiveChatFanFundingEventDetails": {
            "!type": "fn() -> Youtube.Schema.LiveChatFanFundingEventDetails"
        },
        "newLiveChatMessage": {
            "!type": "fn() -> Youtube.Schema.LiveChatMessage"
        },
        "newLiveChatMessageAuthorDetails": {
            "!type": "fn() -> Youtube.Schema.LiveChatMessageAuthorDetails"
        },
        "newLiveChatMessageSnippet": {
            "!type": "fn() -> Youtube.Schema.LiveChatMessageSnippet"
        },
        "newLiveChatModerator": {
            "!type": "fn() -> Youtube.Schema.LiveChatModerator"
        },
        "newLiveChatModeratorSnippet": {
            "!type": "fn() -> Youtube.Schema.LiveChatModeratorSnippet"
        },
        "newLiveChatTextMessageDetails": {
            "!type": "fn() -> Youtube.Schema.LiveChatTextMessageDetails"
        },
        "newLiveStream": {
            "!type": "fn() -> Youtube.Schema.LiveStream"
        },
        "newLiveStreamConfigurationIssue": {
            "!type": "fn() -> Youtube.Schema.LiveStreamConfigurationIssue"
        },
        "newLiveStreamContentDetails": {
            "!type": "fn() -> Youtube.Schema.LiveStreamContentDetails"
        },
        "newLiveStreamHealthStatus": {
            "!type": "fn() -> Youtube.Schema.LiveStreamHealthStatus"
        },
        "newLiveStreamSnippet": {
            "!type": "fn() -> Youtube.Schema.LiveStreamSnippet"
        },
        "newLiveStreamStatus": {
            "!type": "fn() -> Youtube.Schema.LiveStreamStatus"
        },
        "newLocalizedProperty": {
            "!type": "fn() -> Youtube.Schema.LocalizedProperty"
        },
        "newLocalizedString": {
            "!type": "fn() -> Youtube.Schema.LocalizedString"
        },
        "newMonitorStreamInfo": {
            "!type": "fn() -> Youtube.Schema.MonitorStreamInfo"
        },
        "newPlaylist": {
            "!type": "fn() -> Youtube.Schema.Playlist"
        },
        "newPlaylistContentDetails": {
            "!type": "fn() -> Youtube.Schema.PlaylistContentDetails"
        },
        "newPlaylistItem": {
            "!type": "fn() -> Youtube.Schema.PlaylistItem"
        },
        "newPlaylistItemContentDetails": {
            "!type": "fn() -> Youtube.Schema.PlaylistItemContentDetails"
        },
        "newPlaylistItemSnippet": {
            "!type": "fn() -> Youtube.Schema.PlaylistItemSnippet"
        },
        "newPlaylistItemStatus": {
            "!type": "fn() -> Youtube.Schema.PlaylistItemStatus"
        },
        "newPlaylistLocalization": {
            "!type": "fn() -> Youtube.Schema.PlaylistLocalization"
        },
        "newPlaylistPlayer": {
            "!type": "fn() -> Youtube.Schema.PlaylistPlayer"
        },
        "newPlaylistSnippet": {
            "!type": "fn() -> Youtube.Schema.PlaylistSnippet"
        },
        "newPlaylistStatus": {
            "!type": "fn() -> Youtube.Schema.PlaylistStatus"
        },
        "newPromotedItem": {
            "!type": "fn() -> Youtube.Schema.PromotedItem"
        },
        "newPromotedItemId": {
            "!type": "fn() -> Youtube.Schema.PromotedItemId"
        },
        "newPropertyValue": {
            "!type": "fn() -> Youtube.Schema.PropertyValue"
        },
        "newResourceId": {
            "!type": "fn() -> Youtube.Schema.ResourceId"
        },
        "newSubscription": {
            "!type": "fn() -> Youtube.Schema.Subscription"
        },
        "newSubscriptionContentDetails": {
            "!type": "fn() -> Youtube.Schema.SubscriptionContentDetails"
        },
        "newSubscriptionSnippet": {
            "!type": "fn() -> Youtube.Schema.SubscriptionSnippet"
        },
        "newSubscriptionSubscriberSnippet": {
            "!type": "fn() -> Youtube.Schema.SubscriptionSubscriberSnippet"
        },
        "newThumbnail": {
            "!type": "fn() -> Youtube.Schema.Thumbnail"
        },
        "newThumbnailDetails": {
            "!type": "fn() -> Youtube.Schema.ThumbnailDetails"
        },
        "newVideo": {
            "!type": "fn() -> Youtube.Schema.Video"
        },
        "newVideoAbuseReport": {
            "!type": "fn() -> Youtube.Schema.VideoAbuseReport"
        },
        "newVideoAgeGating": {
            "!type": "fn() -> Youtube.Schema.VideoAgeGating"
        },
        "newVideoContentDetails": {
            "!type": "fn() -> Youtube.Schema.VideoContentDetails"
        },
        "newVideoContentDetailsRegionRestriction": {
            "!type": "fn() -> Youtube.Schema.VideoContentDetailsRegionRestriction"
        },
        "newVideoConversionPing": {
            "!type": "fn() -> Youtube.Schema.VideoConversionPing"
        },
        "newVideoConversionPings": {
            "!type": "fn() -> Youtube.Schema.VideoConversionPings"
        },
        "newVideoFileDetails": {
            "!type": "fn() -> Youtube.Schema.VideoFileDetails"
        },
        "newVideoFileDetailsAudioStream": {
            "!type": "fn() -> Youtube.Schema.VideoFileDetailsAudioStream"
        },
        "newVideoFileDetailsVideoStream": {
            "!type": "fn() -> Youtube.Schema.VideoFileDetailsVideoStream"
        },
        "newVideoLiveStreamingDetails": {
            "!type": "fn() -> Youtube.Schema.VideoLiveStreamingDetails"
        },
        "newVideoLocalization": {
            "!type": "fn() -> Youtube.Schema.VideoLocalization"
        },
        "newVideoMonetizationDetails": {
            "!type": "fn() -> Youtube.Schema.VideoMonetizationDetails"
        },
        "newVideoPlayer": {
            "!type": "fn() -> Youtube.Schema.VideoPlayer"
        },
        "newVideoProcessingDetails": {
            "!type": "fn() -> Youtube.Schema.VideoProcessingDetails"
        },
        "newVideoProcessingDetailsProcessingProgress": {
            "!type": "fn() -> Youtube.Schema.VideoProcessingDetailsProcessingProgress"
        },
        "newVideoProjectDetails": {
            "!type": "fn() -> Youtube.Schema.VideoProjectDetails"
        },
        "newVideoRecordingDetails": {
            "!type": "fn() -> Youtube.Schema.VideoRecordingDetails"
        },
        "newVideoSnippet": {
            "!type": "fn() -> Youtube.Schema.VideoSnippet"
        },
        "newVideoStatistics": {
            "!type": "fn() -> Youtube.Schema.VideoStatistics"
        },
        "newVideoStatus": {
            "!type": "fn() -> Youtube.Schema.VideoStatus"
        },
        "newVideoSuggestions": {
            "!type": "fn() -> Youtube.Schema.VideoSuggestions"
        },
        "newVideoSuggestionsTagSuggestion": {
            "!type": "fn() -> Youtube.Schema.VideoSuggestionsTagSuggestion"
        },
        "newVideoTopicDetails": {
            "!type": "fn() -> Youtube.Schema.VideoTopicDetails"
        },
        "newWatchSettings": {
            "!type": "fn() -> Youtube.Schema.WatchSettings"
        }
    },
    "YoutubeAnalytics": {
        "BatchReportDefinitions": {
            "!type": "YoutubeAnalytics.Collection.BatchReportDefinitionsCollection"
        },
        "BatchReports": {
            "!type": "YoutubeAnalytics.Collection.BatchReportsCollection"
        },
        "GroupItems": {
            "!type": "YoutubeAnalytics.Collection.GroupItemsCollection"
        },
        "Groups": {
            "!type": "YoutubeAnalytics.Collection.GroupsCollection"
        },
        "Reports": {
            "!type": "YoutubeAnalytics.Collection.ReportsCollection"
        },
        "newGroup": {
            "!type": "fn() -> YoutubeAnalytics.Schema.Group"
        },
        "newGroupContentDetails": {
            "!type": "fn() -> YoutubeAnalytics.Schema.GroupContentDetails"
        },
        "newGroupItem": {
            "!type": "fn() -> YoutubeAnalytics.Schema.GroupItem"
        },
        "newGroupItemResource": {
            "!type": "fn() -> YoutubeAnalytics.Schema.GroupItemResource"
        },
        "newGroupSnippet": {
            "!type": "fn() -> YoutubeAnalytics.Schema.GroupSnippet"
        }
    }
}